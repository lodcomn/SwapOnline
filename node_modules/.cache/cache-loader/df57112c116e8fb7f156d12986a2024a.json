{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\next.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\next.ts","mtime":1614852041870},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/next.ts"],"names":["BigInteger","BigNumber","bitcoin","bip39","bitcoinMessage","getState","reducers","next","apiLooper","constants","actions","typeforce","config","bitcore","require","mnemonicUtils","default","nextUtils","NETWORK","process","env","MAINNET","hasAdminFee","opts","fee","address","min","getRandomMnemonicWords","generateMnemonic","validateMnemonicWords","mnemonic","validateMnemonic","convertMnemonicToValid","sweepToMnemonic","path","wallet","getWalletByWords","localStorage","setItem","privateKeyNames","nextMnemonic","WIF","getMainPublicKey","nextData","user","publicKey","toString","isSweeped","nextMnemonicData","toLowerCase","getSweepAddress","walletNumber","getNextWallet","network","auth","privateKey","Error","keyPair","ECPair","fromWIF","account","payments","p2pkh","pubkey","getPrivateKeyByAddress","oldAddress","mnemonicAddress","mnemonicKey","login","mnemonicKeys","sweepToMnemonicReady","hash","crypto","sha256","d","fromBuffer","console","info","accData","log","data","isMnemonic","currency","fullName","window","getNextAddress","getNextData","setAuthData","name","error","mnemonicData","addWallet","balance","isBalanceFetched","balanceError","infoAboutCurrency","Promise","resolve","fetchBalanceStatus","balanceData","setBalanceError","getTx","txRaw","getId","getTxRouter","txId","getLinkToInfo","tx","link","nextExplorer","get","checkStatus","answer","undefined","e","then","unconfirmedBalance","getBalance","inQuery","delay","ignoreErrors","setBalance","amount","fetchBalance","fetchTx","cacheResponse","fetchTxRaw","rawtx","fetchTxInfo","getInvoices","userAddress","invoices","getAllMyAddresses","nextMultisigSMSData","nextMultisigUserData","nextMultisigG2FAData","nextMultisigPinData","retData","push","wallets","length","map","getDataByAddress","founded","filter","getTransaction","ownType","myAllWallets","type","isCoinAddress","NEXT","txs","query","res","transactions","item","direction","vin","addr","isSelf","vout","scriptPubKey","addresses","txid","canEdit","indexOf","confirmations","value","fees","currentAddress","date","time","send","from","to","feeValue","speed","ready","Networks","add","pubkeyhash","pubKeyHash","privatekey","wif","scripthash","scriptHash","xpubkey","bip32","xprivkey","networkMagic","port","bitcoreNetwork","privKeyWIF","PrivateKey","PublicKey","addressFrom","Address","fetchUnspents","unspents","amountSat","String","multipliedBy","integerValue","toNumber","transaction","Transaction","change","sign","rawTx","serialize","broadcastTx","broadcastAnswer","raw","signMessage","message","encodedPrivateKey","networks","mainnet","privateKeyBuff","Buffer","signature","compressed","getReputation","checkWithdraw","scriptAddress"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport BigInteger from 'bigi'\r\n\r\nimport { BigNumber } from 'bignumber.js'\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport * as bip32 from 'bip32'\r\nimport * as bip39 from 'bip39'\r\n\r\nimport bitcoinMessage from 'bitcoinjs-message'\r\nimport { getState } from 'redux/core'\r\nimport reducers from 'redux/core/reducers'\r\nimport { next, apiLooper, constants, api } from 'helpers'\r\nimport actions from 'redux/actions'\r\nimport typeforce from 'swap.app/util/typeforce'\r\nimport config from 'app-config'\r\nconst bitcore = require('bitcore-lib')\r\nimport { localisePrefix } from 'helpers/locale'\r\nimport * as mnemonicUtils from '../../../../common/utils/mnemonic'\r\nimport { default as nextUtils } from '../../../../common/utils/coin/next'\r\n\r\n\r\nconst NETWORK = (process.env.MAINNET) ? `MAINNET` : `TESTNET`\r\n\r\n\r\nconst hasAdminFee = (config\r\n  && config.opts\r\n  && config.opts.fee\r\n  && config.opts.fee.next\r\n  && config.opts.fee.next.fee\r\n  && config.opts.fee.next.address\r\n  && config.opts.fee.next.min\r\n) ? config.opts.fee.next : false\r\n\r\nconst getRandomMnemonicWords = () => bip39.generateMnemonic()\r\nconst validateMnemonicWords = (mnemonic) => bip39.validateMnemonic(mnemonicUtils.convertMnemonicToValid(mnemonic))\r\n\r\n\r\nconst sweepToMnemonic = (mnemonic, path) => {\r\n  const wallet = getWalletByWords(mnemonic, path)\r\n  localStorage.setItem(constants.privateKeyNames.nextMnemonic, wallet.WIF)\r\n  return wallet.WIF\r\n}\r\n\r\nconst getMainPublicKey = () => {\r\n  const {\r\n    user: {\r\n      nextData,\r\n    },\r\n  } = getState()\r\n\r\n  return nextData.publicKey.toString('Hex')\r\n}\r\n\r\nconst isSweeped = () => {\r\n  const {\r\n    user: {\r\n      nextData,\r\n      nextMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (nextMnemonicData\r\n    && nextMnemonicData.address\r\n    && nextData\r\n    && nextData.address\r\n    && nextData.address.toLowerCase() !== nextMnemonicData.address.toLowerCase()\r\n  ) return false\r\n\r\n  return true\r\n}\r\n\r\nconst getSweepAddress = () => {\r\n  const {\r\n    user: {\r\n      nextMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (nextMnemonicData && nextMnemonicData.address) return nextMnemonicData.address\r\n  return false\r\n}\r\n\r\nconst getWalletByWords = (mnemonic: string, walletNumber: number = 0, path: string = '') => {\r\n  return mnemonicUtils.getNextWallet(next.network, mnemonic, walletNumber, path)\r\n}\r\n\r\n\r\nconst auth = (privateKey) => {\r\n  if (!privateKey) {\r\n    throw new Error('Missing privateKey')\r\n  }\r\n  //@\r\n  const keyPair = bitcoin.ECPair.fromWIF(privateKey, next.network)\r\n  //@\r\n  const account = bitcoin.ECPair.fromWIF(privateKey, next.network)\r\n  //@\r\n  const { address } = bitcoin.payments.p2pkh({\r\n    pubkey: account.publicKey,\r\n    //@\r\n    network: next.network,\r\n  })\r\n\r\n  const { publicKey } = account\r\n\r\n  return {\r\n    account,\r\n    keyPair,\r\n    address,\r\n    privateKey,\r\n    publicKey,\r\n  }\r\n}\r\n\r\nconst getPrivateKeyByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      nextData: {\r\n        address: oldAddress,\r\n        privateKey,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  if (oldAddress === address) return privateKey\r\n  //@\r\n  if (mnemonicAddress === address) return mnemonicKey\r\n}\r\n\r\nconst login = (privateKey, mnemonic = null, mnemonicKeys = null) => {\r\n  let sweepToMnemonicReady = false\r\n\r\n  if (privateKey\r\n    && mnemonic\r\n    && mnemonicKeys\r\n    && mnemonicKeys.next === privateKey\r\n  ) sweepToMnemonicReady = true\r\n\r\n  if (!privateKey && mnemonic) sweepToMnemonicReady = true\r\n\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    // keyPair     = bitcoin.ECPair.fromWIF(privateKey, next.network)\r\n  } else {\r\n    console.info('Created account Next ...')\r\n    // keyPair     = bitcoin.ECPair.makeRandom({ network: next.network })\r\n    // privateKey  = keyPair.toWIF()\r\n    // use random 12 words\r\n    if (!mnemonic) mnemonic = bip39.generateMnemonic()\r\n    \r\n    const accData = getWalletByWords(mnemonic)\r\n    console.log('Next. Generated wallet from random 12 words')\r\n    console.log(accData)\r\n    privateKey = accData.WIF\r\n    localStorage.setItem(constants.privateKeyNames.nextMnemonic, privateKey)\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.next, privateKey)\r\n\r\n  const data = {\r\n    ...auth(privateKey),\r\n    isMnemonic: sweepToMnemonicReady,\r\n    currency: 'NEXT',\r\n    fullName: 'NEXT.coin',\r\n  }\r\n\r\n  window.getNextAddress = () => data.address\r\n  window.getNextData = () => data\r\n\r\n  console.info('Logged in with Next', data)\r\n  reducers.user.setAuthData({\r\n    name: 'nextData',\r\n    data,\r\n  })\r\n  if (!sweepToMnemonicReady) {\r\n    // Auth with our mnemonic account\r\n    if (mnemonic === `-`) {\r\n      console.error('Sweep. Cant auth. Need new mnemonic or enter own for re-login')\r\n      return\r\n    }\r\n\r\n    if (!mnemonicKeys || !mnemonicKeys.next) {\r\n      console.error('Sweep. Cant auth. Login key undefined')\r\n      return\r\n    }\r\n\r\n    const mnemonicData = {\r\n      ...auth(mnemonicKeys.next),\r\n      isMnemonic: true,\r\n    }\r\n    console.info('Logged in with Next Mnemonic', mnemonicData)\r\n    reducers.user.addWallet({\r\n      name: 'nextMnemonicData',\r\n      data: {\r\n        currency: 'NEXT',\r\n        fullName: 'Next (New)',\r\n        balance: 0,\r\n        isBalanceFetched: false,\r\n        balanceError: null,\r\n        infoAboutCurrency: null,\r\n        ...mnemonicData,\r\n      },\r\n    })\r\n    new Promise(async (resolve) => {\r\n      const balanceData = await fetchBalanceStatus(mnemonicData.address)\r\n      if (balanceData) {\r\n        reducers.user.setAuthData({\r\n          name: 'nextMnemonicData',\r\n          data: {\r\n            //@\r\n            ...balanceData,\r\n            isBalanceFetched: true,\r\n          },\r\n        })\r\n      } else {\r\n        reducers.user.setBalanceError({ name: 'nextMnemonicData' })\r\n      }\r\n      resolve(true)\r\n    })\r\n  }\r\n\r\n  return privateKey\r\n}\r\n\r\n\r\nconst getTx = (txRaw) => {\r\n  if (txRaw\r\n    && txRaw.getId\r\n    //@\r\n    && txRaw.getId instanceof 'function'\r\n  ) {\r\n    return txRaw.getId()\r\n  } else {\r\n    return txRaw\r\n  }\r\n}\r\n\r\nconst getTxRouter = (txId) => `/next/tx/${txId}`\r\n\r\nconst getLinkToInfo = (tx) => {\r\n  if (!tx) {\r\n    return\r\n  }\r\n  return `${config.link.nextExplorer}/#/tx/${tx}`\r\n}\r\n\r\nconst fetchBalanceStatus = (address) => {\r\n  return apiLooper.get('nextExplorer', `/address/${address}`, {\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.balance !== undefined) return true\r\n      } catch (e) { /* */console.log(e) }\r\n      return false\r\n    },\r\n  }).then(({ balance, unconfirmedBalance }) => ({\r\n    address,\r\n    balance,\r\n    unconfirmedBalance,\r\n  })).catch((e) => false)\r\n}\r\n\r\nconst getBalance = () => {\r\n  const { user: { nextData: { address } } } = getState()\r\n\r\n  return apiLooper.get('nextExplorer', `/address/${address}`, {\r\n    inQuery: {\r\n      delay: 500,\r\n      name: `balance`,\r\n    },\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.balance !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n    ignoreErrors: true,\r\n  }).then((answer: any) => {\r\n    const balance = (typeof answer.balance === 'undefined') ? 0 : answer.balance\r\n    const unconfirmedBalance = (typeof answer.unconfirmedBalance === 'undefined') ? 0 : answer.unconfirmedBalance\r\n    console.log('NEXT Balance: ', balance)\r\n    console.log('NEXT unconfirmedBalance Balance: ', unconfirmedBalance)\r\n    reducers.user.setBalance({\r\n      name: 'nextData',\r\n      amount: balance,\r\n      unconfirmedBalance,\r\n    })\r\n    return balance\r\n  }).catch((e) => {\r\n    reducers.user.setBalanceError({ name: 'nextData' })\r\n  })\r\n}\r\n\r\nconst fetchBalance = (address) => nextUtils.fetchBalance({\r\n  address,\r\n  NETWORK,\r\n})\r\n\r\nconst fetchTx = (hash, cacheResponse) => nextUtils.fetchTx({\r\n  hash,\r\n  cacheResponse,\r\n  NETWORK,\r\n})\r\n\r\nconst fetchTxRaw = (txId, cacheResponse) =>\r\n  apiLooper.get('nextExplorer', `/rawtx/${txId}`, {\r\n    cacheResponse,\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.rawtx !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n  }).then(({ rawtx }) => rawtx)\r\n\r\nconst fetchTxInfo = (hash, cacheResponse) => nextUtils.fetchTxInfo({\r\n  hash,\r\n  cacheResponse,\r\n  NETWORK,\r\n})\r\n\r\nconst getInvoices = (address) => {\r\n  const { user: { nextData: { userAddress } } } = getState()\r\n\r\n  address = address || userAddress\r\n\r\n  return actions.invoices.getInvoices({\r\n    currency: 'NEXT',\r\n    address,\r\n  })\r\n}\r\n\r\nconst getAllMyAddresses = () => {\r\n  const {\r\n    user: {\r\n      nextData,\r\n      nextMnemonicData,\r\n      nextMultisigSMSData,\r\n      nextMultisigUserData,\r\n      nextMultisigG2FAData,\r\n      nextMultisigPinData,\r\n    },\r\n  } = getState()\r\n\r\n  const retData = []\r\n  // Проверяем, был ли sweep\r\n  if (nextMnemonicData\r\n    && nextMnemonicData.address\r\n    && nextData\r\n    && nextData.address\r\n    && nextMnemonicData.address !== nextData.address\r\n  ) {\r\n    retData.push(nextMnemonicData.address.toLowerCase())\r\n  }\r\n\r\n  retData.push(nextData.address.toLowerCase())\r\n\r\n  if (nextMultisigSMSData && nextMultisigSMSData.address) retData.push(nextMultisigSMSData.address.toLowerCase())\r\n  // @ToDo - SMS MultiWallet\r\n\r\n  if (nextMultisigUserData && nextMultisigUserData.address) retData.push(nextMultisigUserData.address.toLowerCase())\r\n  if (nextMultisigUserData && nextMultisigUserData.wallets && nextMultisigUserData.wallets.length) {\r\n    nextMultisigUserData.wallets.map((wallet) => {\r\n      retData.push(wallet.address.toLowerCase())\r\n    })\r\n  }\r\n\r\n  if (nextMultisigPinData && nextMultisigPinData.address) retData.push(nextMultisigPinData.address.toLowerCase())\r\n\r\n  return retData\r\n}\r\n\r\nconst getDataByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      nextData,\r\n      nextMnemonicData,\r\n      nextMultisigSMSData,\r\n      nextMultisigUserData,\r\n      nextMultisigG2FAData,\r\n    },\r\n  } = getState()\r\n\r\n  const founded = [\r\n    nextData,\r\n    nextMnemonicData,\r\n    nextMultisigSMSData,\r\n    nextMultisigUserData,\r\n    ...(\r\n      nextMultisigUserData\r\n      && nextMultisigUserData.wallets\r\n      && nextMultisigUserData.wallets.length\r\n    )\r\n      ? nextMultisigUserData.wallets\r\n      : [],\r\n    nextMultisigG2FAData,\r\n  ].filter(data => data && data.address && data.address.toLowerCase() === address.toLowerCase())\r\n\r\n  return (founded.length) ? founded[0] : false\r\n}\r\n\r\nconst getTransaction = (address: string = ``, ownType: string = ``) =>\r\n  new Promise((resolve) => {\r\n    const myAllWallets = getAllMyAddresses()\r\n\r\n    let { user: { nextData: { address: userAddress } } } = getState()\r\n    address = address || userAddress\r\n\r\n    const type = (ownType) || 'next'\r\n\r\n    if (!typeforce.isCoinAddress.NEXT(address)) {\r\n      resolve([])\r\n    }\r\n\r\n    return apiLooper.get('nextExplorer', `/txs/?address=${address}`, {\r\n      checkStatus: (answer) => {\r\n        try {\r\n          if (answer && answer.txs !== undefined) return true\r\n        } catch (e) { /* */ }\r\n        return false\r\n      },\r\n      query: 'next_balance',\r\n    }).then((res: any) => {\r\n      const transactions = res.txs.map((item) => {\r\n        const direction = item.vin[0].addr !== address ? 'in' : 'out'\r\n\r\n        const isSelf = direction === 'out'\r\n          && item.vout.filter((item) =>\r\n            item.scriptPubKey.addresses[0] === address\r\n          ).length === item.vout.length\r\n\r\n        return ({\r\n          type,\r\n          hash: item.txid,\r\n          canEdit: (myAllWallets.indexOf(address) !== -1),\r\n          confirmations: item.confirmations,\r\n          value: isSelf\r\n            ? item.fees\r\n            : item.vout.filter((item) => {\r\n              if (!item.scriptPubKey.addresses) return false\r\n              const currentAddress = item.scriptPubKey.addresses[0]\r\n\r\n              return direction === 'in'\r\n                ? (currentAddress === address)\r\n                : (currentAddress !== address)\r\n            })[0].value,\r\n          date: item.time * 1000,\r\n          direction: isSelf ? 'self' : direction,\r\n        })\r\n      })\r\n      resolve(transactions)\r\n    })\r\n      .catch(() => {\r\n        resolve([])\r\n      })\r\n  })\r\n\r\n//@\r\nconst send = ({ from, to, amount, feeValue, speed } = {}) => {\r\n\r\n  return new Promise(async (ready) => {\r\n    bitcore.Networks.add({\r\n      name: 'next-mainnet',\r\n      pubkeyhash: next.network.pubKeyHash,\r\n      privatekey: next.network.wif,\r\n      scripthash: next.network.scriptHash,\r\n      xpubkey: next.network.bip32.public,\r\n      xprivkey: next.network.bip32.private,\r\n      networkMagic: 0xcbe4d0a1,\r\n      port: 7077,\r\n    })\r\n    const bitcoreNetwork = bitcore.Networks.get('next-mainnet')\r\n\r\n    const privKeyWIF = getPrivateKeyByAddress(from)\r\n    const privateKey = new bitcore.PrivateKey.fromWIF(privKeyWIF)\r\n    const publicKey = bitcore.PublicKey(privateKey, bitcoreNetwork)\r\n    const addressFrom = new bitcore.Address(publicKey, bitcoreNetwork)\r\n\r\n    const unspents = await fetchUnspents(from)\r\n    const amountSat = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n\r\n    const transaction = new bitcore.Transaction()\r\n      .from(unspents)\r\n      .to(to, amountSat)\r\n      .change(addressFrom)\r\n      .sign(privateKey)\r\n\r\n    const rawTx = String(transaction.serialize())\r\n    const broadcastAnswer: any = await broadcastTx(rawTx)\r\n    const txid = broadcastAnswer.raw\r\n    ready(txid)\r\n  })\r\n}\r\n\r\n\r\nconst fetchUnspents = (address) => nextUtils.fetchUnspents({\r\n  address,\r\n  NETWORK,\r\n})\r\n\r\n\r\nconst broadcastTx = (txRaw) => nextUtils.broadcastTx({\r\n  txRaw,\r\n  NETWORK,\r\n})\r\n\r\nconst signMessage = (message, encodedPrivateKey) => {\r\n  //@\r\n  const keyPair = bitcoin.ECPair.fromWIF(encodedPrivateKey, [next.networks.mainnet])\r\n  const privateKeyBuff = Buffer.from(keyPair.privateKey)\r\n\r\n  const signature = bitcoinMessage.sign(message, privateKeyBuff, keyPair.compressed)\r\n\r\n  return signature.toString('base64')\r\n}\r\n\r\nconst getReputation = () => Promise.resolve(0)\r\n\r\nconst checkWithdraw = (scriptAddress) => nextUtils.checkWithdraw({\r\n  scriptAddress,\r\n  NETWORK,\r\n})\r\n\r\nexport default {\r\n  login,\r\n  checkWithdraw,\r\n  getBalance,\r\n  getTransaction,\r\n  send,\r\n  fetchUnspents,\r\n  broadcastTx,\r\n  fetchTx,\r\n  fetchTxInfo,\r\n  fetchBalance,\r\n  signMessage,\r\n  getReputation,\r\n  getTx,\r\n  getLinkToInfo,\r\n  getInvoices,\r\n  getWalletByWords,\r\n  getRandomMnemonicWords,\r\n  validateMnemonicWords,\r\n  sweepToMnemonic,\r\n  isSweeped,\r\n  getSweepAddress,\r\n  getAllMyAddresses,\r\n  getDataByAddress,\r\n  getMainPublicKey,\r\n  getTxRouter,\r\n  fetchTxRaw,\r\n}\r\n"]}]}