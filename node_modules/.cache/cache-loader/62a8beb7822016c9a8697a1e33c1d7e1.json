{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\turbo\\Taker.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\turbo\\Taker.ts","mtime":1614842913761},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/turbo/Taker.ts"],"names":["debug","Flow","TurboTaker","swap","console","log","stepNumbers","mySwap","ownerSwap","participantSwap","state","step","isSignFetching","isMeSigned","isBalanceFetching","isBalanceEnough","takerTxHash","isTakerTxPended","makerTxHash","isMakerTxPended","isStoppedSwap","isFinished","flow","room","once","setState","on","sendMessage","event","finishStep","amount","sellAmount","to","participant","sellCurrency","toLowerCase","address","_swapName","toUpperCase","usedSwap","Error","sendTransaction","txHash","data"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { Flow } from 'swap.swap'\r\n\r\n\r\nexport default class TurboTaker extends Flow {\r\n\r\n  _flowName = 'TurboTaker'\r\n  static getName = () => 'TurboTaker'\r\n\r\n  mySwap: any\r\n  participantSwap: any\r\n\r\n  state: {\r\n    step: 0 | 1 | 2 | 3 | 4 | 5 | 6,\r\n\r\n    isSignFetching: boolean,\r\n    isMeSigned: boolean,\r\n\r\n    isBalanceFetching: boolean,\r\n    isBalanceEnough: boolean,\r\n\r\n    takerTxHash: null | string\r\n    isTakerTxPended: boolean\r\n\r\n    makerTxHash: null | string\r\n    isMakerTxPended: boolean\r\n\r\n    isStoppedSwap: boolean,\r\n    isFinished: boolean,\r\n  }\r\n\r\n  constructor(swap) {\r\n    super(swap)\r\n    console.log('Create Taker flow (swap), =', swap)\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'check-balance': 2,\r\n      'send-taker-tx': 3,\r\n      'wait-maker-tx': 4,\r\n      'finish': 5,\r\n      'end': 6\r\n    }\r\n\r\n    this.mySwap = swap.ownerSwap\r\n    this.participantSwap = swap.participantSwap\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isSignFetching: false,\r\n      isMeSigned: false,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n\r\n      takerTxHash: null,\r\n      isTakerTxPended: false,\r\n\r\n      makerTxHash: null,\r\n      isMakerTxPended: false,\r\n\r\n      isStoppedSwap: false,\r\n      isFinished: false,\r\n    }\r\n\r\n    const flow = this\r\n    const room = flow.swap.room\r\n\r\n    room.once('request withdraw', () => {\r\n      flow.setState({\r\n        //withdrawRequestIncoming: true,\r\n      })\r\n    })\r\n\r\n    super._persistState()\r\n    super._persistSteps()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n    const swap = this.swap\r\n    const room = this.swap.room\r\n\r\n    const mySwap = this.mySwap\r\n    const participantSwap = this.participantSwap\r\n\r\n    return [\r\n\r\n      async () => {\r\n        console.log(`Taker Step 1: 'sign'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        //flow.swap.processMetamask()\r\n\r\n        const { isSignFetching, isMeSigned } = flow.state\r\n\r\n        if (isSignFetching || isMeSigned) {\r\n          return true\r\n        }\r\n\r\n        flow.setState({\r\n          isSignFetching: true,\r\n        })\r\n\r\n        room.on('request sign', () => {\r\n          room.sendMessage({\r\n            event: 'swap sign',\r\n          })\r\n        })\r\n\r\n        room.sendMessage({\r\n          event: 'swap sign',\r\n        })\r\n\r\n        flow.finishStep({\r\n          isMeSigned: true,\r\n        }, { step: 'sign' })\r\n\r\n        return true\r\n      },\r\n\r\n\r\n      async () => {\r\n        console.log(`Taker Step 2: 'check-balance'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        // just test\r\n\r\n        /*const b1 = await mySwap.fetchBalance(swap.participant[swap.buyCurrency.toLowerCase()].address)\r\n        console.log('b1=', b1)\r\n\r\n        const b2 = await participantSwap.fetchBalance(swap.participant[swap.sellCurrency.toLowerCase()].address)\r\n        console.log('b2=', b2)*/\r\n\r\n\r\n\r\n        /*const { sellAmount } = this.swap\r\n\r\n        this.setState({\r\n          isBalanceFetching: true,\r\n        })\r\n\r\n        const balance = await this.ethSwap.fetchBalance(\r\n          this.app.getMyEthAddress()\r\n        )\r\n        const isEnoughMoney = sellAmount.isLessThanOrEqualTo(balance)\r\n\r\n        const stateData = {\r\n          isBalanceFetching: false,\r\n          isBalanceEnough: isEnoughMoney,\r\n        }\r\n\r\n        if (isEnoughMoney) {\r\n          this.finishStep(stateData, { step: 'check-balance' })\r\n        } else {\r\n          this.setState(stateData, true)\r\n        }*/\r\n\r\n        //return true\r\n\r\n        //temp\r\n        this.finishStep({\r\n          isBalanceEnough: true,\r\n        }, { step: 'check-balance' })\r\n      },\r\n\r\n\r\n      async () => {\r\n        console.log(`Taker Step 3: 'send-taker-tx'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        // send tx\r\n\r\n        const amount = swap.sellAmount\r\n        const to = swap.participant[swap.sellCurrency.toLowerCase()].address\r\n\r\n        console.log(`Send ${amount} ${swap.sellCurrency} to maker address \"${to}\"...`)\r\n\r\n        let usedSwap\r\n        if (mySwap._swapName === swap.sellCurrency.toUpperCase()) {\r\n          usedSwap = mySwap\r\n        }\r\n        if (participantSwap._swapName === swap.sellCurrency.toUpperCase()) {\r\n          usedSwap = participantSwap\r\n        }\r\n        if (!usedSwap) {\r\n          throw new Error(`No swap for ${swap.sellCurrency}`)\r\n        } else {\r\n          console.log('Swap found!', usedSwap)\r\n        }\r\n\r\n        const txHash = await usedSwap.sendTransaction({ to, amount })\r\n\r\n        console.log(`Sended! txHash = ${txHash}`)\r\n\r\n        room.sendMessage({\r\n          event: 'taker tx sended',\r\n          data: {\r\n            txHash,\r\n          }\r\n        })\r\n\r\n        flow.finishStep({\r\n          takerTxHash: txHash,\r\n          isTakerTxPended: true, // todo later\r\n        }, 'send-taker-tx')\r\n      },\r\n\r\n\r\n      () => {\r\n        console.log(`Taker Step 4: 'wait-maker-tx'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        room.once('maker tx sended', ({ txHash }) => {\r\n          console.log(`RECEIVED from maker: tx hash =`, txHash)\r\n          console.log('Check maker tx...')\r\n          // todo: tx check\r\n          //... || this.stopSwapProcess()\r\n          console.log('Maker tx is OK!')\r\n          \r\n          flow.finishStep({\r\n            makerTxHash: txHash,\r\n            isMakerTxPended: true, // todo later\r\n          }, { step: 'wait-maker-tx' })\r\n        })\r\n      },\r\n\r\n\r\n      () => {\r\n        console.log(`Taker Step 5: 'finish'`)\r\n        /*room.once('request swap finished', () => {\r\n          const { btcSwapWithdrawTransactionHash } = flow.state\r\n\r\n          room.sendMessage({\r\n            event: 'swap finished',\r\n            data: {\r\n              btcSwapWithdrawTransactionHash,\r\n            },\r\n          })\r\n        })\r\n        */\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, { step: 'finish' })\r\n      },\r\n\r\n\r\n      () => {\r\n        console.log(`Taker Step 6: 'end'`)\r\n        // Finished!\r\n      }\r\n    ]\r\n  }\r\n\r\n  stopSwapProcess() {\r\n    const flow = this\r\n\r\n    debug('swap.core:flow')('Swap was stopped')\r\n\r\n    flow.setState({\r\n      isStoppedSwap: true,\r\n    }, true)\r\n  }\r\n\r\n}\r\n"]}]}