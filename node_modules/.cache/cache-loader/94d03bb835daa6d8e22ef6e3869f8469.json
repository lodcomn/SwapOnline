{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swap\\AtomicAB2UTXO.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swap\\AtomicAB2UTXO.ts","mtime":1614842913766},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.swap/AtomicAB2UTXO.ts"],"names":["debug","util","Flow","BigNumber","AtomicAB2UTXO","swap","state","participantHasLockedUTXO","requireWithdrawFee","requireWithdrawFeeSended","isUTXOScriptOk","utxoScriptValues","utxoScriptVerified","utxoScriptCreatingTransactionHash","waitUnlockUTXO","utxoFundError","withdrawRequestAccepted","processMetamask","room","once","step","tryRefund","finishStep","isParticipantSigned","silentError","setState","isSwapExist","stopSwapProcess","sendMessage","event","flow","on","scriptValues","secretHash","isFunded","participant","buyAmount","sellAmount","waitConfirm","utcNow","Math","floor","Date","now","helpers","repeatAsyncUntilResult","stopRepeat","utxoCoin","checkScript","value","recipientPublicKey","app","services","auth","accounts","getPublicKey","lockTime","confidence","isWhiteList","isWhitelistBtc","btc","address","scriptCheckError","test","console","error","warn","data","events","dispatch","Error","_checkSwapAlreadyExists","swapExists","isSignFetching","isMeSigned","secret","participantAddress","getParticipantEthAddress","abBlockchain","withdrawNoMoney","hash","ethSwapWithdrawTransactionHash","message","sendWithdrawRequestToAnotherParticipant","utxoBlockchain","checkWithdraw","createScript","scriptAddress","destinationAddress","destinationBuyAddress","destAddress","getAddress","hasWithdraw","toLowerCase","env","bitcoin","crypto","ripemd160","Buffer","from","toString","createWorkUTXOScript","_secret","replace","getLockTime","ownerPublicKey","publicKey","scriptBalance","scriptUnspendBalance","isUTXOSide","syncBalanceUTXO","syncBalanceAB","isBalanceFetching","fetchBalance","getMyEthAddress","balance","isEnoughMoney","isLessThanOrEqualTo","stateData","isBalanceEnough","utxoAddress","estimateFeeValue","method","fixed","txFee","fetchUnspents","unspents","totalUnspent","reduce","summ","satoshis","dividedBy","needAmount","plus"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { util } from 'swap.app'\r\nimport Flow from './Flow'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\n\r\nclass AtomicAB2UTXO extends Flow {\r\n\r\n  utxoCoin: string = null\r\n  isUTXOSide: boolean = false\r\n\r\n  abBlockchain: any // @to-do - make inmlementation for ABswap\r\n  utxoBlockchain: any // @to-do - make implementation for UTXOSwap\r\n\r\n\r\n  constructor(swap) {\r\n    super(swap)\r\n\r\n    this.state = {\r\n      ...this.state,\r\n      ...{\r\n        /** AB-UTXO **/\r\n        // Partical (btc-seller) has unconfirmed txs in mempool\r\n        participantHasLockedUTXO: false,\r\n        requireWithdrawFee: false,\r\n        requireWithdrawFeeSended: false,\r\n        // Script charged, confirmed and checked - next step - charge AB contract\r\n        isUTXOScriptOk: false,\r\n        utxoScriptValues: null,\r\n        utxoScriptVerified: false,\r\n        utxoScriptCreatingTransactionHash: null,\r\n        /** UTXO-AB **/\r\n        // We are have locked txs in mem-pool\r\n        waitUnlockUTXO: false,\r\n        utxoFundError: null,\r\n        withdrawRequestAccepted: false,\r\n      },\r\n    }\r\n  }\r\n\r\n  signABSide() {\r\n    this.swap.processMetamask()\r\n  }\r\n\r\n  signUTXOSide() {\r\n    this.swap.processMetamask()\r\n    this.swap.room.once('swap sign', () => {\r\n      const { step } = this.state\r\n\r\n      if (step >= 2) {\r\n        return\r\n      }\r\n\r\n      this.swap.room.once('eth refund completed', () => {\r\n        this.tryRefund()\r\n      })\r\n\r\n      this.finishStep({\r\n        isParticipantSigned: true,\r\n      }, { step: 'sign', silentError: true })\r\n    })\r\n\r\n    this.swap.room.once('swap exists', () => {\r\n      this.setState({\r\n        isSwapExist: true,\r\n      })\r\n\r\n      this.stopSwapProcess()\r\n    })\r\n\r\n    this.swap.room.sendMessage({\r\n      event: 'request sign',\r\n    })\r\n  }\r\n\r\n  waitUTXOScriptCreated() {\r\n    const flow = this\r\n    this.swap.room.on('create utxo script', ({ scriptValues, utxoScriptCreatingTransactionHash }) => {\r\n      const { step } = flow.state\r\n\r\n      if (step >= 3) {\r\n        return\r\n      }\r\n\r\n      flow.finishStep({\r\n        secretHash: scriptValues.secretHash,\r\n        utxoScriptValues: scriptValues,\r\n        utxoScriptCreatingTransactionHash,\r\n      }, { step: 'wait-lock-utxo', silentError: true })\r\n    })\r\n\r\n    this.swap.room.sendMessage({\r\n      event: 'request utxo script',\r\n    })\r\n  }\r\n\r\n  async waitUTXOScriptFunded(): Promise<boolean> {\r\n    const {\r\n      isUTXOScriptOk: isFunded,\r\n    } = this.state\r\n    if (isFunded) return true\r\n\r\n    const flow = this\r\n    const {\r\n      participant,\r\n      buyAmount,\r\n      sellAmount,\r\n      waitConfirm,\r\n    } = flow.swap\r\n\r\n    const { secretHash } = this.state\r\n\r\n    const utcNow = () => Math.floor(Date.now() / 1000)\r\n\r\n    const isUTXOScriptOk = await util.helpers.repeatAsyncUntilResult(async (stopRepeat) => {\r\n      const {\r\n        utxoScriptValues,\r\n      } = flow.state\r\n\r\n\r\n      const scriptCheckError = await this[`${this.utxoCoin}Swap`].checkScript(utxoScriptValues, {\r\n        value: buyAmount,\r\n        recipientPublicKey: this.app.services.auth.accounts[this.utxoCoin].getPublicKey(),\r\n        lockTime: utcNow(),\r\n        confidence: 0.8,\r\n        isWhiteList: this.app.isWhitelistBtc(participant.btc.address), // @todo - may be need more white list coins\r\n        waitConfirm,\r\n      })\r\n\r\n      if (scriptCheckError) {\r\n        if (/Expected script lockTime/.test(scriptCheckError)) {\r\n          console.error(`${this.utxoCoin} script check error: ${this.utxoCoin} was refunded`, scriptCheckError)\r\n          flow.stopSwapProcess()\r\n          stopRepeat()\r\n        } else if (/Expected script value/.test(scriptCheckError)) {\r\n          console.warn(`${this.utxoCoin} script check: waiting balance`)\r\n        } else if (\r\n          /Can be replace by fee. Wait confirm/.test(scriptCheckError)\r\n          ||\r\n          /Wait confirm tx/.test(scriptCheckError)\r\n        ) {\r\n          flow.swap.room.sendMessage({\r\n            event: `wait ${this.utxoCoin} confirm`,\r\n            data: {},\r\n          })\r\n        } else {\r\n          this.swap.events.dispatch(`${this.utxoCoin} script check error`, scriptCheckError)\r\n        }\r\n\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    })\r\n\r\n    if (!isUTXOScriptOk) {\r\n      return false\r\n    } else {\r\n      flow.setState({\r\n        isUTXOScriptOk,\r\n      }, true)\r\n      return true\r\n    }\r\n  }\r\n\r\n  getScriptValues() {\r\n    return this.state.utxoScriptValues\r\n  }\r\n\r\n  verifyScript() {\r\n    const { utxoScriptVerified, utxoScriptValues } = this.state\r\n\r\n    if (utxoScriptVerified) {\r\n      return true\r\n    }\r\n\r\n    if (!utxoScriptValues) {\r\n      throw new Error(`No script, cannot verify`)\r\n    }\r\n\r\n    this.finishStep({\r\n      utxoScriptVerified: true,\r\n    }, { step: 'verify-script' })\r\n\r\n    return true\r\n  }\r\n\r\n  getScriptCreateTx() {\r\n    const {\r\n      utxoScriptCreatingTransactionHash,\r\n    } = this.state\r\n    return utxoScriptCreatingTransactionHash\r\n  }\r\n\r\n  //tryRefund(): Promise<any> {}\r\n\r\n  _checkSwapAlreadyExists() {}\r\n\r\n  async sign() {\r\n    const swapExists = await this._checkSwapAlreadyExists()\r\n\r\n    if (swapExists) {\r\n      this.swap.room.sendMessage({\r\n        event: 'swap exists',\r\n      })\r\n\r\n      this.setState({\r\n        isSwapExist: true,\r\n      })\r\n\r\n      this.stopSwapProcess()\r\n    } else {\r\n      const { isSignFetching, isMeSigned } = this.state\r\n\r\n      if (isSignFetching || isMeSigned) {\r\n        return true\r\n      }\r\n\r\n      this.setState({\r\n        isSignFetching: true,\r\n      })\r\n\r\n      this.swap.room.once('utxo refund completed', () => {\r\n        this.tryRefund()\r\n      })\r\n\r\n      this.swap.room.on('request sign', () => {\r\n        this.swap.room.sendMessage({\r\n          event: 'swap sign',\r\n        })\r\n      })\r\n\r\n      this.swap.room.sendMessage({\r\n        event: 'swap sign',\r\n      })\r\n\r\n      this.finishStep({\r\n        isMeSigned: true,\r\n      }, { step: 'sign', silentError: true })\r\n\r\n      return true\r\n    }\r\n  }\r\n\r\n  acceptWithdrawRequest() {\r\n    const flow = this\r\n    const { withdrawRequestAccepted } = flow.state\r\n\r\n    if (withdrawRequestAccepted) {\r\n      return\r\n    }\r\n\r\n    this.setState({\r\n      withdrawRequestAccepted: true,\r\n    })\r\n\r\n    this.swap.room.once('do withdraw', async ({secret}) => {\r\n      try {\r\n        const data = {\r\n          participantAddress: this.app.getParticipantEthAddress(flow.swap),\r\n          secret,\r\n        }\r\n\r\n        await this.abBlockchain.withdrawNoMoney(data, (hash) => {\r\n          flow.swap.room.sendMessage({\r\n            event: 'withdraw ready',\r\n            data: {\r\n              ethSwapWithdrawTransactionHash: hash,\r\n            }\r\n          })\r\n        })\r\n      } catch (err) {\r\n        debug('swap.core:flow')(err.message)\r\n      }\r\n    })\r\n\r\n    this.swap.room.sendMessage({\r\n      event: 'accept withdraw request'\r\n    })\r\n  }\r\n\r\n  /**\r\n   * TODO - backport version compatibility\r\n   *  mapped to sendWithdrawRequestToAnotherParticipant\r\n   *  remove at next iteration after client software update\r\n   *  Used in swap.react\r\n   */\r\n  sendWithdrawRequest() {\r\n    return this.sendWithdrawRequestToAnotherParticipant()\r\n  }\r\n\r\n  sendWithdrawRequestToAnotherParticipant() {\r\n    const flow = this\r\n\r\n    const { requireWithdrawFee, requireWithdrawFeeSended } = flow.state\r\n\r\n    if (!requireWithdrawFee || requireWithdrawFeeSended) {\r\n      return\r\n    }\r\n\r\n    flow.setState({\r\n      requireWithdrawFeeSended: true,\r\n    })\r\n\r\n    flow.swap.room.on('accept withdraw request', () => {\r\n      flow.swap.room.sendMessage({\r\n        event: 'do withdraw',\r\n        data: {\r\n          secret: flow.state.secret,\r\n        }\r\n      })\r\n    })\r\n\r\n    flow.swap.room.sendMessage({\r\n      event: 'request withdraw',\r\n    })\r\n  }\r\n\r\n  // This function call AB side in classic AB2UTXO without taker-maker model\r\n  async checkOtherSideRefund() {\r\n    if (typeof this.utxoBlockchain.checkWithdraw === 'function') {\r\n      const { utxoScriptValues } = this.state\r\n      if (utxoScriptValues) {\r\n        const { scriptAddress } = this.utxoBlockchain.createScript(utxoScriptValues)\r\n\r\n        const destinationAddress = this.swap.destinationBuyAddress\r\n        const destAddress = (destinationAddress) ? destinationAddress : this.app.services.auth.accounts.btc.getAddress()\r\n\r\n        const hasWithdraw = await this.utxoBlockchain.checkWithdraw(scriptAddress)\r\n        if (hasWithdraw\r\n          && hasWithdraw.address.toLowerCase() !== destAddress.toLowerCase()\r\n        ) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  submitSecret(secret) {\r\n    if (this.state.secret) { return }\r\n\r\n    if (!this.state.isParticipantSigned) {\r\n      throw new Error(`Cannot proceed: participant not signed. step=${this.state.step}`)\r\n    }\r\n\r\n    const secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(secret, 'hex')).toString('hex')\r\n\r\n    /* Secret hash generated - create BTC script - and only after this notify other part */\r\n    this.createWorkUTXOScript(secretHash);\r\n\r\n    const _secret = `0x${secret.replace(/^0x/, '')}`\r\n\r\n    this.finishStep({\r\n      secret: _secret,\r\n      secretHash,\r\n    }, { step: 'submit-secret' })\r\n  }\r\n\r\n  createWorkUTXOScript(secretHash) {\r\n    if (this.state.utxoScriptValues) {\r\n      debug('swap.core:flow')('BTC Script already generated', this.state.utxoScriptValues)\r\n      return\r\n    }\r\n\r\n    const { participant } = this.swap\r\n\r\n    const utcNow = () => Math.floor(Date.now() / 1000)\r\n    const getLockTime = () => utcNow() + 60 * 60 * 3 // 3 hours from now\r\n\r\n    const scriptValues = {\r\n      secretHash:         secretHash,\r\n      ownerPublicKey:     this.app.services.auth.accounts[this.utxoCoin].getPublicKey(),\r\n      recipientPublicKey: participant[this.utxoCoin].publicKey,\r\n      lockTime:           getLockTime(),\r\n    }\r\n    const { scriptAddress } = this.utxoBlockchain.createScript(scriptValues)\r\n\r\n    this.setState({\r\n      scriptAddress: scriptAddress,\r\n      utxoScriptValues: scriptValues,\r\n      scriptBalance: 0,\r\n      scriptUnspendBalance: 0\r\n    })\r\n  }\r\n\r\n  async syncBalance(): Promise<void> {\r\n    return (this.isUTXOSide)\r\n      ? this.syncBalanceUTXO()\r\n      : this.syncBalanceAB()\r\n  }\r\n\r\n  async syncBalanceAB(): Promise<void> {\r\n    const { sellAmount } = this.swap\r\n\r\n    this.setState({\r\n      isBalanceFetching: true,\r\n    })\r\n\r\n    const balance = await this.abBlockchain.fetchBalance(\r\n      this.app.getMyEthAddress()\r\n    )\r\n    const isEnoughMoney = sellAmount.isLessThanOrEqualTo(balance)\r\n\r\n    const stateData = {\r\n      balance,\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: isEnoughMoney,\r\n    }\r\n\r\n    if (isEnoughMoney) {\r\n      this.finishStep(stateData, { step: 'sync-balance' })\r\n    }\r\n    else {\r\n      this.setState(stateData, true)\r\n    }\r\n  }\r\n\r\n  async syncBalanceUTXO(): Promise<void> {\r\n    const { sellAmount } = this.swap\r\n\r\n    this.setState({\r\n      isBalanceFetching: true,\r\n    })\r\n\r\n    const utxoAddress = this.app.services.auth.accounts[this.utxoCoin].getAddress()\r\n\r\n    const txFee = await this.utxoBlockchain.estimateFeeValue({ method: 'swap', fixed: true, address: utxoAddress })\r\n    const unspents = await this.utxoBlockchain.fetchUnspents(utxoAddress)\r\n    const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n    const balance = new BigNumber(totalUnspent).dividedBy(1e8)\r\n\r\n    const needAmount = sellAmount.plus(txFee)\r\n    const isEnoughMoney = needAmount.isLessThanOrEqualTo(balance)\r\n\r\n    const stateData = {\r\n      balance,\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: isEnoughMoney,\r\n    }\r\n\r\n    if (isEnoughMoney) {\r\n      this.finishStep(stateData, { step: 'sync-balance' })\r\n    } else {\r\n      this.setState(stateData, true)\r\n    }\r\n  }\r\n\r\n  // @to-do - not used in code - front/bot - (btc/ghost/next) - may be need deleted\r\n  // dot with comma in original - say - its artefact....\r\n  getUtxoScriptAddress() {\r\n    const { scriptAddress } = this.state\r\n    return scriptAddress\r\n  }\r\n}\r\n\r\n\r\nexport default AtomicAB2UTXO\r\n"]}]}