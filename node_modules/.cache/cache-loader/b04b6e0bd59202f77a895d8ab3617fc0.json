{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\helpers\\btc.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\helpers\\btc.ts","mtime":1614850541745},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/helpers/btc.ts"],"names":["bitcoin","getState","actions","config","constants","api","BigNumber","hasAdminFee","opts","fee","btc","network","process","env","MAINNET","networks","testnet","DUST","BYTE_INPUT_ADDRESS","BYTE_OUTPUT_ADDRESS","BYTE_TRANSACTION","getByteCount","inputs","outputs","totalWeight","hasWitness","inputCount","outputCount","types","checkUInt53","n","Number","MAX_SAFE_INTEGER","RangeError","varIntLength","number","Object","keys","forEach","key","slice","keyParts","split","length","Error","newKey","mAndN","map","item","parseInt","multiplyer","indexOf","Math","ceil","calculateTxSize","options","amount","unspents","address","txOut","method","fixed","defaultTxSize","defaultFeeRates","size","fetchUnspents","prepareUnspents","txIn","txSize","msuSize","msutxSize","msSize","console","log","estimateFeeValue","moreInfo","feeRate","inSatoshis","speed","user","btcData","btcMultisigSMSData","btcMultisigUserData","estimateFeeRate","calculatedFeeValue","maximum","multipliedBy","div","dp","ROUND_HALF_EVEN","CUSTOM_SATOSHI","plus","SATOSHI_TO_BITCOIN_RATIO","finalFeeValue","toNumber","satoshis","estimateFeeRateBitcoinfees","defaultRate","rate","asyncFetchApi","apiResult","error","message","apiSpeeds","slow","normal","fast","apiSpeed","apiRate","isGreaterThanOrEqualTo","toString","estimateFeeRateBlockcypher","link","feeRates"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport { getState } from 'redux/core'\r\nimport actions from 'redux/actions'\r\nimport config from './externalConfig'\r\nimport constants from './constants'\r\nimport api from './api'\r\nimport BigNumber from 'bignumber.js'\r\nimport { IBtcUnspent } from 'common/utils/coin/btc'\r\n\r\n\r\nconst hasAdminFee = (\r\n  config\r\n    && config.opts\r\n    && config.opts.fee\r\n    && config.opts.fee.btc\r\n    && config.opts.fee.btc.fee\r\n) ? config.opts.fee.btc : false\r\n\r\nconst network = process.env.MAINNET\r\n  ? bitcoin.networks.bitcoin\r\n  : bitcoin.networks.testnet\r\n\r\n/* \r\n* Bitcoin dust - small amount of bitcoin that remains in a particular wallet \r\n* because the monetary value is so tiny that it is below the amount of the\r\n* fee required to spend the bitcoin. It makes the transaction impossible \r\n* to process\r\n*\r\n* Default value:\r\n* - dustRelayFee (3000 satochi / kb)\r\n* - output P2PKH\r\n*/\r\nconst DUST = 546 // satoshi\r\nconst BYTE_INPUT_ADDRESS = 146 // ~ 146 byte\r\nconst BYTE_OUTPUT_ADDRESS = 33 // ~ 33 byte\r\nconst BYTE_TRANSACTION = 15 // ~ 15 byte\r\n\r\n// getByteCount({'MULTISIG-P2SH:2-4':45},{'P2PKH':1}) Means \"45 inputs of P2SH Multisig and 1 output of P2PKH\"\r\n// getByteCount({'P2PKH':1,'MULTISIG-P2SH:2-3':2},{'P2PKH':2}) means \"1 P2PKH input and 2 Multisig P2SH (2 of 3) inputs along with 2 P2PKH outputs\"\r\nconst getByteCount = (inputs, outputs) => {\r\n  let totalWeight = 0\r\n  let hasWitness = false\r\n  let inputCount = 0\r\n  let outputCount = 0\r\n  // assumes compressed pubkeys in all cases.\r\n  const types = {\r\n    'inputs': {\r\n      'MULTISIG-P2SH': 49 * 4,\r\n      'MULTISIG-P2WSH': 6 + (41 * 4),\r\n      'MULTISIG-P2SH-P2WSH': 6 + (76 * 4),\r\n      'P2PKH': 148 * 4,\r\n      'P2WPKH': 108 + (41 * 4),\r\n      'P2SH-P2WPKH': 108 + (64 * 4),\r\n    },\r\n    'outputs': {\r\n      'P2SH': 32 * 4,\r\n      'P2PKH': 34 * 4,\r\n      'P2WPKH': 31 * 4,\r\n      'P2WSH': 43 * 4,\r\n    },\r\n  }\r\n\r\n  const checkUInt53 = (n) => {\r\n    if (n < 0 || n > Number.MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range')\r\n  }\r\n\r\n  const varIntLength = (number) => {\r\n    checkUInt53(number)\r\n\r\n    return (\r\n      number < 0xfd ? 1\r\n        : number <= 0xffff ? 3\r\n          : number <= 0xffffffff ? 5\r\n            : 9\r\n    )\r\n  }\r\n\r\n  Object.keys(inputs).forEach((key) => {\r\n    checkUInt53(inputs[key])\r\n    if (key.slice(0, 8) === 'MULTISIG') {\r\n      // ex. \"MULTISIG-P2SH:2-3\" would mean 2 of 3 P2SH MULTISIG\r\n      const keyParts = key.split(':')\r\n      if (keyParts.length !== 2) throw new Error(`invalid input: ${key}`)\r\n      const newKey = keyParts[0]\r\n      const mAndN = keyParts[1].split('-').map((item) => parseInt(item))\r\n\r\n      totalWeight += types.inputs[newKey] * inputs[key]\r\n      const multiplyer = (newKey === 'MULTISIG-P2SH') ? 4 : 1\r\n      totalWeight += ((73 * mAndN[0]) + (34 * mAndN[1])) * multiplyer * inputs[key]\r\n    } else {\r\n      totalWeight += types.inputs[key] * inputs[key]\r\n    }\r\n    inputCount += inputs[key]\r\n    if (key.indexOf('W') >= 0) hasWitness = true\r\n  })\r\n\r\n  Object.keys(outputs).forEach((key) => {\r\n    checkUInt53(outputs[key])\r\n    totalWeight += types.outputs[key] * outputs[key]\r\n    outputCount += outputs[key]\r\n  })\r\n\r\n  if (hasWitness) totalWeight += 2\r\n\r\n  totalWeight += 8 * 4\r\n  totalWeight += varIntLength(inputCount) * 4\r\n  totalWeight += varIntLength(outputCount) * 4\r\n\r\n  return Math.ceil(totalWeight / 4)\r\n}\r\n\r\ninterface IcalculateTxSizeOptions {\r\n  amount?: number\r\n  unspents?: any\r\n  address: string\r\n  txOut?: number\r\n  method?: string\r\n  fixed?: boolean\r\n}\r\nconst calculateTxSize = async (options: IcalculateTxSizeOptions) => {\r\n  let {\r\n    amount,\r\n    unspents,\r\n    address,\r\n    txOut,\r\n    method,\r\n    fixed,\r\n  } = options\r\n\r\n  txOut = txOut || 2\r\n  method = method || 'send'\r\n\r\n  const defaultTxSize = constants.defaultFeeRates.btc.size[method]\r\n\r\n  if (fixed) {\r\n    return defaultTxSize\r\n  }\r\n\r\n  unspents = unspents || await actions.btc.fetchUnspents(address)\r\n  if (amount) {\r\n    unspents = await actions.btc.prepareUnspents({ amount, unspents })\r\n  }\r\n  /*\r\n  * Formula with 2 input and 2 output addresses \r\n  * (BYTE_INPUT_ADDRESS × 2 ) + (BYTE_OUTPUT_ADDRESS × 2) + BYTE_TRANSACTION\r\n  */\r\n  const txIn = unspents.length\r\n  const txSize = txIn > 0\r\n    ? txIn * BYTE_INPUT_ADDRESS + txOut * BYTE_OUTPUT_ADDRESS + (BYTE_TRANSACTION + txIn - txOut)\r\n    : defaultTxSize\r\n\r\n  if (method === 'send_multisig') {\r\n    const msuSize = getByteCount(\r\n      { 'MULTISIG-P2SH-P2WSH:2-2': 1 },\r\n      { 'P2PKH': (hasAdminFee) ? 3 : 2 }\r\n    )\r\n    const msutxSize = txIn * msuSize + txOut * BYTE_OUTPUT_ADDRESS + (BYTE_TRANSACTION + txIn - txOut)\r\n\r\n    return msutxSize\r\n  }\r\n\r\n  if (method === 'send_2fa') {\r\n    const msSize = getByteCount(\r\n      { 'MULTISIG-P2SH-P2WSH:2-3': txIn },\r\n      { 'P2PKH': (hasAdminFee) ? 3 : 2 }\r\n    )\r\n    console.log('Tx size', msSize)\r\n    return msSize\r\n    /*\r\n    const mstxSize = txIn * msSize + txOut * BYTE_OUTPUT_ADDRESS + (BYTE_TRANSACTION + txIn - txOut)\r\n\r\n    return mstxSize\r\n    */\r\n  }\r\n\r\n  return txSize\r\n}\r\n\r\ntype EstimateFeeValueOptions = {\r\n  method?: string\r\n  speed: 'fast' | 'normal' | 'slow'\r\n  feeRate?: number\r\n  inSatoshis?: boolean\r\n  address?: string\r\n  txSize?: number\r\n  fixed?: string\r\n  amount?: number\r\n  moreInfo?: boolean\r\n}\r\n\r\nconst estimateFeeValue = async (options: EstimateFeeValueOptions): Promise<any> => {\r\n  const { moreInfo } = options\r\n  let { feeRate, inSatoshis, speed, address, txSize, fixed, method, amount } = options\r\n  const {\r\n    user: {\r\n      btcData,\r\n      btcMultisigSMSData,\r\n      btcMultisigUserData,\r\n    },\r\n  } = getState()\r\n\r\n  let txOut = 2\r\n\r\n  if (hasAdminFee) txOut = 3\r\n\r\n  if (!address) {\r\n    address = btcData.address\r\n    if (method === 'send_2fa') address = btcMultisigSMSData.address\r\n    if (method === 'send_multisig') address = btcMultisigUserData.address\r\n  }\r\n\r\n  let unspents = await actions.btc.fetchUnspents(address)\r\n  if (amount) {\r\n    unspents = await actions.btc.prepareUnspents({ amount, unspents })\r\n  }\r\n  //@\r\n  txSize = txSize || await calculateTxSize({ address, speed, fixed, method, txOut, amount })\r\n  feeRate = feeRate || await estimateFeeRate({ speed })\r\n\r\n  const calculatedFeeValue = BigNumber.maximum(\r\n    DUST,\r\n    new BigNumber(feeRate)\r\n      .multipliedBy(txSize)\r\n      .div(1024) // divide by one kilobyte\r\n      .dp(0, BigNumber.ROUND_HALF_EVEN),\r\n  )\r\n\r\n  const CUSTOM_SATOSHI = 20\r\n  calculatedFeeValue.plus(CUSTOM_SATOSHI) // just wanted to add\r\n\r\n  const SATOSHI_TO_BITCOIN_RATIO = 1e-8; // 1 BTC -> 100 000 000 satoshi\r\n  \r\n  const finalFeeValue = inSatoshis\r\n    ? calculatedFeeValue.toNumber()\r\n    : calculatedFeeValue.multipliedBy(SATOSHI_TO_BITCOIN_RATIO).toNumber()\r\n\r\n  if (moreInfo) {\r\n    return {\r\n      fee: calculatedFeeValue.multipliedBy(SATOSHI_TO_BITCOIN_RATIO).toNumber(),\r\n      satoshis: calculatedFeeValue.toNumber(),\r\n      txSize,\r\n      feeRate,\r\n      unspents,\r\n    }\r\n  }\r\n  return finalFeeValue\r\n}\r\n\r\nconst estimateFeeRateBitcoinfees = async ({ speed = 'fast' } = {}) => {\r\n  const defaultRate = constants.defaultFeeRates.btc.rate\r\n\r\n  let apiResult\r\n\r\n  try {\r\n    apiResult = await api.asyncFetchApi(`https://bitcoinfees.earn.com/api/v1/fees/recommended`)\r\n  } catch (err) {\r\n    console.error(`EstimateFeeRate: ${err.message}`)\r\n    return defaultRate[speed]\r\n  }\r\n\r\n  const apiSpeeds = {\r\n    slow: `hourFee`,\r\n    normal: `halfHourFee`,\r\n    fast: `fastestFee`,\r\n  }\r\n\r\n  const apiSpeed = apiSpeeds[speed] || apiSpeeds.normal\r\n  const apiRate = new BigNumber(apiResult[apiSpeed]).multipliedBy(1024)\r\n\r\n  return apiRate.isGreaterThanOrEqualTo(DUST)\r\n    ? apiRate.toString()\r\n    : defaultRate[speed]\r\n}\r\n\r\nconst estimateFeeRateBlockcypher = async ({ speed = 'fast' } = {}) => {\r\n  const link = config.feeRates.btc\r\n  const defaultRate = constants.defaultFeeRates.btc.rate\r\n\r\n  if (!link) {\r\n    return defaultRate[speed]\r\n  }\r\n\r\n  let apiResult\r\n\r\n  try {\r\n    // api returns sotoshi in 1 kb\r\n    apiResult = await api.asyncFetchApi(link)\r\n  } catch (err) {\r\n    console.error(`EstimateFeeRate: ${err.message}`)\r\n    return defaultRate[speed]\r\n  }\r\n\r\n  const apiSpeeds = {\r\n    slow: 'low_fee_per_kb',\r\n    normal: 'medium_fee_per_kb',\r\n    fast: 'high_fee_per_kb',\r\n  }\r\n\r\n  const apiSpeed = apiSpeeds[speed] || apiSpeeds.normal\r\n  const apiRate = new BigNumber(apiResult[apiSpeed])\r\n\r\n  return apiRate.isGreaterThanOrEqualTo(DUST) \r\n    ? apiRate.toNumber()\r\n    : defaultRate[speed]\r\n}\r\n\r\nconst estimateFeeRate = estimateFeeRateBlockcypher\r\n\r\nexport default {\r\n  calculateTxSize,\r\n  estimateFeeValue,\r\n  estimateFeeRate,\r\n  network,\r\n}\r\n"]}]}