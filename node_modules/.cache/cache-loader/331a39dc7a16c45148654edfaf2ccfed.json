{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\UTXOBlockchain.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\UTXOBlockchain.ts","mtime":1614842913771},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.swaps/UTXOBlockchain.ts"],"names":["debug","SwapInterface","constants","util","BigNumber","UTXOBlockchain","options","undefined","fetchBalance","Error","fetchUnspents","broadcastTx","fetchTxInfo","console","warn","estimateFeeValue","_swapName","swapName","COINS","btc","checkWithdraw","feeValue","account","networks","skipFetchConfidence","skipCheckCanBeReplaces","skipLockTime","skipRecipientPublickKey","processUnspent","unspent","txid","vout","sendTransaction","app","main","mainName","name","mainParams","params","test","testName","testParams","env","bitcoin","network","isMainNet","inSatoshis","size","speed","address","method","txSize","estimatedFeeRaw","estimatedFee","toNumber","dividedBy","dp","ROUND_UP","unspents","expectedConfidenceLevel","feesToConfidence","fees","multipliedBy","getTxFee","currentFastestFee","isLessThan","fetchConfidence","senderAddress","txConfirms","confirmations","confirmationsToConfidence","confs","confidenceFromConfirmations","isGreaterThanOrEqualTo","confFromFee","error","message","Promise","all","map","confidences","filter","utxo","index","resolve","filtered","data","inputIndex","script","txRaw","secret","scriptData","payments","p2sh","redeem","output","hashType","Transaction","SIGHASH_ALL","privKey","ECPair","fromWIF","services","auth","accounts","getPrivateKey","signatureHash","hashForSignature","redeemScriptSig","input","compile","signature","encode","sign","getPublicKeyBuffer","Buffer","from","replace","setInputScript","hashName","hashOpcodeName","toUpperCase","hashOpcode","opcodes","secretHash","ownerPublicKey","recipientPublicKey","lockTime","OP_SIZE","OP_EQUALVERIFY","OP_EQUAL","OP_IF","OP_ELSE","number","OP_CHECKLOCKTIMEVERIFY","OP_DROP","OP_ENDIF","OP_CHECKSIG","scriptAddress","log","fetchFullUnspentInfo","info","unspentsFullInfo","notReplacedUnspents","notReplacedInputs","inputs","sequenceNumber","toString","length","expected","createScript","waitConfirm","isWhiteList","expectedConfidence","confidence","fetchUnspentsFullInfo","canBeReplaced","checkCanBeReplaces","filterConfirmedUnspents","confirmedUnspents","helpers","waitDelay","expectedValue","value","integerValue","totalUnspent","reduce","summ","satoshis","filterConfidentUnspents","confidentUnspents","totalConfidentUnspent","isGreaterThan","handleTransactionHash","scriptValues","amount","reject","scriptBalance","ownerAddress","getAddress","fundValue","tx","TransactionBuilder","feeValueBN","skipValue","forEach","addInput","addOutput","__INPUTS","buildIncomplete","getId","toHex","then","result","err","isRefund","destinationAddress","destAddress","hasWithdraw","toLowerCase","txId","alreadyWithdrawed","setLockTime","_","_signTransaction","txHex","getWithdrawRawTransaction","flow","utxoClass","coin","onTransactionHash","txID","state","scriptCreatingTransactionHash","utxoScriptCreatingTransactionHash","utxoScriptValues","setState","swap","room","once","sendMessage","event","sellAmount","isBalanceEnough","fundScriptRepeat","fundScript","waitUnlockUTXO","repeatAsyncUntilResult","stopRepeat","isStoppedSwap","checkScriptBalance","getBalance","balance","isEnoughMoney","times","div","finishStep","step","getRefundRawTransaction","checkTX","txSuccess","res","text","errorMessage","txInfo","withdraw","swapWithdrawTransactionHash","btcSwap","destinationBuyAddress","hash"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { SwapInterface, constants, util } from 'swap.app'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flow } from 'swap.swap'\r\n\r\n\r\nclass UTXOBlockchain extends SwapInterface {\r\n\r\n  _swapName: string = null\r\n  fetchBalance: Function = undefined\r\n  fetchUnspents: Function = undefined\r\n  broadcastTx: Function = undefined\r\n  checkWithdraw: Function = undefined\r\n  feeValue: number = 546\r\n  fetchTxInfo: Function = undefined\r\n  estimateFeeValue: Function = undefined\r\n\r\n  account: string = undefined\r\n  networks: any = undefined\r\n  network: any = undefined\r\n\r\n  skipFetchConfidence: boolean = false\r\n  skipCheckCanBeReplaces: boolean = false\r\n  skipLockTime: boolean = false\r\n  skipRecipientPublickKey: boolean = false\r\n\r\n  processUnspent: Function = undefined\r\n  sendTransaction: Function\r\n\r\n  app: SwapApp = undefined\r\n  /**\r\n   *\r\n   * @param options\r\n   * @param options.fetchBalance\r\n   * @param options.fetchUnspents\r\n   * @param options.broadcastTx\r\n   * @param options.fetchTxInfo {(tx_hash) => Promise({ confidence, fees })}\r\n   * @param options.estimateFeeValue { ({ inSatoshis, speed, address, txSize }) => Promise(fee_value) }\r\n   */\r\n  constructor(options) {\r\n    super()\r\n\r\n    if (typeof options.fetchBalance !== 'function') {\r\n      throw new Error('BtcSwap: \"fetchBalance\" required')\r\n    }\r\n    if (typeof options.fetchUnspents !== 'function') {\r\n      throw new Error('BtcSwap: \"fetchUnspents\" required')\r\n    }\r\n    if (typeof options.broadcastTx !== 'function') {\r\n      throw new Error('BtcSwap: \"broadcastTx\" required')\r\n    }\r\n    if (typeof options.fetchTxInfo !== 'function') {\r\n      // tx_hash => { confidence, fees }\r\n      console.warn(`BtcSwap: \"fetchTxInfo\" is not a function. You will not be able to use tx-confidence feature`)\r\n    }\r\n    if (typeof options.estimateFeeValue !== 'function') {\r\n      // ({ speed } = {}) => feeRate\r\n      console.warn(`BtcSwap: \"estimateFeeValue\" is not a function. You will not be able use automatic mempool-based fee`)\r\n    }\r\n\r\n    this._swapName      = options.swapName || constants.COINS.btc\r\n    this.fetchBalance   = options.fetchBalance\r\n    this.fetchUnspents  = options.fetchUnspents\r\n    this.broadcastTx    = options.broadcastTx\r\n    this.checkWithdraw  = options.checkWithdraw\r\n    this.feeValue       = options.feeValue || 546\r\n    this.fetchTxInfo    = options.fetchTxInfo || (() => {})\r\n    this.estimateFeeValue = options.estimateFeeValue || (() => 0)\r\n\r\n    this.account        = options.account || `btc`\r\n    this.networks       = options.networks\r\n\r\n    this.skipFetchConfidence = options.skipFetchConfidence || false\r\n    this.skipCheckCanBeReplaces = options.skipCheckCanBeReplaces || false\r\n    this.skipLockTime = options.skipLockTime || false\r\n    this.skipRecipientPublickKey = options.skipRecipientPublickKey || false\r\n\r\n    this.processUnspent = options.processUnspent || (\r\n      (unspent) => {\r\n        const { txid, vout } = unspent\r\n        return { txid, vout }\r\n      }\r\n    )\r\n    this.sendTransaction = options.sendTransaction\r\n  }\r\n\r\n  _initSwap(app) {\r\n    super._initSwap(app)\r\n\r\n    this.app = app\r\n\r\n    /* init networks if need */\r\n    const {\r\n      main: {\r\n        name: mainName,\r\n        params: mainParams,\r\n      },\r\n      test: {\r\n        name: testName,\r\n        params: testParams,\r\n      },\r\n    } = this.networks\r\n\r\n    if (mainName && mainParams) this.app.env.bitcoin.networks[mainName] = mainParams\r\n    if (testName && testParams) this.app.env.bitcoin.networks[testName] = testParams\r\n\r\n    this.network = (\r\n      this.app.isMainNet()\r\n        ? this.app.env.bitcoin.networks[mainName]\r\n        : this.app.env.bitcoin.networks[testName]\r\n    )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} options\r\n   * @param {boolean} options.inSatoshis\r\n   * @param {Number} options.size\r\n   * @param {String} options.speed\r\n   * @param {String} options.address\r\n   * @returns {BigNumber}\r\n   * @public\r\n   */\r\n  async getTxFee({\r\n    inSatoshis,\r\n    size,\r\n    speed = 'fast',\r\n    address,\r\n  }: {\r\n    inSatoshis: boolean,\r\n    size?: number,\r\n    speed?: 'slow' | 'medium' | 'fast'\r\n    address: string,\r\n  }) {\r\n\r\n\r\n    const estimatedFeeRaw = await this.estimateFeeValue({\r\n      inSatoshis: true,\r\n      address,\r\n      speed,\r\n      method: 'swap',\r\n      txSize: size,\r\n    })\r\n\r\n    const estimatedFee = new BigNumber(estimatedFeeRaw)\r\n    this.feeValue = estimatedFee.toNumber()\r\n\r\n    return inSatoshis\r\n      ? estimatedFee\r\n      : estimatedFee.dividedBy(1e8).dp(0, BigNumber.ROUND_UP)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {array} unspents\r\n   * @param {Number} expectedConfidenceLevel\r\n   * @returns {array}\r\n   * @private\r\n   */\r\n  async filterConfidentUnspents(unspents, expectedConfidenceLevel = 0.95) {\r\n\r\n    const feesToConfidence = async (fees, size, address) => {\r\n      fees = new BigNumber(fees).multipliedBy(1e8).toNumber()\r\n      const currentFastestFee = await this.getTxFee({ inSatoshis: true, size, speed: 'fast', address })\r\n\r\n      return new BigNumber(fees).isLessThan(currentFastestFee)\r\n        ? new BigNumber(fees).dividedBy(currentFastestFee).toNumber()\r\n        : 1\r\n    }\r\n\r\n    /* @ToDo - больше гибкости */\r\n    const fetchConfidence = async (unspent): Promise<number> => {\r\n\r\n\r\n      if (this.skipFetchConfidence) return 1\r\n\r\n      const {\r\n        fees,\r\n        size,\r\n        senderAddress,\r\n        confirmations: txConfirms,\r\n      } = unspent\r\n\r\n      const confirmationsToConfidence = confs => confs > 0 ? 1 : 0\r\n      const confidenceFromConfirmations = confirmationsToConfidence(txConfirms)\r\n\r\n      if (new BigNumber(confidenceFromConfirmations).isGreaterThanOrEqualTo(expectedConfidenceLevel)) {\r\n        return confidenceFromConfirmations\r\n      }\r\n\r\n      try {\r\n        if (txConfirms > 0) {\r\n          return 1\r\n        }\r\n\r\n        if (fees) {\r\n          const confFromFee = await feesToConfidence(fees, size, senderAddress)\r\n          return confFromFee\r\n        }\r\n\r\n        throw new Error(`txinfo={confirmations: ${txConfirms}, fees: ${fees}, size: ${size}, senderAddress: ${senderAddress} }`)\r\n\r\n      } catch (err) {\r\n        console.error(`BtcSwap: Error fetching confidence: using confirmations > 0:`, err.message)\r\n\r\n        return confidenceFromConfirmations\r\n      }\r\n    }\r\n\r\n    const confidences: number[] = await Promise.all(unspents.map(fetchConfidence))\r\n\r\n    return unspents.filter((utxo, index) => {\r\n      debug('swap.core:swaps')(`confidence[${index}]:`, confidences[index])\r\n      return new BigNumber(confidences[index]).isGreaterThanOrEqualTo(expectedConfidenceLevel)\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Array[object]} unspents\r\n   * @return {Array[object]}\r\n   */\r\n  async filterConfirmedUnspents(unspents): Promise<any[]> {\r\n    return new Promise(async (resolve) => {\r\n      const filtered = unspents.filter((unspent) => {\r\n        const {\r\n          confirmations,\r\n        } = unspent\r\n\r\n        if (confirmations > 0) {\r\n          return true\r\n        }\r\n      })\r\n      resolve(filtered)\r\n    })\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.script\r\n   * @param {*} data.txRaw\r\n   * @param {string} data.secret\r\n   * @param {number} inputIndex\r\n   * @private\r\n   */\r\n  _signTransaction(data, inputIndex = 0) {\r\n    debug('swap.core:swaps')('signing script input', inputIndex)\r\n    const {\r\n      script,\r\n      txRaw,\r\n      secret,\r\n    } = data\r\n\r\n    const scriptData = this.app.env.bitcoin.payments.p2sh({\r\n      redeem: {\r\n        output: script,\r\n        network: this.network,\r\n      },\r\n      network: this.network,\r\n    })\r\n\r\n    const hashType      = this.app.env.bitcoin.Transaction.SIGHASH_ALL\r\n    const privKey = this.app.env.bitcoin.ECPair.fromWIF(\r\n      this.app.services.auth.accounts[this.account].getPrivateKey(),\r\n      this.network\r\n    )\r\n\r\n    const signatureHash = txRaw.hashForSignature(inputIndex, scriptData.redeem.output, hashType)\r\n\r\n    const redeemScriptSig = this.app.env.bitcoin.payments.p2sh({ \r\n      network: this.network, \r\n      redeem: { \r\n        network: this.network, \r\n        output: scriptData.redeem.output, \r\n        input: this.app.env.bitcoin.script.compile([ \r\n          this.app.env.bitcoin.script.signature.encode(privKey.sign(signatureHash), hashType),\r\n          this.app.services.auth.accounts[this.account].getPublicKeyBuffer(),\r\n          Buffer.from(secret.replace(/^0x/, ''), 'hex'),\r\n        ]) \r\n      } \r\n    }).input \r\n\r\n    txRaw.setInputScript(inputIndex, redeemScriptSig)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.ownerPublicKey\r\n   * @param {string} data.recipientPublicKey\r\n   * @param {number} data.lockTime\r\n   * @returns {{scriptAddress: *, script: (*|{ignored})}}\r\n   */\r\n  createScript(data, hashName = 'ripemd160') {\r\n    const hashOpcodeName = `OP_${hashName.toUpperCase()}`\r\n    const hashOpcode = this.app.env.bitcoin.opcodes[hashOpcodeName]\r\n\r\n    const { secretHash, ownerPublicKey, recipientPublicKey, lockTime } = data\r\n\r\n    const script = this.app.env.bitcoin.script.compile([\r\n\r\n      this.app.env.bitcoin.opcodes.OP_SIZE,\r\n      Buffer.from('20' ,'hex'),\r\n      this.app.env.bitcoin.opcodes.OP_EQUALVERIFY,\r\n\r\n      hashOpcode,\r\n      Buffer.from(secretHash, 'hex'),\r\n      this.app.env.bitcoin.opcodes.OP_EQUALVERIFY,\r\n\r\n      Buffer.from(recipientPublicKey, 'hex'),\r\n      this.app.env.bitcoin.opcodes.OP_EQUAL,\r\n      this.app.env.bitcoin.opcodes.OP_IF,\r\n\r\n      Buffer.from(recipientPublicKey, 'hex'),\r\n\r\n      this.app.env.bitcoin.opcodes.OP_ELSE,\r\n\r\n      this.app.env.bitcoin.script.number.encode(lockTime),\r\n      this.app.env.bitcoin.opcodes.OP_CHECKLOCKTIMEVERIFY,\r\n      this.app.env.bitcoin.opcodes.OP_DROP,\r\n      Buffer.from(ownerPublicKey, 'hex'),\r\n\r\n      this.app.env.bitcoin.opcodes.OP_ENDIF,\r\n\r\n      this.app.env.bitcoin.opcodes.OP_CHECKSIG,\r\n    ])\r\n\r\n    const scriptData = this.app.env.bitcoin.payments.p2sh({\r\n      redeem: {\r\n        output: script,\r\n        network: this.network,\r\n      },\r\n      network: this.network,\r\n    })\r\n    const scriptAddress = scriptData.address\r\n\r\n    return {\r\n      scriptAddress,\r\n      script,\r\n    }\r\n  }\r\n\r\n  fetchUnspentsFullInfo(scriptAddress): Promise<any[]> {\r\n    console.log('fetchUnspentsFullInfo', scriptAddress)\r\n    return new Promise(async (resolve) => {\r\n      const unspents      = await this.fetchUnspents(scriptAddress)\r\n      const fetchFullUnspentInfo = async (unspent) => {\r\n        console.log('unspent', unspent)\r\n        try {\r\n          const info = await this.fetchTxInfo(unspent.txid)\r\n          return {\r\n            ...unspent,\r\n            ...info,\r\n          }\r\n        } catch (fetchTxInfoError) {\r\n          console.log('fetchTxInfo', fetchTxInfoError)\r\n          return false\r\n        }\r\n      }\r\n\r\n      const unspentsFullInfo = await Promise.all(unspents.map(fetchFullUnspentInfo))\r\n      resolve(unspentsFullInfo.filter((unspent) => unspent !== false ))\r\n    })\r\n  }\r\n\r\n  checkCanBeReplaces(unspents) {\r\n    if (this.skipCheckCanBeReplaces) return false\r\n    const notReplacedUnspents = unspents.filter((unspent) => {\r\n      const notReplacedInputs = unspent.inputs.filter((input) => {\r\n        return input.sequenceNumber.toString(16) === `ffffffff`\r\n      })\r\n      return notReplacedInputs.length === unspent.inputs.length\r\n    })\r\n    return !(notReplacedUnspents.length === unspents.length)\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.recipientPublicKey\r\n   * @param {number} data.lockTime\r\n   * @param {object} expected\r\n   * @param {number} expected.value\r\n   * @param {number} expected.lockTime\r\n   * @param {string} expected.recipientPublicKey\r\n   * @returns {Promise.<string>}\r\n   */\r\n  async checkScript(data, expected, hashName) {\r\n    const { recipientPublicKey, lockTime } = data\r\n    const { scriptAddress, script } = this.createScript(data, hashName)\r\n\r\n    const {\r\n      waitConfirm,\r\n      isWhiteList\r\n    } = expected\r\n\r\n    if (isWhiteList) {\r\n      console.log('is white listed - skip wait btc script')\r\n      return\r\n    }\r\n\r\n    const expectedConfidence = (expected.confidence !== undefined) ? expected.confidence : 0.95\r\n    console.log('script', scriptAddress)\r\n    const unspents: any[] = await this.fetchUnspentsFullInfo(scriptAddress)\r\n\r\n    console.log('script', scriptAddress)\r\n    console.log('unspents', unspents)\r\n    if (!unspents.length) return `No unspents. Wait`\r\n\r\n    \r\n    // Check - transaction can be replaced?\r\n    const canBeReplaced = this.checkCanBeReplaces(unspents)\r\n    if (canBeReplaced) {\r\n      console.warn(`Fund to script ${scriptAddress} can be replaced be fee. Wait confirm`)\r\n    }\r\n    if (waitConfirm || canBeReplaced) {\r\n      // Wait confirm only - for big amount of swap\r\n      if (!unspents.length) return `No unspents`\r\n      const confirmedUnspents: any[] = await this.filterConfirmedUnspents(unspents)\r\n      if (unspents.length === confirmedUnspents.length) return\r\n      await util.helpers.waitDelay(30)\r\n      if (canBeReplaced) return `Can be replace by fee. Wait confirm`\r\n      return `Wait confirm tx`\r\n    }\r\n\r\n    const expectedValue = expected.value.multipliedBy(1e8).integerValue()\r\n    const totalUnspent  = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n\r\n    const confidentUnspents = await this.filterConfidentUnspents(unspents, expectedConfidence)\r\n\r\n    const totalConfidentUnspent = confidentUnspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n\r\n    if (expectedValue.isGreaterThan(totalUnspent)) {\r\n      return `Expected script value: ${expectedValue.toNumber()}, got: ${totalUnspent}, address: ${scriptAddress}`\r\n    }\r\n    if (!this.skipLockTime && expected.lockTime > lockTime) {\r\n      return `Expected script lockTime: ${expected.lockTime}, got: ${lockTime}, address: ${scriptAddress}`\r\n    }\r\n    if (!this.skipRecipientPublickKey && expected.recipientPublicKey !== recipientPublicKey) {\r\n      return `Expected script recipient publicKey: ${expected.recipientPublicKey}, got: ${recipientPublicKey}`\r\n    }\r\n    if (expectedValue.isGreaterThan(totalConfidentUnspent)) {\r\n      return `Expected script value: ${expectedValue.toString()} with confidence above ${expectedConfidence}, got: ${totalConfidentUnspent}, address: ${scriptAddress}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {BigNumber} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @param {string} hashName\r\n   * @returns {Promise}\r\n   */\r\n  fundScript(data, handleTransactionHash?: Function, hashName?: string) {\r\n    const { scriptValues, amount } = data\r\n\r\n    console.log('fundScript', data)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const { scriptAddress } = this.createScript(scriptValues, hashName)\r\n\r\n        console.log('scriptAddress', scriptAddress)\r\n        const scriptBalance = await this.fetchBalance(scriptAddress)\r\n        if (new BigNumber(scriptBalance).isGreaterThan(0)) {\r\n          // Script already funded - skip double payments\r\n          reject('Script funded already')\r\n          return\r\n        }\r\n\r\n        const ownerAddress = this.app.services.auth.accounts[this.account].getAddress()\r\n\r\n        const fundValue     = amount.multipliedBy(1e8).integerValue().toNumber()\r\n        const tx            = new this.app.env.bitcoin.TransactionBuilder(this.network)\r\n        const unspents      = await this.fetchUnspents(ownerAddress)\r\n        const feeValueBN    = await this.getTxFee({ inSatoshis: true, address: ownerAddress })\r\n        const feeValue      = feeValueBN.integerValue().toNumber()\r\n        const totalUnspent  = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n        const skipValue     = totalUnspent - fundValue - feeValue\r\n\r\n        if (totalUnspent < feeValue + fundValue) {\r\n          throw new Error(`Total less than fee: ${totalUnspent} < ${feeValue} + ${fundValue}`)\r\n        }\r\n\r\n        unspents.forEach((unspent) => {\r\n          const { txid, vout } = this.processUnspent(unspent)\r\n          tx.addInput(txid, vout, 0xffffffff)\r\n        })\r\n        tx.addOutput(scriptAddress, fundValue)\r\n        tx.addOutput(this.app.services.auth.accounts[this.account].getAddress(), skipValue)\r\n\r\n        const privKey = this.app.env.bitcoin.ECPair.fromWIF(\r\n          this.app.services.auth.accounts[this.account].getPrivateKey(),\r\n          this.network\r\n        )\r\n\r\n        tx.__INPUTS.forEach((input, index) => {\r\n          tx.sign(index, privKey)\r\n        })\r\n\r\n        const txRaw = tx.buildIncomplete()\r\n\r\n        if (typeof handleTransactionHash === 'function') {\r\n          handleTransactionHash(txRaw.getId())\r\n        }\r\n\r\n        this.broadcastTx(txRaw.toHex()).then((result) => {\r\n          resolve(result)\r\n        }).catch ((err) => {\r\n          reject(err)\r\n        })\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object|string} data - scriptValues or wallet address\r\n   * @returns {Promise.<void>}\r\n   */\r\n  async getBalance(data, hashName?: string): Promise<number> {\r\n    let address\r\n\r\n    if (typeof data === 'string') {\r\n      address = data\r\n    }\r\n    else if (typeof data === 'object') {\r\n      const { scriptAddress } = this.createScript(data, hashName)\r\n\r\n      address = scriptAddress\r\n    }\r\n    else {\r\n      throw new Error('Wrong data type')\r\n    }\r\n\r\n    const unspents      = await this.fetchUnspents(address)\r\n    const totalUnspent  = unspents && unspents.length && unspents.reduce((summ, { satoshis }) => summ + satoshis, 0) || 0\r\n\r\n    return totalUnspent\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {boolean} isRefund\r\n   * @returns {Promise}\r\n   */\r\n  async getWithdrawRawTransaction(data: any, isRefund: boolean, hashName?: string) {\r\n    const { scriptValues, secret, destinationAddress } = data\r\n    const destAddress = (destinationAddress) ? destinationAddress : this.app.services.auth.accounts[this.account].getAddress()\r\n\r\n    const { script, scriptAddress } = this.createScript(scriptValues, hashName)\r\n\r\n    const tx            = new this.app.env.bitcoin.TransactionBuilder(this.network)\r\n    const unspents      = await this.fetchUnspents(scriptAddress)\r\n\r\n    const feeValueBN    = await this.getTxFee({ inSatoshis: true, address: scriptAddress })\r\n    const feeValue      = feeValueBN.integerValue().toNumber()\r\n    const totalUnspent  = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n\r\n    /* Check - may be withdrawed */\r\n    if (typeof this.checkWithdraw === 'function') {\r\n      console.log('try check withdraw')\r\n      const hasWithdraw = await this.checkWithdraw(scriptAddress)\r\n      if (hasWithdraw\r\n        && hasWithdraw.address.toLowerCase() == destAddress.toLowerCase()\r\n      ) {\r\n        // already withdrawed\r\n        return {\r\n          txId: hasWithdraw.txid,\r\n          alreadyWithdrawed: true\r\n        }\r\n      }\r\n    }\r\n\r\n    if (new BigNumber(totalUnspent).isLessThan(feeValue)) {\r\n      throw new Error(`Total less than fee: ${totalUnspent} < ${feeValue}`)\r\n    }\r\n\r\n    if (isRefund) {\r\n      tx.setLockTime(scriptValues.lockTime)\r\n    }\r\n\r\n    unspents.forEach((unspent) => {\r\n      const { txid, vout } = this.processUnspent(unspent)\r\n      tx.addInput(txid, vout, 0xfffffffe)\r\n    })\r\n    tx.addOutput(destAddress, totalUnspent - feeValue)\r\n\r\n    const txRaw = tx.buildIncomplete()\r\n\r\n    tx.__INPUTS.map((_, index) =>\r\n      this._signTransaction({\r\n        script,\r\n        secret,\r\n        txRaw,\r\n      }, index)\r\n    )\r\n\r\n    const txHex = txRaw.toHex()\r\n    const txId = txRaw.getId()\r\n\r\n    return {\r\n      txHex,\r\n      txId,\r\n    }\r\n    return txRaw\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {boolean} isRefund\r\n   * @returns {Promise}\r\n   */\r\n  async getWithdrawHexTransaction(data, isRefund) {\r\n    const txRaw = await this.getWithdrawRawTransaction(data, isRefund)\r\n\r\n    return txRaw.txHex\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @returns {Promise}\r\n   */\r\n  getRefundRawTransaction(data) {\r\n    return this.getWithdrawRawTransaction(data, true)\r\n  }\r\n\r\n  async fundSwapScript({\r\n    flow,\r\n  }: {\r\n    flow: any, // Flow, @todo - add all fields\r\n  }) {\r\n    const utxoClass = this\r\n    const coin = this._swapName.toLowerCase()\r\n\r\n    const onTransactionHash = (txID) => {\r\n      const {\r\n        utxoScriptCreatingTransactionHash: scriptCreatingTransactionHash,\r\n        utxoScriptValues: scriptValues,\r\n      } = flow.state\r\n\r\n      if (scriptCreatingTransactionHash) {\r\n        return\r\n      }\r\n\r\n      flow.setState({\r\n        utxoScriptCreatingTransactionHash: txID,\r\n      })\r\n\r\n      flow.swap.room.once(`request utxo script`, () => {\r\n        flow.swap.room.sendMessage({\r\n          event: `create utxo script`,\r\n          data: {\r\n            scriptValues,\r\n            utxoScriptCreatingTransactionHash: txID,\r\n          }\r\n        })\r\n      })\r\n\r\n      flow.swap.room.sendMessage({\r\n        event: `create utxo script`,\r\n        data: {\r\n          scriptValues,\r\n          utxoScriptCreatingTransactionHash: txID,\r\n        }\r\n      })\r\n    }\r\n\r\n    const {\r\n      swap: {\r\n        sellAmount,\r\n      },\r\n      state: {\r\n        isBalanceEnough,\r\n        utxoScriptValues: scriptValues,\r\n      },\r\n    } = flow\r\n\r\n    if (isBalanceEnough) {\r\n      const fundScriptRepeat = async () => {\r\n        try {\r\n          await utxoClass.fundScript({\r\n            scriptValues,\r\n            amount: sellAmount,\r\n          })\r\n          return true\r\n        } catch (err) {\r\n          if (err === 'Script funded already') {\r\n            console.warn('Script already funded')\r\n            return true\r\n          } else {\r\n            if (err === 'Conflict') {\r\n              // @ToDo - its can be not btc, other UTXO, but, with btc its frequent error\r\n              console.warn('UTXO(BTC) locked. Has not confirmed tx in mempool. Wait confirm')\r\n              flow.swap.room.sendMessage({\r\n                event: 'wait utxo unlock',\r\n                data: {},\r\n              })\r\n              flow.setState({\r\n                waitUnlockUTXO: true,\r\n              })\r\n              await util.helpers.waitDelay(30)\r\n              return false\r\n            } else {\r\n              console.log('Fail fund script', err)\r\n            }\r\n          }\r\n        }\r\n        return true\r\n      }\r\n\r\n      await util.helpers.repeatAsyncUntilResult(async (stopRepeat) => {\r\n        const { isStoppedSwap } = flow.state\r\n\r\n        if (!isStoppedSwap) {\r\n          return await fundScriptRepeat()\r\n        } else {\r\n          stopRepeat()\r\n        }\r\n      })\r\n    }\r\n\r\n    const checkScriptBalance = async () => {\r\n      const { scriptAddress } = utxoClass.createScript(scriptValues)\r\n      const unspents = await utxoClass.fetchUnspents(scriptAddress)\r\n\r\n      if (unspents.length === 0) {\r\n        return false\r\n      }\r\n\r\n      const txID = unspents[0].txid\r\n\r\n      const balance = await utxoClass.getBalance(scriptValues)\r\n\r\n      const isEnoughMoney = new BigNumber(balance).isGreaterThanOrEqualTo(sellAmount.times(1e8))\r\n\r\n      if (isEnoughMoney) {\r\n        flow.setState({\r\n          scriptBalance: new BigNumber(balance).div(1e8).dp(8),\r\n        })\r\n\r\n        onTransactionHash(txID)\r\n      }\r\n\r\n      return isEnoughMoney\r\n    }\r\n\r\n    await util.helpers.repeatAsyncUntilResult(async (stopRepeat) => {\r\n      const { isStoppedSwap } = flow.state\r\n\r\n      if (!isStoppedSwap) {\r\n        return await checkScriptBalance()\r\n      } else {\r\n        stopRepeat()\r\n      }\r\n    })\r\n\r\n    const { isStoppedSwap } = flow.state\r\n\r\n    if (!isStoppedSwap) {\r\n      flow.finishStep({\r\n        [`is${coin}ScriptFunded}`]: true,\r\n        isUTXOScriptFunded: true,\r\n      }, { step: `lock-utxo` })\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @returns {Promise}\r\n   */\r\n  async getRefundHexTransaction(data) {\r\n    const txRaw = await this.getRefundRawTransaction(data)\r\n\r\n    return txRaw.txHex\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {function} handleTransactionHash\r\n   * @param {boolean} isRefund\r\n   * @param {string} hashName\r\n   * @returns {Promise}\r\n   */\r\n  withdraw(data, isRefund: boolean = false, hashName?: string): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        console.log('withdraw')\r\n        const txRaw = await this.getWithdrawRawTransaction(data, isRefund, hashName)\r\n\r\n        if (txRaw.alreadyWithdrawed) {\r\n          resolve(txRaw.txId)\r\n          return\r\n        }\r\n\r\n        debug('swap.core:swaps')('raw tx withdraw', txRaw.txHex)\r\n\r\n        console.log('broadcast')\r\n        const result = await this.broadcastTx(txRaw.txHex)\r\n\r\n        console.log('broadcast ready', result)\r\n\r\n        // Wait some delay until transaction can be rejected or broadcast failed\r\n        await util.helpers.waitDelay(10)\r\n\r\n        const txSuccess = await this.checkTX(txRaw.txId)\r\n\r\n        if (txSuccess) {\r\n          resolve(txRaw.txId)\r\n        } else {\r\n          console.warn('BtcSwap: cant withdraw', 'Generated TX not found')\r\n          reject('TX not found. Try it later. ' + txRaw.txId)\r\n        }\r\n      }\r\n      catch (error) {\r\n        console.warn('BtcSwap: cant withdraw', error.message)\r\n\r\n        let errorMessage\r\n\r\n        if (error.res && /non-final/.test(error.res.text)) {\r\n          errorMessage = 'Try it later'\r\n        } else if (/Total less than fee/.test(error.message)) {\r\n          if (/Total less than fee: 0/.test(error.message)) {\r\n            errorMessage = 'Address is empty'\r\n          } else {\r\n            errorMessage = 'Less than fee'\r\n          }\r\n        } else {\r\n          errorMessage = error\r\n        }\r\n\r\n        reject(errorMessage)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} txID\r\n   * @returns {Promise}\r\n   */\r\n  async checkTX(txID) {\r\n    console.log('check tx')\r\n    const txInfo = await this.fetchTxInfo(txID)\r\n    console.log('txInfo', txInfo)\r\n    if (txInfo\r\n      && txInfo.senderAddress\r\n      && txInfo.txid\r\n      && (txInfo.txid.toLowerCase() == txID.toLowerCase())\r\n    ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {function} handleTransactionHash\r\n   * @param {string} hashName\r\n   * @returns {Promise}\r\n   */\r\n  refund(data: any, hashName?: string) {\r\n    return this.withdraw(data, true, hashName)\r\n  }\r\n\r\n\r\n  async withdrawFromSwap({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const utxoClass = this\r\n    const coin = this._swapName.toLowerCase()\r\n\r\n    await util.helpers.repeatAsyncUntilResult((stopRepeat) => {\r\n      const {\r\n        secret,\r\n        utxoScriptValues: scriptValues,\r\n        [`${coin}SwapWithdrawTransactionHash`]: swapWithdrawTransactionHash,\r\n      } = flow.state\r\n\r\n      if (swapWithdrawTransactionHash) {\r\n        return true\r\n      }\r\n\r\n      if (!scriptValues) {\r\n        console.error(`There is no \"utxoScriptValues\" in state. No way to continue swap...`)\r\n        return null\r\n      }\r\n\r\n      return flow.btcSwap.withdraw({\r\n        scriptValues,\r\n        secret,\r\n        destinationAddress: flow.swap.destinationBuyAddress,\r\n      })\r\n        .then((hash) => {\r\n          console.log('withdraw hash', hash)\r\n          flow.setState({\r\n            [`${coin}SwapWithdrawTransactionHash`]: hash,\r\n          }, true)\r\n          return true\r\n        })\r\n        .catch((error) => null)\r\n    })\r\n\r\n    flow.finishStep({\r\n      [`is${coin}Withdrawn`]: true,\r\n    }, { step: `withdraw-utxo` })\r\n  }\r\n}\r\n\r\n\r\nexport default UTXOBlockchain\r\n"]}]}