{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETHTOKEN2GHOST.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETHTOKEN2GHOST.ts","mtime":1614842913757},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/ETHTOKEN2GHOST.ts"],"names":["debug","constants","util","AtomicAB2UTXO","tokenName","ETHTOKEN2GHOST","swap","utxoCoin","_flowName","getName","stepNumbers","ethTokenSwap","participantSwap","ghostSwap","ownerSwap","abBlockchain","utxoBlockchain","Error","state","step","isStoppedSwap","signTransactionHash","isSignFetching","isMeSigned","targetWallet","secretHash","isBalanceFetching","isBalanceEnough","balance","ethSwapCreationTransactionHash","canCreateEthTransaction","isEthContractFunded","secret","isEthWithdrawn","isGhostWithdrawn","ethSwapWithdrawTransactionHash","ghostSwapWithdrawTransactionHash","refundTransactionHash","isRefunded","isFinished","isSwapExist","withdrawRequestIncoming","withdrawRequestAccepted","isFailedTransaction","isFailedTransactionError","gasAmountNeeded","_persistState","flow","room","once","setState","signABSide","waitUTXOScriptCreated","syncBalance","fundAB2UTXOContract","getSecretFromAB2UTXO","helpers","repeatAsyncUntilResult","stopRepeat","utxoScriptValues","console","error","withdraw","scriptValues","destinationAddress","destinationBuyAddress","then","hash","finishStep","sendMessage","event","data","swapData","ownerAddress","app","getMyEthAddress","participantAddress","getParticipantEthAddress","checkSwapExists","refundHandler","wasRefunded","warn","refund","_secret","_secretHash","env","bitcoin","crypto","ripemd160","Buffer","from","toString","createScript","scriptAddress","getBalance","getFromName","getToName","toUpperCase","COINS","ghost"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\n\r\n\r\nexport default (tokenName) => {\r\n\r\n  class ETHTOKEN2GHOST extends AtomicAB2UTXO {\r\n\r\n    _flowName: string\r\n    ethTokenSwap: any\r\n    ghostSwap: any\r\n    state: any\r\n\r\n    static getName() {\r\n      return `${this.getFromName()}2${this.getToName()}`\r\n    }\r\n    static getFromName() {\r\n      return tokenName.toUpperCase()\r\n    }\r\n    static getToName() {\r\n      return constants.COINS.ghost\r\n    }\r\n    constructor(swap) {\r\n      super(swap)\r\n      this.utxoCoin = `ghost`\r\n\r\n      this._flowName = ETHTOKEN2GHOST.getName()\r\n\r\n      this.stepNumbers = {\r\n        'sign': 1,\r\n        'wait-lock-utxo': 2,\r\n        'verify-script': 3,\r\n        'sync-balance': 4,\r\n        'lock-eth': 5,\r\n        'wait-withdraw-eth': 6, // aka getSecret\r\n        'withdraw-utxo': 7,\r\n        'finish': 8,\r\n        'end': 9\r\n      }\r\n\r\n      this.ethTokenSwap = swap.participantSwap\r\n      this.ghostSwap = swap.ownerSwap\r\n\r\n      this.abBlockchain = this.ethTokenSwap\r\n      this.utxoBlockchain = this.ghostSwap\r\n\r\n      if (!this.ethTokenSwap) {\r\n        throw new Error('ETHTOKEN2GHOST: \"ethTokenSwap\" of type object required')\r\n      }\r\n      if (!this.ghostSwap) {\r\n        throw new Error('ETHTOKEN2GHOST: \"ghostSwap\" of type object required')\r\n      }\r\n\r\n      this.state = {\r\n        step: 0,\r\n\r\n        isStoppedSwap: false,\r\n\r\n        signTransactionHash: null,\r\n        isSignFetching: false,\r\n        isMeSigned: false,\r\n\r\n        targetWallet : null,\r\n        secretHash: null,\r\n\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: true,\r\n        balance: null,\r\n\r\n        ethSwapCreationTransactionHash: null,\r\n        canCreateEthTransaction: true,\r\n        isEthContractFunded: false,\r\n\r\n        secret: null,\r\n\r\n        isEthWithdrawn: false,\r\n        isGhostWithdrawn: false,\r\n\r\n        ethSwapWithdrawTransactionHash: null,\r\n        ghostSwapWithdrawTransactionHash: null,\r\n\r\n        refundTransactionHash: null,\r\n        isRefunded: false,\r\n\r\n        isFinished: false,\r\n        isSwapExist: false,\r\n\r\n        withdrawRequestIncoming: false,\r\n        withdrawRequestAccepted: false,\r\n\r\n        isFailedTransaction: false,\r\n        isFailedTransactionError: null,\r\n        gasAmountNeeded: 0,\r\n      }\r\n\r\n      this._persistState()\r\n\r\n      const flow = this\r\n      flow.swap.room.once('request withdraw', () => {\r\n        flow.setState({\r\n          withdrawRequestIncoming: true,\r\n        })\r\n      })\r\n\r\n      super._persistSteps()\r\n    }\r\n\r\n    _persistState() {\r\n      super._persistState()\r\n    }\r\n\r\n    _getSteps() {\r\n      const flow = this\r\n\r\n      return [\r\n\r\n        // 1. Sign swap to start\r\n\r\n        () => {\r\n          this.signABSide()\r\n        },\r\n\r\n        // 2. Wait participant create, fund GHOST Script\r\n\r\n        () => {\r\n          flow.waitUTXOScriptCreated()\r\n        },\r\n\r\n        // 3. Verify GHOST Script\r\n\r\n        () => {\r\n          debug('swap.core:flow')(`waiting verify ghost script`)\r\n          // this.verifyGhostScript()\r\n        },\r\n\r\n        // 4. Check balance\r\n\r\n        () => {\r\n          this.syncBalance()\r\n        },\r\n\r\n        // 5. Create ETH Contract\r\n\r\n        async () => {\r\n          await flow.ethTokenSwap.fundAB2UTXOContract({\r\n            flow,\r\n            utxoCoin: `ghost`,\r\n          })\r\n        },\r\n\r\n        // 6. Wait participant withdraw\r\n\r\n        async () => {\r\n          await flow.ethTokenSwap.getSecretFromAB2UTXO({ flow })\r\n        },\r\n\r\n        // 7. Withdraw\r\n\r\n        async () => {\r\n          await util.helpers.repeatAsyncUntilResult((stopRepeat) => {\r\n            const { secret, utxoScriptValues, ghostSwapWithdrawTransactionHash } = flow.state\r\n\r\n            if (ghostSwapWithdrawTransactionHash) {\r\n              return true\r\n            }\r\n\r\n            if (!utxoScriptValues) {\r\n              console.error('There is no \"utxoScriptValues\" in state. No way to continue swap...')\r\n              return null\r\n            }\r\n\r\n            return flow.ghostSwap.withdraw({\r\n              scriptValues: utxoScriptValues,\r\n              secret,\r\n              destinationAddress: flow.swap.destinationBuyAddress,\r\n            })\r\n              .then((hash) => {\r\n                flow.setState({\r\n                  ghostSwapWithdrawTransactionHash: hash,\r\n                }, true)\r\n                return true\r\n              })\r\n              .catch((error) => null)\r\n          })\r\n\r\n          flow.finishStep({\r\n            isGhostWithdrawn: true,\r\n          }, { step: 'withdraw-utxo' })\r\n        },\r\n\r\n        // 8. Finish\r\n\r\n        () => {\r\n          flow.swap.room.once('request swap finished', () => {\r\n            const { ghostSwapWithdrawTransactionHash } = flow.state\r\n\r\n            flow.swap.room.sendMessage({\r\n              event: 'swap finished',\r\n              data: {\r\n                ghostSwapWithdrawTransactionHash,\r\n              },\r\n            })\r\n          })\r\n\r\n          flow.finishStep({\r\n            isFinished: true,\r\n          }, { step: 'finish' })\r\n        },\r\n\r\n        // 9. Finished!\r\n\r\n        () => {},\r\n      ]\r\n    }\r\n\r\n    _checkSwapAlreadyExists() {\r\n      const flow = this\r\n\r\n      const swapData = {\r\n        ownerAddress: this.app.getMyEthAddress(),\r\n        participantAddress: this.app.getParticipantEthAddress(flow.swap)\r\n      }\r\n\r\n      return this.ethTokenSwap.checkSwapExists(swapData)\r\n    }\r\n\r\n    async tryRefund() {\r\n      const { secretHash } = this.state\r\n\r\n      const refundHandler = (hash = null) => {\r\n        this.swap.room.sendMessage({\r\n          event: 'eth refund completed',\r\n        })\r\n\r\n        this.setState({\r\n          refundTransactionHash: hash,\r\n          isRefunded: true,\r\n          isSwapExist: false,\r\n        }, true)\r\n      }\r\n\r\n      try {\r\n        const wasRefunded = await this.ethTokenSwap.wasRefunded({ secretHash })\r\n\r\n        if (wasRefunded) {\r\n          debug('swap.core:flow')('This swap was refunded')\r\n\r\n          refundHandler()\r\n\r\n          return true\r\n        }\r\n      } catch (error) {\r\n        console.warn('wasRefunded error:', error)\r\n\r\n        return false\r\n      }\r\n\r\n      return this.ethTokenSwap.refund({\r\n        participantAddress: this.app.getParticipantEthAddress(this.swap),\r\n      })\r\n        .then((hash) => {\r\n          if (!hash) {\r\n            return false\r\n          }\r\n\r\n          refundHandler(hash)\r\n\r\n          return true\r\n        })\r\n        .catch((error) => false)\r\n    }\r\n\r\n    async isRefundSuccess() {\r\n      return true\r\n    }\r\n\r\n    async tryWithdraw(_secret) {\r\n      const { secret, secretHash, isEthWithdrawn, isGhostWithdrawn, utxoScriptValues } = this.state\r\n\r\n      if (!_secret)\r\n        throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n      if (!utxoScriptValues)\r\n        throw new Error(`Cannot withdraw without script values`)\r\n\r\n      if (secret && secret != _secret)\r\n        console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n      if (isGhostWithdrawn)\r\n        console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n      debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n      const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n      if (secretHash != _secretHash)\r\n        console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n      const {scriptAddress} = this.ghostSwap.createScript(utxoScriptValues)\r\n      const balance = await this.ghostSwap.getBalance(scriptAddress)\r\n\r\n      debug('swap.core:flow')(`address=${scriptAddress}, balance=${balance}`)\r\n\r\n      if (balance === 0) {\r\n        this.finishStep({\r\n          isGhostWithdrawn: true,\r\n        }, {step: 'withdraw-utxo'})\r\n        throw new Error(`Already withdrawn: address=${scriptAddress},balance=${balance}`)\r\n      }\r\n\r\n      await this.ghostSwap.withdraw({\r\n        scriptValues: utxoScriptValues,\r\n        secret: _secret,\r\n      }, (hash) => {\r\n        debug('swap.core:flow')(`TX hash=${hash}`)\r\n        this.setState({\r\n          ghostSwapWithdrawTransactionHash: hash,\r\n        })\r\n      })\r\n      debug('swap.core:flow')(`TX withdraw sent: ${this.state.ghostSwapWithdrawTransactionHash}`)\r\n\r\n      this.finishStep({\r\n        isGhostWithdrawn: true,\r\n      }, { step: 'withdraw-utxo' })\r\n    }\r\n  }\r\n\r\n  return ETHTOKEN2GHOST\r\n}\r\n"]}]}