{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\components\\modals\\WithdrawBtcSms\\WithdrawBtcSms.tsx","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\components\\modals\\WithdrawBtcSms\\WithdrawBtcSms.tsx","mtime":1614842914032},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/components/modals/WithdrawBtcSms/WithdrawBtcSms.tsx"],"names":["React","Fragment","PropTypes","helpers","constants","actions","Link","connect","cssModules","styles","ownStyle","Modal","FieldLabel","Input","Button","FormattedMessage","injectIntl","defineMessages","InvoiceInfoBlock","redirectTo","lsDataCache","MnemonicInput","isDark","localStorage","getItem","WithdrawModalMultisig","dashboardModalsAllowed","ui","dashboardView","allowMultiple","props","setState","smsStatus","step","txId","data","sendOptions","to","amount","address","wallet","invoice","onReady","name","loader","hide","invoices","markInvoice","id","txInfoCache","senderAddress","receiverAddress","confirmed","push","key","time","isShipped","error","Function","txInfoUrl","transactions","getTxRouter","modals","close","isConfirming","code","state","btcmultisig","confirmSMSProtected","result","txID","onFinishWithdraw","console","log","rawTX","btc","broadcastTx","then","txid","broadcastError","rawTx","errorText","mnemonic","validateMnemonicWords","trim","checkSmsMnemonic","signSmsMnemonicAndBuild","txHex","e","res","text","message","err","beforeBalances","minus","smsConfirmed","sendSmsTimeout","sendSmsTimeoutTimer","clearInterval","sendSmsStatus","sendSMSProtected","answer","currency","tokenItems","items","intl","portalUI","linked","all","labels","withdrowModal","defaultMessage","smsPlaceholder","mnemonicPlaceholder","formRender","handleMnemonicChange","handleMnemonicSign","handleSwitchToSms","formatMessage","handleConfirmSMS","handleSwitchToMnemonic","toUpperCase","Component","string","object"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport helpers, { constants } from 'helpers'\r\nimport actions from 'redux/actions'\r\nimport Link from 'local_modules/sw-valuelink'\r\nimport { connect } from 'redaction'\r\nimport config from 'app-config'\r\n\r\nimport cssModules from 'react-css-modules'\r\nimport styles from '../WithdrawModal/WithdrawModal.scss'\r\nimport ownStyle from './WithdrawBtcSms.scss'\r\n\r\nimport { BigNumber } from 'bignumber.js'\r\nimport Modal from 'components/modal/Modal/Modal'\r\nimport FieldLabel from 'components/forms/FieldLabel/FieldLabel'\r\nimport Input from 'components/forms/Input/Input'\r\nimport Button from 'components/controls/Button/Button'\r\nimport Tooltip from 'components/ui/Tooltip/Tooltip'\r\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl'\r\nimport ReactTooltip from 'react-tooltip'\r\nimport { isMobile } from 'react-device-detect'\r\nimport InvoiceInfoBlock from 'components/InvoiceInfoBlock/InvoiceInfoBlock'\r\n\r\nimport typeforce from 'swap.app/util/typeforce'\r\n// import { isCoinAddress } from 'swap.app/util/typeforce'\r\nimport minAmount from 'helpers/constants/minAmount'\r\nimport { inputReplaceCommaWithDot } from 'helpers/domUtils'\r\nimport QrReader from 'components/QrReader'\r\n\r\nimport redirectTo from 'helpers/redirectTo'\r\nimport AdminFeeInfoBlock from 'components/AdminFeeInfoBlock/AdminFeeInfoBlock'\r\nimport lsDataCache from 'helpers/lsDataCache'\r\nimport MnemonicInput from 'components/forms/MnemonicInput/MnemonicInput'\r\n\r\nconst isDark = localStorage.getItem(constants.localStorage.isDark)\r\n\r\n@injectIntl\r\n@connect(({ ui: { dashboardModalsAllowed } }) => ({\r\n  dashboardView: dashboardModalsAllowed,\r\n}))\r\n@cssModules({ ...styles, ...ownStyle }, { allowMultiple: true })\r\nexport default class WithdrawModalMultisig extends React.Component<any, any> {\r\n  props: any\r\n\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    data: PropTypes.object,\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    const { wallet, invoice, sendOptions, beforeBalances } = props.data\r\n\r\n    this.state = {\r\n      step: 'confirm',\r\n      isShipped: false,\r\n      code: '',\r\n      minus: '',\r\n      error: false,\r\n      smsConfirmed: false,\r\n      mnemonic: '',\r\n      broadcastError: false,\r\n      sendSmsTimeout: 0,\r\n      sendSmsTimeoutTimer: false,\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.state.sendSmsTimeoutTimer)\r\n  }\r\n\r\n  gotoSms = () => {\r\n    this.setState({\r\n      smsStatus: 'sended',\r\n      step: 'confirm',\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(\r\n      {\r\n        isShipped: true,\r\n        step: 'confirm',\r\n        sendSmsStatus: 'sending',\r\n      },\r\n      async () => {\r\n        const {\r\n          data: { wallet, sendOptions, invoice, onReady },\r\n        } = this.props\r\n\r\n        const result = await actions.btcmultisig.sendSMSProtected(sendOptions)\r\n\r\n        console.log('sendSMSProtected result', result)\r\n        if (result && result.answer === 'ok') {\r\n          this.setState({\r\n            isShipped: false,\r\n            rawTx: result.rawTx ? result.rawTx : null,\r\n            sendSmsStatus: 'sended',\r\n          })\r\n        } else {\r\n          this.setState({\r\n            isShipped: false,\r\n            sendSmsStatus: 'offline',\r\n            rawTx: result.rawTx ? result.rawTx : null,\r\n          })\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  onFinishWithdraw = async (txId) => {\r\n    const {\r\n      data: {\r\n        sendOptions: { to, amount },\r\n        wallet: { address },\r\n        invoice,\r\n        onReady,\r\n      },\r\n      name,\r\n    } = this.props\r\n\r\n    actions.loader.hide()\r\n\r\n    if (invoice) {\r\n      await actions.invoices.markInvoice(invoice.id, 'ready', txId, address)\r\n    }\r\n\r\n    // Сохраняем транзакцию в кеш\r\n    const txInfoCache = {\r\n      amount,\r\n      senderAddress: address,\r\n      receiverAddress: to,\r\n      confirmed: false,\r\n    }\r\n\r\n    lsDataCache.push({\r\n      key: `TxInfo_btc_${txId}`,\r\n      time: 3600,\r\n      data: txInfoCache,\r\n    })\r\n\r\n    this.setState({\r\n      isShipped: false,\r\n      error: false,\r\n    })\r\n\r\n    if (onReady instanceof Function) {\r\n      onReady()\r\n    }\r\n\r\n    const txInfoUrl = helpers.transactions.getTxRouter('btc', txId)\r\n    redirectTo(txInfoUrl)\r\n\r\n    actions.modals.close(name)\r\n  }\r\n\r\n  handleConfirmSMS = async () => {\r\n    this.setState(\r\n      {\r\n        isShipped: true,\r\n        error: false,\r\n        isConfirming: true,\r\n      },\r\n      async () => {\r\n        const { code } = this.state\r\n\r\n        const result = await actions.btcmultisig.confirmSMSProtected(code)\r\n        if (result && result.txID) {\r\n          this.onFinishWithdraw(result.txID)\r\n        } else {\r\n          console.log(result)\r\n          if (result && result.error && result.error == 'Fail broadcast' && result.rawTX) {\r\n            actions.btc.broadcastTx(result.rawTX).then(async ({ txid }) => {\r\n              if (txid) {\r\n                this.onFinishWithdraw(txid)\r\n              } else {\r\n                this.setState({\r\n                  broadcastError: true,\r\n                  rawTx: result.rawTX,\r\n                  isShipped: false,\r\n                  isConfirming: false,\r\n                  error: (\r\n                    <FormattedMessage\r\n                      id=\"WithdrawSMS_BroadcastError\"\r\n                      defaultMessage=\"Не удалось отправить транзакцию в сеть ({errorText})\"\r\n                      values={{ errorText: `unknown` }}\r\n                    />\r\n                  ),\r\n                })\r\n              }\r\n            })\r\n          } else {\r\n            if (result && result.error && result.error === `SMS code not valid`) {\r\n              this.setState({\r\n                isShipped: false,\r\n                isConfirming: false,\r\n                error: (\r\n                  <FormattedMessage\r\n                    id=\"WithdrawSMS_NotValidSmsCode\"\r\n                    defaultMessage=\"Вы ввели не верный проверочный код\"\r\n                  />\r\n                ),\r\n              })\r\n            } else {\r\n              this.setState({\r\n                isShipped: false,\r\n                isConfirming: false,\r\n                error: (\r\n                  <FormattedMessage\r\n                    id=\"WithdrawSMS_UnknownError\"\r\n                    defaultMessage=\"Не известная ошибка. Попробуйте позже или используйте секретную фразу\"\r\n                  />\r\n                ),\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  handleMnemonicSign = () => {\r\n    const { mnemonic, rawTx } = this.state\r\n\r\n    if (!mnemonic || !actions.btc.validateMnemonicWords(mnemonic.trim())) {\r\n      this.setState({\r\n        error: (\r\n          <FormattedMessage\r\n            id=\"WithdrawSMS_NotValidMnemonic\"\r\n            defaultMessage=\"Секретная фраза не валидна\"\r\n          />\r\n        ),\r\n      })\r\n      return\r\n    }\r\n    if (!actions.btcmultisig.checkSmsMnemonic(mnemonic.trim())) {\r\n      this.setState({\r\n        error: (\r\n          <FormattedMessage\r\n            id=\"WithdrawSMS_WrongMnemonic\"\r\n            defaultMessage=\"Не правильная секретная фраза\"\r\n          />\r\n        ),\r\n      })\r\n      return\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        isShipped: true,\r\n        error: false,\r\n        broadcastError: false,\r\n      },\r\n      () => {\r\n        actions.btcmultisig\r\n          .signSmsMnemonicAndBuild(rawTx, mnemonic.trim())\r\n          .then(async (txHex) => {\r\n            console.log('signed', txHex)\r\n            this.setState({\r\n              txHex,\r\n            })\r\n            actions.btc\r\n              .broadcastTx(txHex)\r\n              .then(async ({ txid }) => {\r\n                if (txid) {\r\n                  this.onFinishWithdraw(txid)\r\n                } else {\r\n                  this.setState({\r\n                    broadcastError: true,\r\n                    isShipped: false,\r\n                    error: (\r\n                      <FormattedMessage\r\n                        id=\"WithdrawSMS_BroadcastError\"\r\n                        defaultMessage=\"Не удалось отправить транзакцию в сеть ({errorText})\"\r\n                        values={{ errorText: `unknown` }}\r\n                      />\r\n                    ),\r\n                  })\r\n                }\r\n              })\r\n              .catch((e) => {\r\n                console.error(e)\r\n                const errorText = e.res ? e.res.text : e.message\r\n                this.setState({\r\n                  broadcastError: true,\r\n                  isShipped: false,\r\n                  error: (\r\n                    <FormattedMessage\r\n                      id=\"WithdrawSMS_BroadcastError\"\r\n                      defaultMessage=\"Не удалось отправить транзакцию в сеть ({errorText})\"\r\n                      values={{ errorText }}\r\n                    />\r\n                  ),\r\n                })\r\n              })\r\n          })\r\n          .catch((e) => {\r\n            console.log('fail sign tx by mnemonic')\r\n            this.setState({\r\n              isShipped: false,\r\n              error: (\r\n                <FormattedMessage\r\n                  id=\"WithdrawSMS_FailSignByMnemonic\"\r\n                  defaultMessage=\"Не удалось подписать транзакцию\"\r\n                />\r\n              ),\r\n            })\r\n          })\r\n      }\r\n    )\r\n  }\r\n\r\n  handleSwitchToMnemonic = () => {\r\n    this.setState({\r\n      step: 'mnemonicSign',\r\n    })\r\n  }\r\n\r\n  handleSwitchToSms = () => {\r\n    this.setState({\r\n      step: 'confirm',\r\n    })\r\n  }\r\n\r\n  handleError = (err) => {\r\n    console.error(err)\r\n  }\r\n\r\n  handleClose = () => {\r\n    const { name } = this.props\r\n\r\n    actions.modals.close(name)\r\n  }\r\n\r\n  handleMnemonicChange = (mnemonic) => {\r\n    this.setState({\r\n      mnemonic,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      code,\r\n      isShipped,\r\n      isConfirming,\r\n      error,\r\n      mnemonic,\r\n      step,\r\n      sendSmsTimeout,\r\n      sendSmsStatus,\r\n    } = this.state\r\n\r\n    const {\r\n      name,\r\n      data: {\r\n        wallet: { currency },\r\n        invoice,\r\n      },\r\n      tokenItems,\r\n      items,\r\n      intl,\r\n      portalUI,\r\n    } = this.props\r\n\r\n    const linked = Link.all(this, 'code')\r\n\r\n    const labels = defineMessages({\r\n      withdrowModal: {\r\n        id: 'withdrowTitle271',\r\n        defaultMessage: `Send`,\r\n      },\r\n      smsPlaceholder: {\r\n        id: 'withdrawSMSCodePlaceholder',\r\n        defaultMessage: 'Enter SMS-code',\r\n      },\r\n      mnemonicPlaceholder: {\r\n        id: 'registerSMSMPlaceHolder',\r\n        defaultMessage: `12 слов`,\r\n      },\r\n    })\r\n\r\n    const formRender = (\r\n      <Fragment>\r\n        {invoice && <InvoiceInfoBlock invoiceData={invoice} />}\r\n        {step === 'mnemonicSign' && (\r\n          <Fragment>\r\n            <p styleName=\"notice dashboardViewNotice\">\r\n              <FormattedMessage\r\n                id=\"WithdrawSMS_MnemonicSignCaption\"\r\n                defaultMessage=\"Подтверждение транзакции секретной фразой\"\r\n              />\r\n            </p>\r\n            <div styleName=\"highLevel\" className=\"ym-hide-content\">\r\n              <FieldLabel>\r\n                <FormattedMessage\r\n                  id=\"registerSMSModalWords\"\r\n                  defaultMessage=\"Секретная фраза (12 слов):\"\r\n                />\r\n              </FieldLabel>\r\n              <MnemonicInput onChange={this.handleMnemonicChange} fullWidth={true} />\r\n            </div>\r\n            {error && <div styleName=\"rednotes\">{error}</div>}\r\n            <Button\r\n              styleName=\"buttonFull\"\r\n              big\r\n              blue\r\n              fullWidth\r\n              disabled={isShipped}\r\n              onClick={this.handleMnemonicSign}\r\n            >\r\n              {isShipped ? (\r\n                <FormattedMessage id=\"WithdrawModal11212\" defaultMessage=\"Processing ...\" />\r\n              ) : (\r\n                <FormattedMessage\r\n                  id=\"btcSMSProtectedSignByMnemonic\"\r\n                  defaultMessage=\"Использовать секретную фразу\"\r\n                />\r\n              )}\r\n            </Button>\r\n            <hr />\r\n            <p styleName=\"notice mnemonicUseNote dashboardViewNotice\">\r\n              <FormattedMessage\r\n                id=\"WithdrawSMS_UseSMSNote\"\r\n                defaultMessage=\"Так-же вы можете использовать смс-код, отправленный на привязанный номер телефона\"\r\n              />\r\n            </p>\r\n            <Button styleName=\"useAuthMethodButton\" blue onClick={this.handleSwitchToSms}>\r\n              <FormattedMessage id=\"WithdrawSMS_UseSMS\" defaultMessage=\"Использовать смс-код\" />\r\n            </Button>\r\n          </Fragment>\r\n        )}\r\n\r\n        {step === 'confirm' && (\r\n          <Fragment>\r\n            <div styleName=\"highLevel smsCodeHolder\">\r\n              <FieldLabel>\r\n                <FormattedMessage id=\"Withdrow2223\" defaultMessage=\"SMS code\" />\r\n              </FieldLabel>\r\n              <Input\r\n                styleName=\"input\"\r\n                valueLink={linked.code}\r\n                pattern=\"0-9\"\r\n                placeholder={`${intl.formatMessage(labels.smsPlaceholder)}`}\r\n              />\r\n            </div>\r\n            {error && <div styleName=\"smsServerStatus hasError\">{error}</div>}\r\n            {isConfirming && (\r\n              <div styleName=\"smsServerStatus\">\r\n                <FormattedMessage\r\n                  id=\"WithdrawSMS_SmsConfirming\"\r\n                  defaultMessage=\"Подтверждение транзакции\"\r\n                />\r\n              </div>\r\n            )}\r\n            {!error && sendSmsStatus === 'sending' && (\r\n              <div styleName=\"smsServerStatus\">\r\n                <FormattedMessage\r\n                  id=\"WithdrawSMS_SmsSending\"\r\n                  defaultMessage=\"Отправка проверочного кода\"\r\n                />\r\n              </div>\r\n            )}\r\n            {!error && !isShipped && sendSmsStatus === 'sended' && (\r\n              <div styleName=\"smsServerStatus\">\r\n                <FormattedMessage id=\"WithdrawSMS_SmsSended\" defaultMessage=\"Код отправлен\" />\r\n              </div>\r\n            )}\r\n            {!error && !isShipped && sendSmsStatus === 'offline' && (\r\n              <div styleName=\"smsServerStatus hasError\">\r\n                <FormattedMessage\r\n                  id=\"WithdrawSMS_ServerOffline\"\r\n                  defaultMessage=\"Сервер авторизации не доступен\"\r\n                />\r\n              </div>\r\n            )}\r\n            {linked.code.error && (\r\n              <div styleName=\"smsServerStatus hasError\">\r\n                <FormattedMessage\r\n                  id=\"WithdrawModal2225\"\r\n                  defaultMessage=\"Something went wrong, enter your current code please\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Button\r\n              styleName=\"buttonFull confirmSmsCode\"\r\n              fullWidth\r\n              disabled={isShipped || sendSmsStatus === 'sending' || sendSmsStatus === 'offline'}\r\n              big\r\n              blue\r\n              onClick={this.handleConfirmSMS}\r\n            >\r\n              <FormattedMessage id=\"Withdrow2224\" defaultMessage=\"Confirm\" />\r\n            </Button>\r\n            <hr styleName=\"marginHr\" />\r\n            <p styleName=\"notice mnemonicUseNote dashboardViewNotice\">\r\n              <FormattedMessage\r\n                id=\"WithdrawSMS_MnemonicNote\"\r\n                defaultMessage=\"Если у вас нет доступа к телефону или не получается получить код, вы можете воспользовать секретной фразой\"\r\n              />\r\n            </p>\r\n            <Button styleName=\"useAuthMethodButton\" blue onClick={this.handleSwitchToMnemonic}>\r\n              <FormattedMessage\r\n                id=\"WithdrawSMS_UseMnemonic\"\r\n                defaultMessage=\"Использовать секретную фразу\"\r\n              />\r\n            </Button>\r\n          </Fragment>\r\n        )}\r\n      </Fragment>\r\n    )\r\n\r\n    return portalUI ? (\r\n      formRender\r\n    ) : (\r\n      <Modal\r\n        name={name}\r\n        title={`${intl.formatMessage(labels.withdrowModal)}${' '}${currency.toUpperCase()}`}\r\n      >\r\n        {formRender}\r\n      </Modal>\r\n    )\r\n  }\r\n}\r\n"]}]}