{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\btc.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\btc.ts","mtime":1614852332920},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/btc.ts"],"names":["BigInteger","BigNumber","bitcoin","bip39","bitcoinMessage","getState","reducers","btc","constants","actions","typeforce","config","mnemonicUtils","default","bitcoinUtils","NETWORK","process","env","MAINNET","hasAdminFee","opts","fee","address","min","getRandomMnemonicWords","generateMnemonic","validateMnemonicWords","mnemonic","validateMnemonic","convertMnemonicToValid","sweepToMnemonic","path","wallet","getWalletByWords","localStorage","setItem","privateKeyNames","btcMnemonic","WIF","getMainPublicKey","btcData","user","publicKey","toString","isSweeped","btcMnemonicData","toLowerCase","getSweepAddress","walletNumber","getBtcWallet","network","auth","privateKey","hash","crypto","sha256","d","fromBuffer","keyPair","ECPair","fromWIF","account","payments","p2pkh","pubkey","getPrivateKeyByAddress","oldAddress","undefined","mnemonicAddress","mnemonicKey","login","mnemonicKeys","sweepToMnemonicReady","console","info","accData","log","data","isMnemonic","isBTC","window","getBtcAddress","getBtcData","setAuthData","name","error","mnemonicData","addWallet","currency","fullName","balance","isBalanceFetched","balanceError","infoAboutCurrency","Promise","resolve","fetchBalanceStatus","balanceData","setBalanceError","getTxRouter","txId","getTx","txRaw","getId","getLinkToInfo","tx","link","bitpay","fetchBalance","withUnconfirmed","then","answer","unconfirmed","unconfirmedBalance","e","getBalance","setBalance","amount","fetchTxRaw","cacheResponse","fetchTx","fetchTxInfo","getInvoices","userAddress","invoices","getAllMyAddresses","btcMultisigSMSData","btcMultisigUserData","btcMultisigG2FAData","btcMultisigPinData","retData","push","wallets","length","map","getDataByAddress","founded","filter","getTransaction","ownAddress","ownType","myAllWallets","type","isCoinAddress","BTC","getTransactionBlocyper","myWallets","addressIsCorrect","outputScript","toOutputScript","send","from","to","feeValue","speed","ready","reject","message","feeFromAmount","adminFee","adminFeeMinValue","adminFeeMin","dividedBy","multipliedBy","isGreaterThan","integerValue","toNumber","estimateFeeValue","inSatoshis","unspents","fetchUnspents","prepareUnspents","fundValue","String","totalUnspent","reduce","summ","satoshis","residue","psbt","Psbt","addOutput","value","i","txid","vout","rawTx","addInput","index","nonWitnessUtxo","Buffer","signAllInputs","finalizeAllInputs","extractTransaction","toHex","broadcastTx","broadcastAnswer","sendTransaction","txHash","signMessage","encodedPrivateKey","networks","testnet","privateKeyBuff","signature","sign","compressed","getReputation","checkWithdraw","scriptAddress"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport BigInteger from 'bigi'\r\n\r\nimport { BigNumber } from 'bignumber.js'\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport * as bip32 from 'bip32'\r\nimport * as bip39 from 'bip39'\r\n\r\nimport bitcoinMessage from 'bitcoinjs-message'\r\nimport { getState } from 'redux/core'\r\nimport reducers from 'redux/core/reducers'\r\nimport { btc, apiLooper, constants, api } from 'helpers'\r\nimport actions from 'redux/actions'\r\nimport typeforce from 'swap.app/util/typeforce'\r\nimport config from 'app-config'\r\n\r\nimport { localisePrefix } from 'helpers/locale'\r\n\r\nimport * as mnemonicUtils from '../../../../common/utils/mnemonic'\r\n\r\nimport { default as bitcoinUtils } from '../../../../common/utils/coin/btc'\r\n\r\n\r\nconst NETWORK = (process.env.MAINNET) ? `MAINNET` : `TESTNET`\r\n\r\n\r\nconst hasAdminFee = (config\r\n  && config.opts\r\n  && config.opts.fee\r\n  && config.opts.fee.btc\r\n  && config.opts.fee.btc.fee\r\n  && config.opts.fee.btc.address\r\n  && config.opts.fee.btc.min\r\n) ? config.opts.fee.btc : false\r\n\r\nconst getRandomMnemonicWords = () => bip39.generateMnemonic()\r\nconst validateMnemonicWords = (mnemonic) => bip39.validateMnemonic(convertMnemonicToValid(mnemonic))\r\n\r\n\r\nconst sweepToMnemonic = (mnemonic, path) => {\r\n  const wallet = getWalletByWords(mnemonic, path)\r\n  localStorage.setItem(constants.privateKeyNames.btcMnemonic, wallet.WIF)\r\n  return wallet.WIF\r\n}\r\n\r\nconst getMainPublicKey = () => {\r\n  const {\r\n    user: {\r\n      btcData,\r\n    },\r\n  } = getState()\r\n\r\n  return btcData.publicKey.toString('Hex')\r\n}\r\n\r\nconst isSweeped = () => {\r\n  const {\r\n    user: {\r\n      btcData,\r\n      btcMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (btcMnemonicData\r\n    && btcMnemonicData.address\r\n    && btcData\r\n    && btcData.address\r\n    && btcData.address.toLowerCase() !== btcMnemonicData.address.toLowerCase()\r\n  ) return false\r\n\r\n  return true\r\n}\r\n\r\nconst getSweepAddress = () => {\r\n  const {\r\n    user: {\r\n      btcMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (btcMnemonicData && btcMnemonicData.address) return btcMnemonicData.address\r\n  return false\r\n}\r\n\r\nconst convertMnemonicToValid = (mnemonic) => mnemonicUtils.convertMnemonicToValid(mnemonic)\r\n\r\nconst getWalletByWords = (mnemonic: string, walletNumber: number = 0, path: string = '') => {\r\n  return mnemonicUtils.getBtcWallet(btc.network, mnemonic, walletNumber, path)\r\n}\r\n\r\nconst auth = (privateKey) => {\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    const keyPair = bitcoin.ECPair.fromWIF(privateKey, btc.network)\r\n\r\n    const account = bitcoin.ECPair.fromWIF(privateKey, btc.network) // eslint-disable-line\r\n    const { address } = bitcoin.payments.p2pkh({ pubkey: account.publicKey, network: btc.network })\r\n    const { publicKey } = account\r\n\r\n    return {\r\n      account,\r\n      keyPair,\r\n      address,\r\n      privateKey,\r\n      publicKey,\r\n    }\r\n  }\r\n}\r\n\r\nconst getPrivateKeyByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      btcData: {\r\n        address: oldAddress,\r\n        privateKey,\r\n      },\r\n      btcMnemonicData: {\r\n        address: mnemonicAddress,\r\n        privateKey: mnemonicKey,\r\n      } = {\r\n        address: undefined,\r\n        privateKey: undefined,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  if (oldAddress === address) return privateKey\r\n  if (mnemonicAddress === address) return mnemonicKey\r\n}\r\n\r\nconst login = (privateKey, mnemonic = null, mnemonicKeys = null) => {\r\n  let sweepToMnemonicReady = false\r\n\r\n  if (privateKey\r\n    && mnemonic\r\n    && mnemonicKeys\r\n    && mnemonicKeys.btc === privateKey\r\n  ) sweepToMnemonicReady = true\r\n\r\n  if (!privateKey && mnemonic) sweepToMnemonicReady = true\r\n\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    // keyPair     = bitcoin.ECPair.fromWIF(privateKey, btc.network)\r\n  }\r\n  else {\r\n    console.info('Created account Bitcoin ...')\r\n    // keyPair     = bitcoin.ECPair.makeRandom({ network: btc.network })\r\n    // privateKey  = keyPair.toWIF()\r\n    // use random 12 words\r\n    if (!mnemonic) mnemonic = bip39.generateMnemonic()\r\n\r\n    const accData = getWalletByWords(mnemonic)\r\n    console.log('Btc. Generated wallet from random 12 words')\r\n    console.log(accData)\r\n    privateKey = accData.WIF\r\n    localStorage.setItem(constants.privateKeyNames.btcMnemonic, privateKey)\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.btc, privateKey)\r\n\r\n  const data = {\r\n    ...auth(privateKey),\r\n    isMnemonic: sweepToMnemonicReady,\r\n    isBTC: true,\r\n  }\r\n\r\n  window.getBtcAddress = () => data.address\r\n  window.getBtcData = () => data\r\n\r\n  console.info('Logged in with Bitcoin', data)\r\n  reducers.user.setAuthData({ name: 'btcData', data })\r\n  if (!sweepToMnemonicReady) {\r\n    // Auth with our mnemonic account\r\n    if (mnemonic === `-`) {\r\n      console.error('Sweep. Cant auth. Need new mnemonic or enter own for re-login')\r\n      return\r\n    }\r\n\r\n    if (!mnemonicKeys\r\n      || !mnemonicKeys.btc\r\n    ) {\r\n      console.error('Sweep. Cant auth. Login key undefined')\r\n      return\r\n    }\r\n\r\n    const mnemonicData = {\r\n      ...auth(mnemonicKeys.btc),\r\n      isMnemonic: true,\r\n    }\r\n    console.info('Logged in with Bitcoin Mnemonic', mnemonicData)\r\n    reducers.user.addWallet({\r\n      name: 'btcMnemonicData',\r\n      data: {\r\n        currency: 'BTC',\r\n        fullName: 'Bitcoin (New)',\r\n        balance: 0,\r\n        isBalanceFetched: false,\r\n        balanceError: null,\r\n        infoAboutCurrency: null,\r\n        ...mnemonicData,\r\n      },\r\n    })\r\n    new Promise(async (resolve) => {\r\n      const balanceData = await fetchBalanceStatus(mnemonicData.address)\r\n      if (balanceData) {\r\n        reducers.user.setAuthData({\r\n          name: 'btcMnemonicData',\r\n          data: {\r\n            //@\r\n            ...balanceData,\r\n            isBalanceFetched: true,\r\n          },\r\n        })\r\n      } else {\r\n        reducers.user.setBalanceError({ name: 'btcMnemonicData' })\r\n      }\r\n      resolve(true)\r\n    })\r\n  }\r\n\r\n  return privateKey\r\n}\r\n\r\n\r\nconst getTxRouter = (txId) => `/btc/tx/${txId}`\r\n\r\nconst getTx = (txRaw) => {\r\n  if (txRaw\r\n    && txRaw.getId\r\n    //@\r\n    && txRaw.getId instanceof 'function'\r\n  ) {\r\n    return txRaw.getId()\r\n  } else {\r\n    return txRaw\r\n  }\r\n}\r\n\r\n\r\nconst getLinkToInfo = (tx) => {\r\n\r\n  if (!tx) {\r\n    return\r\n  }\r\n\r\n  return `${config.link.bitpay}/tx/${tx}`\r\n}\r\n\r\nconst fetchBalanceStatus = (address) => {\r\n  return new Promise((resolve) => {\r\n    bitcoinUtils.fetchBalance({\r\n      address,\r\n      withUnconfirmed: true,\r\n      NETWORK,\r\n    }).then((answer) => {\r\n      // @\r\n      const { balance, unconfirmed } = answer\r\n      resolve({\r\n        address,\r\n        balance: balance,\r\n        unconfirmedBalance: unconfirmed,\r\n      })\r\n    }).catch((e) => {\r\n      resolve(false)\r\n    })\r\n  })\r\n}\r\n\r\nconst getBalance = () => {\r\n  const {\r\n    user: {\r\n      btcData: {\r\n        address,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  return new Promise((resolve) => {\r\n    bitcoinUtils.fetchBalance({\r\n      address,\r\n      withUnconfirmed: true,\r\n      NETWORK,\r\n    }).then((answer) => {\r\n      // @\r\n      const { balance, unconfirmed } = answer\r\n      reducers.user.setBalance({\r\n        name: 'btcData',\r\n        amount: balance,\r\n        unconfirmedBalance: unconfirmed,\r\n      })\r\n      resolve(balance)\r\n    }).catch((e) => {\r\n      reducers.user.setBalanceError({ name: 'btcData' })\r\n      resolve(-1)\r\n    })\r\n  })\r\n}\r\n\r\n\r\nconst fetchBalance = (address) => bitcoinUtils.fetchBalance({\r\n  address,\r\n  withUnconfirmed: false,\r\n  NETWORK,\r\n})\r\n\r\n\r\nconst fetchTxRaw = (txId, cacheResponse) => bitcoinUtils.fetchTxRaw({\r\n  txId,\r\n  cacheResponse,\r\n  NETWORK,\r\n})\r\n\r\nconst fetchTx = (hash, cacheResponse) => bitcoinUtils.fetchTx({\r\n  hash,\r\n  NETWORK,\r\n  cacheResponse,\r\n})\r\n\r\nconst fetchTxInfo = (hash, cacheResponse) => bitcoinUtils.fetchTxInfo({\r\n  hash,\r\n  NETWORK,\r\n  cacheResponse,\r\n  hasAdminFee,\r\n})\r\n\r\n\r\nconst getInvoices = (address) => {\r\n  const { user: { btcData: { userAddress } } } = getState()\r\n\r\n  address = address || userAddress\r\n\r\n  return actions.invoices.getInvoices({\r\n    currency: 'BTC',\r\n    address,\r\n  })\r\n}\r\n\r\nconst getAllMyAddresses = () => {\r\n  const {\r\n    user: {\r\n      btcData,\r\n      btcMnemonicData,\r\n      btcMultisigSMSData,\r\n      btcMultisigUserData,\r\n      btcMultisigG2FAData,\r\n      btcMultisigPinData,\r\n    },\r\n  } = getState()\r\n\r\n  const retData = []\r\n  // Проверяем, был ли sweep\r\n  if (btcMnemonicData\r\n    && btcMnemonicData.address\r\n    && btcData\r\n    && btcData.address\r\n    && btcMnemonicData.address !== btcData.address\r\n  ) {\r\n    retData.push(btcMnemonicData.address.toLowerCase())\r\n  }\r\n\r\n  retData.push(btcData.address.toLowerCase())\r\n\r\n  if (btcMultisigSMSData && btcMultisigSMSData.address) retData.push(btcMultisigSMSData.address.toLowerCase())\r\n  // @ToDo - SMS MultiWallet\r\n\r\n  if (btcMultisigUserData && btcMultisigUserData.address) retData.push(btcMultisigUserData.address.toLowerCase())\r\n  if (btcMultisigUserData && btcMultisigUserData.wallets && btcMultisigUserData.wallets.length) {\r\n    btcMultisigUserData.wallets.map((wallet) => {\r\n      retData.push(wallet.address.toLowerCase())\r\n    })\r\n  }\r\n\r\n  if (btcMultisigPinData && btcMultisigPinData.address) retData.push(btcMultisigPinData.address.toLowerCase())\r\n\r\n  return retData\r\n}\r\n\r\nconst getDataByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      btcData,\r\n      btcMnemonicData,\r\n      btcMultisigSMSData,\r\n      btcMultisigUserData,\r\n      btcMultisigG2FAData,\r\n    },\r\n  } = getState()\r\n\r\n  const founded = [\r\n    btcData,\r\n    btcMnemonicData,\r\n    btcMultisigSMSData,\r\n    btcMultisigUserData,\r\n    ...(\r\n      btcMultisigUserData\r\n      && btcMultisigUserData.wallets\r\n      && btcMultisigUserData.wallets.length\r\n    )\r\n      ? btcMultisigUserData.wallets\r\n      : [],\r\n    btcMultisigG2FAData,\r\n  ].filter(data => data && data.address && data.address.toLowerCase() === address.toLowerCase())\r\n\r\n  return (founded.length) ? founded[0] : false\r\n}\r\n\r\nconst getTransaction = (ownAddress: string = ``, ownType: string = ``) => {\r\n  const myAllWallets = getAllMyAddresses()\r\n\r\n  let { user: { btcData: { address: userAddress } } } = getState()\r\n  const address = ownAddress || userAddress\r\n\r\n  const type = (ownType) || 'btc'\r\n\r\n  if (!typeforce.isCoinAddress.BTC(address)) {\r\n    return new Promise((resolve) => { resolve([]) })\r\n  }\r\n  return bitcoinUtils.getTransactionBlocyper({\r\n    address,\r\n    ownType: type,\r\n    myWallets: myAllWallets,\r\n    network: btc.network,\r\n    NETWORK,\r\n  })\r\n}\r\n\r\nconst addressIsCorrect = (address) => {\r\n  try {\r\n    let outputScript = bitcoin.address.toOutputScript(address, btc.network)\r\n    if (outputScript) return true\r\n  } catch (e) {}\r\n  return false\r\n}\r\n\r\n\r\nconst send = ({ from, to, amount, feeValue = null, speed }) => {\r\n  console.log('>>> send', from, to, amount, feeValue, speed)\r\n  return new Promise(async (ready, reject) => {\r\n    try {\r\n      let privateKey = null\r\n      try {\r\n        privateKey = getPrivateKeyByAddress(from)\r\n      } catch (ePrivateKey) {\r\n        reject({ message: `Fail get data for send address` + ePrivateKey.message })\r\n        return\r\n      }\r\n\r\n      const keyPair = bitcoin.ECPair.fromWIF(privateKey, btc.network)\r\n\r\n      // fee - from amount - percent\r\n      let feeFromAmount: number | BigNumber = new BigNumber(0)\r\n\r\n      if (hasAdminFee) {\r\n        const {\r\n          fee: adminFee,\r\n          min: adminFeeMinValue,\r\n        } = config.opts.fee.btc\r\n\r\n        const adminFeeMin = new BigNumber(adminFeeMinValue)\r\n\r\n        feeFromAmount = new BigNumber(adminFee).dividedBy(100).multipliedBy(amount)\r\n        if (adminFeeMin.isGreaterThan(feeFromAmount)) feeFromAmount = adminFeeMin\r\n\r\n        feeFromAmount = feeFromAmount.multipliedBy(1e8).integerValue() // Admin fee in satoshi\r\n      }\r\n      feeFromAmount = feeFromAmount.toNumber()\r\n\r\n      try {\r\n        feeValue = feeValue || await btc.estimateFeeValue({ inSatoshis: true, speed, amount})\r\n      } catch (eFee) {\r\n        reject({ message: `Fail estimate fee ` + eFee.message })\r\n        return\r\n      }\r\n\r\n      let unspents = []\r\n      try {\r\n        unspents = await fetchUnspents(from)\r\n      } catch (eUnspents) {\r\n        reject({ message: `Fail get unspents `+ eUnspents.message})\r\n        return\r\n      }\r\n      unspents = await prepareUnspents({ unspents, amount })\r\n      const fundValue = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n      const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n      const residue = totalUnspent - fundValue - feeValue - feeFromAmount\r\n      const psbt = new bitcoin.Psbt({ network: btc.network })\r\n\r\n      // add main output for recipient\r\n      psbt.addOutput({\r\n        address: to,\r\n        value: fundValue,\r\n      })\r\n      // if we have residue wich more then DUST value\r\n      // then return this value to the sender wallet\r\n      if (residue > 546) {\r\n        psbt.addOutput({\r\n          address: from,\r\n          value: residue\r\n        })\r\n      }\r\n\r\n      if (hasAdminFee) {\r\n        try {\r\n          psbt.addOutput({\r\n            address: hasAdminFee.address,\r\n            value: feeFromAmount,\r\n          })\r\n        } catch (eAdminFee) {\r\n          reject({ message: `Fail add service fee` + eAdminFee.message })\r\n          return\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < unspents.length; i++) {\r\n        const { txid, vout } = unspents[i]\r\n        let rawTx = false\r\n\r\n        try {\r\n          rawTx = await fetchTxRaw(txid, false)\r\n        } catch (eFetchTxRaw) {\r\n          reject({ message: `Fail fetch tx raw `+ txid + `(`+eFetchTxRaw.message+`)` })\r\n          return\r\n        }\r\n\r\n        psbt.addInput({\r\n          hash: txid,\r\n          index: vout,\r\n          //@\r\n          nonWitnessUtxo: Buffer.from(rawTx, 'hex'),\r\n        })\r\n      }\r\n\r\n      psbt.signAllInputs(keyPair)\r\n      psbt.finalizeAllInputs()\r\n\r\n      const rawTx = psbt.extractTransaction().toHex();\r\n\r\n      try {\r\n        const broadcastAnswer = await broadcastTx(rawTx)\r\n\r\n        const { txid } = broadcastAnswer\r\n        ready(txid)\r\n      } catch (eBroadcast) {\r\n        reject({ message: `Fail broadcast TX: `+eBroadcast })\r\n      }\r\n    } catch (error) {\r\n      console.log('Actions - btc - send: ', error)\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\nconst sendTransaction = async ({ to, amount }) => {\r\n  // from main btc wallet\r\n\r\n  const { user: { btcData: { address } } } = getState()\r\n\r\n  if (false) { // fake tx - turboswaps debug\r\n    const txHash = '1324154f6086b6b137be8763f43096cacd5450f9561da061161638ed68ce39c3'\r\n    return txHash\r\n  }\r\n\r\n  const txHash = await send({\r\n    from: address,\r\n    to,\r\n    amount,\r\n    speed: 'fast',\r\n  })\r\n\r\n  return txHash\r\n}\r\n\r\nconst prepareUnspents = ({ amount, unspents }) => bitcoinUtils.prepareUnspents({\r\n  amount,\r\n  unspents,\r\n  NETWORK,\r\n})\r\n\r\nwindow.prepareUnspents = prepareUnspents\r\nconst fetchUnspents = (address) => bitcoinUtils.fetchUnspents({\r\n  address,\r\n  NETWORK,\r\n})\r\n\r\nconst broadcastTx = (txRaw) => bitcoinUtils.broadcastTx({\r\n  txRaw,\r\n  NETWORK,\r\n})\r\n\r\nconst signMessage = (message, encodedPrivateKey) => {\r\n  const keyPair = bitcoin.ECPair.fromWIF(encodedPrivateKey, [bitcoin.networks.bitcoin, bitcoin.networks.testnet])\r\n  const privateKeyBuff = Buffer.from(keyPair.privateKey)\r\n\r\n  const signature = bitcoinMessage.sign(message, privateKeyBuff, keyPair.compressed)\r\n\r\n  return signature.toString('base64')\r\n}\r\n\r\nconst getReputation = () => Promise.resolve(0)\r\n\r\nconst checkWithdraw = (scriptAddress) => bitcoinUtils.checkWithdraw({\r\n  scriptAddress,\r\n  NETWORK,\r\n})\r\n\r\n\r\nexport default {\r\n  login,\r\n  checkWithdraw,\r\n  getBalance,\r\n  getTransaction,\r\n  send,\r\n  sendTransaction,\r\n  fetchUnspents,\r\n  broadcastTx,\r\n  fetchTx,\r\n  fetchTxInfo,\r\n  fetchBalance,\r\n  signMessage,\r\n  getReputation,\r\n  getTx,\r\n  getLinkToInfo,\r\n  getInvoices,\r\n  getWalletByWords,\r\n  getRandomMnemonicWords,\r\n  validateMnemonicWords,\r\n  sweepToMnemonic,\r\n  isSweeped,\r\n  getSweepAddress,\r\n  getAllMyAddresses,\r\n  getDataByAddress,\r\n  getMainPublicKey,\r\n  getTxRouter,\r\n  fetchTxRaw,\r\n  addressIsCorrect,\r\n  convertMnemonicToValid,\r\n  prepareUnspents,\r\n}\r\n"]}]}