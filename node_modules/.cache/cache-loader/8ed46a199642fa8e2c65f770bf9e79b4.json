{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\utils\\mnemonic.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\utils\\mnemonic.ts","mtime":1614851389097},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8gQHRzLW5vY2hlY2sKaW1wb3J0ICogYXMgYml0Y29pbiBmcm9tICdiaXRjb2luanMtbGliJzsKaW1wb3J0ICogYXMgYmlwMzIgZnJvbSAnYmlwMzInOwppbXBvcnQgeyBoZGtleSB9IGZyb20gJ2V0aGVyZXVtanMtd2FsbGV0JzsKaW1wb3J0ICogYXMgYmlwMzkgZnJvbSAnYmlwMzknOwoKdmFyIGNvbnZlcnRNbmVtb25pY1RvVmFsaWQgPSBmdW5jdGlvbiBjb252ZXJ0TW5lbW9uaWNUb1ZhbGlkKG1uZW1vbmljKSB7CiAgcmV0dXJuIG1uZW1vbmljLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnNwbGl0KCIgIikuZmlsdGVyKGZ1bmN0aW9uICh3b3JkKSB7CiAgICByZXR1cm4gd29yZDsKICB9KS5qb2luKCIgIik7Cn07Cgp2YXIgZ2V0QnRjV2FsbGV0ID0gZnVuY3Rpb24gZ2V0QnRjV2FsbGV0KG5ldHdvcmssIG1uZW1vbmljKSB7CiAgdmFyIHdhbGxldE51bWJlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDsKICB2YXIgcGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogIG1uZW1vbmljID0gY29udmVydE1uZW1vbmljVG9WYWxpZChtbmVtb25pYyk7CiAgdmFyIHNlZWQgPSBiaXAzOS5tbmVtb25pY1RvU2VlZFN5bmMobW5lbW9uaWMpOwogIHZhciByb290ID0gYmlwMzIuZnJvbVNlZWQoc2VlZCwgbmV0d29yayk7CiAgdmFyIG5vZGUgPSByb290LmRlcml2ZVBhdGgocGF0aCA/IHBhdGggOiAibS80NCcvMCcvMCcvMC8iLmNvbmNhdCh3YWxsZXROdW1iZXIpKTsKICB2YXIgYWNjb3VudCA9IGJpdGNvaW4ucGF5bWVudHMucDJwa2goewogICAgcHVia2V5OiBub2RlLnB1YmxpY0tleSwKICAgIG5ldHdvcms6IG5ldHdvcmsKICB9KTsKICByZXR1cm4gewogICAgbW5lbW9uaWM6IG1uZW1vbmljLAogICAgYWRkcmVzczogYWNjb3VudC5hZGRyZXNzLAogICAgLy9ACiAgICBwdWJsaWNLZXk6IG5vZGUucHVibGljS2V5LnRvU3RyaW5nKCdIZXgnKSwKICAgIFdJRjogbm9kZS50b1dJRigpLAogICAgbm9kZTogbm9kZSwKICAgIGFjY291bnQ6IGFjY291bnQKICB9Owp9OwoKdmFyIGdldEV0aFdhbGxldCA9IGZ1bmN0aW9uIGdldEV0aFdhbGxldChuZXR3b3JrLCBtbmVtb25pYykgewogIHZhciB3YWxsZXROdW1iZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7CiAgdmFyIHBhdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IHVuZGVmaW5lZDsKICBtbmVtb25pYyA9IGNvbnZlcnRNbmVtb25pY1RvVmFsaWQobW5lbW9uaWMpOwogIHZhciBzZWVkID0gYmlwMzkubW5lbW9uaWNUb1NlZWRTeW5jKG1uZW1vbmljKTsKICB2YXIgaGR3YWxsZXQgPSBoZGtleS5mcm9tTWFzdGVyU2VlZChzZWVkKTsKICB2YXIgd2FsbGV0ID0gaGR3YWxsZXQuZGVyaXZlUGF0aChwYXRoIHx8ICJtLzQ0Jy82MCcvMCcvMC8iLmNvbmNhdCh3YWxsZXROdW1iZXIpKS5nZXRXYWxsZXQoKTsKICByZXR1cm4gewogICAgbW5lbW9uaWM6IG1uZW1vbmljLAogICAgLy9ACiAgICBhZGRyZXNzOiAiMHgiLmNvbmNhdCh3YWxsZXQuZ2V0QWRkcmVzcygpLnRvU3RyaW5nKCdIZXgnKSksCiAgICAvL0AKICAgIHB1YmxpY0tleTogIjB4Ii5jb25jYXQod2FsbGV0LnB1YktleS50b1N0cmluZygnSGV4JykpLAogICAgLy9ACiAgICBwcml2YXRlS2V5OiAiMHgiLmNvbmNhdCh3YWxsZXQucHJpdktleS50b1N0cmluZygnSGV4JykpLAogICAgd2FsbGV0OiB3YWxsZXQKICB9Owp9OwoKdmFyIGdldEdob3N0V2FsbGV0ID0gZnVuY3Rpb24gZ2V0R2hvc3RXYWxsZXQobmV0d29yaywgbW5lbW9uaWMpIHsKICB2YXIgd2FsbGV0TnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwOwogIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiB1bmRlZmluZWQ7CiAgdmFyIHNlZWQgPSBiaXAzOS5tbmVtb25pY1RvU2VlZFN5bmMobW5lbW9uaWMpOwogIHZhciByb290ID0gYmlwMzIuZnJvbVNlZWQoc2VlZCwgbmV0d29yayk7CiAgdmFyIG5vZGUgPSByb290LmRlcml2ZVBhdGgocGF0aCB8fCAibS80NCcvMCcvMCcvMC8iLmNvbmNhdCh3YWxsZXROdW1iZXIpKTsKICB2YXIgYWNjb3VudCA9IGJpdGNvaW4ucGF5bWVudHMucDJwa2goewogICAgcHVia2V5OiBub2RlLnB1YmxpY0tleSwKICAgIG5ldHdvcms6IG5ldHdvcmsKICB9KTsKICByZXR1cm4gewogICAgbW5lbW9uaWM6IG1uZW1vbmljLAogICAgYWRkcmVzczogYWNjb3VudC5hZGRyZXNzLAogICAgLy9ACiAgICBwdWJsaWNLZXk6IG5vZGUucHVibGljS2V5LnRvU3RyaW5nKCdIZXgnKSwKICAgIFdJRjogbm9kZS50b1dJRigpLAogICAgbm9kZTogbm9kZSwKICAgIGFjY291bnQ6IGFjY291bnQKICB9Owp9OwoKdmFyIGdldE5leHRXYWxsZXQgPSBmdW5jdGlvbiBnZXROZXh0V2FsbGV0KG5ldHdvcmssIG1uZW1vbmljKSB7CiAgdmFyIHdhbGxldE51bWJlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDsKICB2YXIgcGF0aCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogIHZhciBzZWVkID0gYmlwMzkubW5lbW9uaWNUb1NlZWRTeW5jKG1uZW1vbmljKTsKICB2YXIgcm9vdCA9IGJpcDMyLmZyb21TZWVkKHNlZWQsIG5ldHdvcmspOwogIHZhciBub2RlID0gcm9vdC5kZXJpdmVQYXRoKHBhdGggfHwgIm0vNDQnLzcwNycvMCcvMC8iLmNvbmNhdCh3YWxsZXROdW1iZXIpKTsKICB2YXIgYWNjb3VudCA9IGJpdGNvaW4ucGF5bWVudHMucDJwa2goewogICAgcHVia2V5OiBub2RlLnB1YmxpY0tleSwKICAgIG5ldHdvcms6IG5ldHdvcmsKICB9KTsKICByZXR1cm4gewogICAgbW5lbW9uaWM6IG1uZW1vbmljLAogICAgYWRkcmVzczogYWNjb3VudC5hZGRyZXNzLAogICAgLy9ACiAgICBwdWJsaWNLZXk6IG5vZGUucHVibGljS2V5LnRvU3RyaW5nKCdIZXgnKSwKICAgIFdJRjogbm9kZS50b1dJRigpLAogICAgbm9kZTogbm9kZSwKICAgIGFjY291bnQ6IGFjY291bnQKICB9Owp9OwoKdmFyIG1uZW1vbmljSXNWYWxpZCA9IGZ1bmN0aW9uIG1uZW1vbmljSXNWYWxpZChtbmVtb25pYykgewogIHJldHVybiBiaXAzOS52YWxpZGF0ZU1uZW1vbmljKGNvbnZlcnRNbmVtb25pY1RvVmFsaWQobW5lbW9uaWMpKTsKfTsKCnZhciBmb3JDb2luID0gewogIEJUQzogZ2V0QnRjV2FsbGV0LAogIEVUSDogZ2V0RXRoV2FsbGV0LAogIEdIT1NUOiBnZXRHaG9zdFdhbGxldCwKICBORVhUOiBnZXROZXh0V2FsbGV0Cn07CmV4cG9ydCB7IG1uZW1vbmljSXNWYWxpZCwgY29udmVydE1uZW1vbmljVG9WYWxpZCwgZ2V0QnRjV2FsbGV0LCBnZXRFdGhXYWxsZXQsIGdldEdob3N0V2FsbGV0LCBnZXROZXh0V2FsbGV0LCBmb3JDb2luIH07"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/utils/mnemonic.ts"],"names":["bitcoin","bip32","hdkey","bip39","convertMnemonicToValid","mnemonic","trim","toLowerCase","split","filter","word","join","getBtcWallet","network","walletNumber","path","seed","mnemonicToSeedSync","root","fromSeed","node","derivePath","account","payments","p2pkh","pubkey","publicKey","address","toString","WIF","toWIF","getEthWallet","hdwallet","fromMasterSeed","wallet","getWallet","getAddress","pubKey","privateKey","privKey","getGhostWallet","getNextWallet","mnemonicIsValid","validateMnemonic","forCoin","BTC","ETH","GHOST","NEXT"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport * as bip32 from 'bip32'\r\nimport { hdkey } from 'ethereumjs-wallet'\r\nimport * as bip39 from 'bip39'\r\n\r\n\r\n\r\nconst convertMnemonicToValid = (mnemonic) => {\r\n  return mnemonic\r\n    .trim()\r\n    .toLowerCase()\r\n    .split(` `)\r\n    .filter((word) => word)\r\n    .join(` `)\r\n}\r\n\r\n\r\nconst getBtcWallet = (network, mnemonic, walletNumber = 0, path) => {\r\n  mnemonic = convertMnemonicToValid(mnemonic)\r\n  const seed = bip39.mnemonicToSeedSync(mnemonic)\r\n  const root = bip32.fromSeed(seed, network)\r\n  const node = root.derivePath((path) ? path : `m/44'/0'/0'/0/${walletNumber}`)\r\n\r\n  const account = bitcoin.payments.p2pkh({\r\n    pubkey: node.publicKey,\r\n    network: network,\r\n  })\r\n\r\n  return {\r\n    mnemonic,\r\n    address: account.address,\r\n    //@\r\n    publicKey: node.publicKey.toString('Hex'),\r\n    WIF: node.toWIF(),\r\n    node,\r\n    account,\r\n  }\r\n}\r\n\r\nconst getEthWallet = (network, mnemonic, walletNumber = 0, path) => {\r\n  mnemonic = convertMnemonicToValid(mnemonic)\r\n  const seed = bip39.mnemonicToSeedSync(mnemonic)\r\n  const hdwallet = hdkey.fromMasterSeed(seed)\r\n  const wallet = hdwallet.derivePath((path) || `m/44'/60'/0'/0/${walletNumber}`).getWallet()\r\n\r\n  return {\r\n    mnemonic,\r\n    //@\r\n    address: `0x${wallet.getAddress().toString('Hex')}`,\r\n    //@\r\n    publicKey: `0x${wallet.pubKey.toString('Hex')}`,\r\n    //@\r\n    privateKey: `0x${wallet.privKey.toString('Hex')}`,\r\n    wallet,\r\n  }\r\n}\r\n\r\nconst getGhostWallet = (network, mnemonic, walletNumber = 0, path) => {\r\n  const seed = bip39.mnemonicToSeedSync(mnemonic)\r\n  const root = bip32.fromSeed(seed, network)\r\n  const node = root.derivePath((path) || `m/44'/0'/0'/0/${walletNumber}`)\r\n\r\n  const account = bitcoin.payments.p2pkh({\r\n    pubkey: node.publicKey,\r\n    network: network,\r\n  })\r\n\r\n  return {\r\n    mnemonic,\r\n    address: account.address,\r\n    //@\r\n    publicKey: node.publicKey.toString('Hex'),\r\n    WIF: node.toWIF(),\r\n    node,\r\n    account,\r\n  }\r\n}\r\n\r\nconst getNextWallet = (network, mnemonic, walletNumber = 0, path) => {\r\n  const seed = bip39.mnemonicToSeedSync(mnemonic)\r\n  const root = bip32.fromSeed(seed, network)\r\n  const node = root.derivePath((path) || `m/44'/707'/0'/0/${walletNumber}`)\r\n\r\n  const account = bitcoin.payments.p2pkh({\r\n    pubkey: node.publicKey,\r\n    network: network,\r\n  })\r\n\r\n  return {\r\n    mnemonic,\r\n    address: account.address,\r\n    //@\r\n    publicKey: node.publicKey.toString('Hex'),\r\n    WIF: node.toWIF(),\r\n    node,\r\n    account,\r\n  }\r\n}\r\n\r\nconst mnemonicIsValid = (mnemonic:string):boolean => bip39.validateMnemonic(convertMnemonicToValid(mnemonic))\r\n\r\n\r\nconst forCoin = {\r\n  BTC:    getBtcWallet,\r\n  ETH:    getEthWallet,\r\n  GHOST:  getGhostWallet,\r\n  NEXT:   getNextWallet,\r\n}\r\n\r\nexport {\r\n  mnemonicIsValid,\r\n  convertMnemonicToValid,\r\n  getBtcWallet,\r\n  getEthWallet,\r\n  getGhostWallet,\r\n  getNextWallet,\r\n  forCoin,\r\n}"]}]}