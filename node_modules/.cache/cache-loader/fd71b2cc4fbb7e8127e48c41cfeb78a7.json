{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\ghost.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\ghost.ts","mtime":1614852055921},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/ghost.ts"],"names":["BigInteger","BigNumber","bitcoin","bip39","bitcoinMessage","getState","reducers","ghost","apiLooper","constants","actions","typeforce","config","bitcore","require","mnemonicUtils","hasAdminFee","opts","fee","address","min","getRandomMnemonicWords","generateMnemonic","validateMnemonicWords","mnemonic","validateMnemonic","convertMnemonicToValid","sweepToMnemonic","path","wallet","getWalletByWords","localStorage","setItem","privateKeyNames","ghostMnemonic","WIF","getMainPublicKey","ghostData","user","publicKey","toString","isSweeped","ghostMnemonicData","toLowerCase","getSweepAddress","walletNumber","getGhostWallet","network","auth","privateKey","hash","crypto","sha256","d","fromBuffer","keyPair","ECPair","fromWIF","account","payments","p2pkh","pubkey","getPrivateKeyByAddress","oldAddress","mnemonicAddress","mnemonicKey","login","mnemonicKeys","sweepToMnemonicReady","console","info","accData","log","data","isMnemonic","currency","fullName","window","getGhostAddress","getGhostData","setAuthData","name","error","mnemonicData","addWallet","balance","isBalanceFetched","balanceError","infoAboutCurrency","Promise","resolve","fetchBalanceStatus","balanceData","setBalanceError","getTx","txRaw","getId","getTxRouter","txId","getLinkToInfo","tx","link","ghostscan","get","checkStatus","answer","undefined","e","then","unconfirmedBalance","getBalance","inQuery","delay","setBalance","amount","fetchBalance","fetchTx","cacheResponse","fees","rest","multipliedBy","fetchTxRaw","rawtx","fetchTxInfo","vin","vout","senderAddress","addr","value","toNumber","afterBalance","adminFee","adminOutput","filter","out","scriptPubKey","addresses","eq","afterOutput","length","txInfo","receiverAddress","confirmed","confirmations","minerFee","dividedBy","minerFeeCurrency","outputs","map","getInvoices","userAddress","invoices","getAllMyAddresses","ghostMultisigSMSData","ghostMultisigUserData","ghostMultisigG2FAData","ghostMultisigPinData","retData","push","wallets","getDataByAddress","founded","getTransaction","ownType","myAllWallets","type","isCoinAddress","GHOST","url","txs","query","res","transactions","item","direction","isSelf","txid","canEdit","indexOf","currentAddress","date","time","send","sendBitcore","from","to","feeValue","speed","ready","privKey","fetchUnspents","unspents","fundValue","String","integerValue","transaction","Transaction","change","sign","broadcastTx","serialize","broadcastAnswer","result","post","body","signMessage","message","encodedPrivateKey","networks","mainnet","testnet","privateKeyBuff","Buffer","signature","compressed","getReputation","checkWithdraw","scriptAddress","valueOut","ghostCheckWithdraw"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport BigInteger from 'bigi'\r\n\r\nimport { BigNumber } from 'bignumber.js'\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport * as bip32 from 'bip32'\r\nimport * as bip39 from 'bip39'\r\n\r\nimport bitcoinMessage from 'bitcoinjs-message'\r\nimport { getState } from 'redux/core'\r\nimport reducers from 'redux/core/reducers'\r\nimport { ghost, apiLooper, constants, api } from 'helpers'\r\nimport actions from 'redux/actions'\r\nimport typeforce from 'swap.app/util/typeforce'\r\nimport config from 'app-config'\r\nconst bitcore = require('ghost-bitcore-lib');\r\nimport { localisePrefix } from 'helpers/locale'\r\n\r\nimport * as mnemonicUtils from '../../../../common/utils/mnemonic'\r\n\r\n\r\n\r\nconst hasAdminFee = (config\r\n  && config.opts\r\n  && config.opts.fee\r\n  && config.opts.fee.ghost\r\n  && config.opts.fee.ghost.fee\r\n  && config.opts.fee.ghost.address\r\n  && config.opts.fee.ghost.min\r\n) ? config.opts.fee.ghost : false\r\n\r\nconst getRandomMnemonicWords = () => bip39.generateMnemonic()\r\nconst validateMnemonicWords = (mnemonic) => bip39.validateMnemonic(mnemonicUtils.convertMnemonicToValid(mnemonic))\r\n\r\n\r\nconst sweepToMnemonic = (mnemonic, path) => {\r\n  const wallet = getWalletByWords(mnemonic, path)\r\n  localStorage.setItem(constants.privateKeyNames.ghostMnemonic, wallet.WIF)\r\n  return wallet.WIF\r\n}\r\n\r\nconst getMainPublicKey = () => {\r\n  const {\r\n    user: {\r\n      ghostData,\r\n    },\r\n  } = getState()\r\n\r\n  return ghostData.publicKey.toString('Hex')\r\n}\r\n\r\nconst isSweeped = () => {\r\n  const {\r\n    user: {\r\n      ghostData,\r\n      ghostMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (ghostMnemonicData\r\n    && ghostMnemonicData.address\r\n    && ghostData\r\n    && ghostData.address\r\n    && ghostData.address.toLowerCase() !== ghostMnemonicData.address.toLowerCase()\r\n  ) return false\r\n\r\n  return true\r\n}\r\n\r\nconst getSweepAddress = () => {\r\n  const {\r\n    user: {\r\n      ghostMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (ghostMnemonicData && ghostMnemonicData.address) return ghostMnemonicData.address\r\n  return false\r\n}\r\n\r\nconst getWalletByWords = (mnemonic: string, walletNumber: number = 0, path: string = '') => {\r\n  return mnemonicUtils.getGhostWallet(ghost.network, mnemonic, walletNumber, path)\r\n}\r\n\r\n\r\nconst auth = (privateKey) => {\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    const keyPair = bitcoin.ECPair.fromWIF(privateKey, ghost.network)\r\n\r\n    const account = bitcoin.ECPair.fromWIF(privateKey, ghost.network) // eslint-disable-line\r\n    const { address } = bitcoin.payments.p2pkh({ pubkey: account.publicKey, network: ghost.network })\r\n    const { publicKey } = account\r\n\r\n    return {\r\n      account,\r\n      keyPair,\r\n      address,\r\n      privateKey,\r\n      publicKey,\r\n    }\r\n  }\r\n}\r\n\r\nconst getPrivateKeyByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      ghostData: {\r\n        address: oldAddress,\r\n        privateKey,\r\n      }\r\n    },\r\n  } = getState()\r\n  /*\r\n  const ghostMnemonicData\r\n      ghostMnemonicData: {\r\n        address: mnemonicAddress,\r\n        privateKey: mnemonicKey,\r\n      },\r\n    },\r\n  } = getState()\r\n  */\r\n  if (oldAddress === address) return privateKey\r\n    //@\r\n  if (mnemonicAddress === address) return mnemonicKey\r\n}\r\n\r\nconst login = (privateKey, mnemonic = null, mnemonicKeys = null) => {\r\n  let sweepToMnemonicReady = false\r\n\r\n  if (privateKey\r\n    && mnemonic\r\n    && mnemonicKeys\r\n    && mnemonicKeys.ghost === privateKey\r\n  ) sweepToMnemonicReady = true\r\n\r\n  if (!privateKey && mnemonic) sweepToMnemonicReady = true\r\n\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    // keyPair     = bitcoin.ECPair.fromWIF(privateKey, ghost.network)\r\n  }\r\n  else {\r\n    console.info('Created account Ghost ...')\r\n    // keyPair     = bitcoin.ECPair.makeRandom({ network: ghost.network })\r\n    // privateKey  = keyPair.toWIF()\r\n    // use random 12 words\r\n    if (!mnemonic) mnemonic = bip39.generateMnemonic()\r\n\r\n    const accData = getWalletByWords(mnemonic)\r\n    console.log('Ghost. Generated wallet from random 12 words')\r\n    console.log(accData)\r\n    privateKey = accData.WIF\r\n    localStorage.setItem(constants.privateKeyNames.ghostMnemonic, privateKey)\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.ghost, privateKey)\r\n\r\n  const data = {\r\n    ...auth(privateKey),\r\n    isMnemonic: sweepToMnemonicReady,\r\n    currency: 'GHOST',\r\n    fullName: 'ghost',\r\n  }\r\n\r\n  window.getGhostAddress = () => data.address\r\n  window.getGhostData = () => data\r\n\r\n  console.info('Logged in with Ghost', data)\r\n  reducers.user.setAuthData({ name: 'ghostData', data })\r\n  if (!sweepToMnemonicReady) {\r\n    // Auth with our mnemonic account\r\n    if (mnemonic === `-`) {\r\n      console.error('Sweep. Cant auth. Need new mnemonic or enter own for re-login')\r\n      return\r\n    }\r\n\r\n    if (!mnemonicKeys\r\n      || !mnemonicKeys.ghost\r\n    ) {\r\n      console.error('Sweep. Cant auth. Login key undefined')\r\n      return\r\n    }\r\n\r\n    const mnemonicData = {\r\n      ...auth(mnemonicKeys.ghost),\r\n      isMnemonic: true,\r\n    }\r\n    console.info('Logged in with Ghost Mnemonic', mnemonicData)\r\n    reducers.user.addWallet({\r\n      name: 'ghostMnemonicData',\r\n      data: {\r\n        currency: 'GHOST',\r\n        fullName: 'Ghost (New)',\r\n        balance: 0,\r\n        isBalanceFetched: false,\r\n        balanceError: null,\r\n        infoAboutCurrency: null,\r\n        ...mnemonicData,\r\n      },\r\n    })\r\n    new Promise(async (resolve) => {\r\n      const balanceData = await fetchBalanceStatus(mnemonicData.address)\r\n      if (balanceData) {\r\n        reducers.user.setAuthData({\r\n          name: 'ghostMnemonicData',\r\n          data: {\r\n            //@\r\n            ...balanceData,\r\n            isBalanceFetched: true,\r\n          },\r\n        })\r\n      } else {\r\n        reducers.user.setBalanceError({ name: 'ghostMnemonicData' })\r\n      }\r\n      resolve(true)\r\n    })\r\n  }\r\n\r\n  return privateKey\r\n}\r\n\r\n\r\nconst getTx = (txRaw) => {\r\n  if (txRaw\r\n    && txRaw.getId\r\n    //@\r\n    && txRaw.getId instanceof 'function'\r\n  ) {\r\n    return txRaw.getId()\r\n  } else {\r\n    return txRaw\r\n  }\r\n}\r\n\r\nconst getTxRouter = (txId) => `/ghost/tx/${txId}`\r\n\r\nconst getLinkToInfo = (tx) => {\r\n\r\n  if (!tx) {\r\n    return\r\n  }\r\n\r\n  return `${config.link.ghostscan}/tx/${tx}`\r\n}\r\n\r\nconst fetchBalanceStatus = (address) => apiLooper.get('ghostscan', `/addr/${address}`, {\r\n  checkStatus: (answer) => {\r\n    try {\r\n      if (answer && answer.balance !== undefined) return true\r\n    } catch (e) { /* */console.log(e) }\r\n    return false\r\n  },\r\n}).then(({ balance, unconfirmedBalance }) => ({\r\n  address,\r\n  balance,\r\n  unconfirmedBalance,\r\n}))\r\n  .catch((e) => false)\r\nconst getBalance = () => {\r\n  const { user: { ghostData: { address } } } = getState()\r\n\r\n  return apiLooper.get('ghostscan', `/addr/${address}`, {\r\n    inQuery: {\r\n      delay: 500,\r\n      name: `balance`,\r\n    },\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.balance !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n  }).then(({ balance, unconfirmedBalance }) => {\r\n    console.log('GHOST Balance: ', balance)\r\n    console.log('GHOST unconfirmedBalance Balance: ', unconfirmedBalance)\r\n    reducers.user.setBalance({ name: 'ghostData', amount: balance, unconfirmedBalance })\r\n    return balance\r\n  })\r\n    .catch((e) => {\r\n      reducers.user.setBalanceError({ name: 'ghostData' })\r\n    })\r\n}\r\n\r\nconst fetchBalance = (address) =>\r\n  apiLooper.get('ghostscan', `/addr/${address}`, {\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.balance !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n  }).then(({ balance }) => balance)\r\n\r\nconst fetchTx = (hash, cacheResponse) =>\r\n  apiLooper.get('ghostscan', `/tx/${hash}`, {\r\n    cacheResponse,\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.fees !== undefined) return true\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n      return false\r\n    },\r\n  }).then(({ fees, ...rest }): IUniversalObj => ({\r\n    fees: new BigNumber(fees).multipliedBy(1e8),\r\n    ...rest,\r\n  }))\r\n\r\nconst fetchTxRaw = (txId, cacheResponse) =>\r\n  apiLooper.get('ghostscan', `/rawtx/${txId}`, {\r\n    cacheResponse,\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.rawtx !== undefined) return true\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n      return false\r\n    },\r\n  }).then(({ rawtx }) => rawtx)\r\n\r\nconst fetchTxInfo = (hash, cacheResponse?) =>\r\n  fetchTx(hash, cacheResponse)\r\n    .then(({ vin, vout, ...rest }) => {\r\n      const senderAddress = vin ? vin[0].addr : null\r\n      const amount = vout ? new BigNumber(vout[0].value).toNumber() : null\r\n\r\n      let afterBalance = vout && vout[1] ? new BigNumber(vout[1].value).toNumber() : null\r\n      let adminFee: any = false\r\n\r\n      if (hasAdminFee) {\r\n        const adminOutput = vout.filter((out) => (\r\n          out.scriptPubKey.addresses\r\n          && out.scriptPubKey.addresses[0] === hasAdminFee.address\r\n          && !(new BigNumber(out.value).eq(amount))\r\n        ))\r\n\r\n        const afterOutput = vout.filter((out) => (\r\n          out.addresses\r\n          && out.addresses[0] !== hasAdminFee.address\r\n          && out.addresses[0] !== senderAddress\r\n        ))\r\n\r\n        if (afterOutput.length) {\r\n          afterBalance = new BigNumber(afterOutput[0].value).toNumber()\r\n        }\r\n\r\n        if (adminOutput.length) {\r\n          adminFee = new BigNumber(adminOutput[0].value).toNumber()\r\n        }\r\n      }\r\n\r\n      const txInfo = {\r\n        amount,\r\n        afterBalance,\r\n        senderAddress,\r\n        receiverAddress: vout ? vout[0].scriptPubKey.addresses : null,\r\n        confirmed: !!(rest.confirmations),\r\n        minerFee: rest.fees.dividedBy(1e8).toNumber(),\r\n        adminFee,\r\n        minerFeeCurrency: 'GHOST',\r\n        outputs: vout.map((out) => ({\r\n          amount: new BigNumber(out.value).toNumber(),\r\n          address: out.scriptPubKey.addresses || null,\r\n        })),\r\n        ...rest,\r\n      }\r\n\r\n      return txInfo\r\n    })\r\n\r\nconst getInvoices = (address) => {\r\n  const { user: { ghostData: { userAddress } } } = getState()\r\n\r\n  address = address || userAddress\r\n\r\n  return actions.invoices.getInvoices({\r\n    currency: 'GHOST',\r\n    address,\r\n  })\r\n}\r\n\r\nconst getAllMyAddresses = () => {\r\n  const {\r\n    user: {\r\n      ghostData,\r\n      ghostMnemonicData,\r\n      ghostMultisigSMSData,\r\n      ghostMultisigUserData,\r\n      ghostMultisigG2FAData,\r\n      ghostMultisigPinData,\r\n    },\r\n  } = getState()\r\n\r\n  const retData = []\r\n  // Проверяем, был ли sweep\r\n  if (ghostMnemonicData\r\n    && ghostMnemonicData.address\r\n    && ghostData\r\n    && ghostData.address\r\n    && ghostMnemonicData.address !== ghostData.address\r\n  ) {\r\n    retData.push(ghostMnemonicData.address.toLowerCase())\r\n  }\r\n\r\n  retData.push(ghostData.address.toLowerCase())\r\n\r\n  if (ghostMultisigSMSData && ghostMultisigSMSData.address) retData.push(ghostMultisigSMSData.address.toLowerCase())\r\n  // @ToDo - SMS MultiWallet\r\n\r\n  if (ghostMultisigUserData && ghostMultisigUserData.address) retData.push(ghostMultisigUserData.address.toLowerCase())\r\n  if (ghostMultisigUserData && ghostMultisigUserData.wallets && ghostMultisigUserData.wallets.length) {\r\n    ghostMultisigUserData.wallets.map((wallet) => {\r\n      retData.push(wallet.address.toLowerCase())\r\n    })\r\n  }\r\n\r\n  if (ghostMultisigPinData && ghostMultisigPinData.address) retData.push(ghostMultisigPinData.address.toLowerCase())\r\n\r\n  return retData\r\n}\r\n\r\nconst getDataByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      ghostData,\r\n      ghostMnemonicData,\r\n      ghostMultisigSMSData,\r\n      ghostMultisigUserData,\r\n      ghostMultisigG2FAData,\r\n    },\r\n  } = getState()\r\n\r\n  const founded = [\r\n    ghostData,\r\n    ghostMnemonicData,\r\n    ghostMultisigSMSData,\r\n    ghostMultisigUserData,\r\n    ...(\r\n      ghostMultisigUserData\r\n      && ghostMultisigUserData.wallets\r\n      && ghostMultisigUserData.wallets.length\r\n    )\r\n      ? ghostMultisigUserData.wallets\r\n      : [],\r\n    ghostMultisigG2FAData,\r\n  ].filter(data => data && data.address && data.address.toLowerCase() === address.toLowerCase())\r\n\r\n  return (founded.length) ? founded[0] : false\r\n}\r\n\r\nconst getTransaction = (address: string = ``, ownType: string = ``) =>\r\n  new Promise((resolve) => {\r\n    const myAllWallets = getAllMyAddresses()\r\n\r\n    let { user: { ghostData: { address: userAddress } } } = getState()\r\n    address = address || userAddress\r\n\r\n    const type = (ownType) || 'ghost'\r\n\r\n    if (!typeforce.isCoinAddress.GHOST(address)) {\r\n      resolve([])\r\n    }\r\n\r\n    const url = `/txs/?address=${address}`\r\n\r\n    return apiLooper.get('ghostscan', url, {\r\n      checkStatus: (answer) => {\r\n        try {\r\n          if (answer && answer.txs !== undefined) return true\r\n        } catch (e) { /* */ }\r\n        return false\r\n      },\r\n      query: 'ghost_balance',\r\n    }).then((res: any) => {\r\n      const transactions = res.txs.map((item) => {\r\n        const direction = item.vin[0].addr !== address ? 'in' : 'out'\r\n\r\n        const isSelf = direction === 'out'\r\n          && item.vout.filter((item) =>\r\n            item.scriptPubKey.addresses[0] === address\r\n          ).length === item.vout.length\r\n\r\n        return ({\r\n          type,\r\n          hash: item.txid,\r\n          canEdit: (myAllWallets.indexOf(address) !== -1),\r\n          confirmations: item.confirmations,\r\n          value: isSelf\r\n            ? item.fees\r\n            : item.vout.filter((item) => {\r\n              if (!item.scriptPubKey.addresses) return false\r\n              const currentAddress = item.scriptPubKey.addresses[0]\r\n\r\n              return direction === 'in'\r\n                ? (currentAddress === address)\r\n                : (currentAddress !== address)\r\n            })[0].value,\r\n          date: item.time * 1000,\r\n          direction: isSelf ? 'self' : direction,\r\n        })\r\n      })\r\n      resolve(transactions)\r\n    })\r\n      .catch(() => {\r\n        resolve([])\r\n      })\r\n  })\r\n\r\nconst send = (data) => {\r\n  return sendBitcore(data)\r\n}\r\n\r\n//@\r\nconst sendBitcore = ({ from, to, amount, feeValue, speed } = {}) => {\r\n  return new Promise(async (ready) => {\r\n    const privKey = getPrivateKeyByAddress(from)\r\n    const unspents = await fetchUnspents(from)\r\n    const fundValue = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n\r\n    const transaction = new bitcore.Transaction()\r\n          .from(unspents)          // Feed information about what unspent outputs one can use\r\n          .to(to, fundValue)  // Add an output with the given amount of satoshis\r\n          .change(from)      // Sets up a change address where the rest of the funds will go\r\n          .sign(privKey)     // Signs all the inputs it can*/\r\n\r\n\r\n    const broadcastAnswer = await broadcastTx(String(transaction.serialize()))\r\n\r\n    const { txid } = broadcastAnswer\r\n    ready(txid)\r\n  })\r\n}\r\n\r\nconst fetchUnspents = (address) => {\r\n  const result: any = apiLooper.get('ghostscan', `/addr/${address}/utxo`, { cacheResponse: 5000 })\r\n  return result\r\n}\r\n\r\nconst broadcastTx = (txRaw) => {\r\n  const result: any = apiLooper.post('ghostscan', `/tx/send`, {\r\n    body: {\r\n      rawtx: txRaw,\r\n    },\r\n  })\r\n  return result\r\n}\r\n\r\nconst signMessage = (message, encodedPrivateKey) => {\r\n  const keyPair = bitcoin.ECPair.fromWIF(encodedPrivateKey, [ghost.networks.mainnet, ghost.networks.testnet])\r\n  const privateKeyBuff = Buffer.from(keyPair.privateKey)\r\n\r\n  const signature = bitcoinMessage.sign(message, privateKeyBuff, keyPair.compressed)\r\n\r\n  return signature.toString('base64')\r\n}\r\n\r\nconst getReputation = () => Promise.resolve(0)\r\n\r\nwindow.getMainPublicKey = getMainPublicKey\r\n\r\n/*\r\n  Проверяет списание со скрипта - последняя транзакция выхода\r\n  Возвращает txId, адресс и сумму\r\n*/\r\nconst checkWithdraw = (scriptAddress) => {\r\n  const url = `/txs/?address=${scriptAddress}`\r\n\r\n  return apiLooper.get('ghostscan', url, {\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.txs !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n    query: 'ghost_balance',\r\n  }).then((res: any) => {\r\n    if (res.txs.length > 1\r\n      && res.txs[0].vout.length\r\n    ) {\r\n      const address = res.txs[0].vout[0].scriptPubKey.addresses[0]\r\n      const {\r\n        txid,\r\n        valueOut: amount,\r\n      } = res.txs[0]\r\n      return {\r\n        address,\r\n        txid,\r\n        amount,\r\n      }\r\n    }\r\n    return false\r\n  })\r\n}\r\n\r\nwindow.ghostCheckWithdraw = checkWithdraw\r\n\r\nexport default {\r\n  login,\r\n  checkWithdraw,\r\n  getBalance,\r\n  getTransaction,\r\n  send,\r\n  fetchUnspents,\r\n  broadcastTx,\r\n  fetchTx,\r\n  fetchTxInfo,\r\n  fetchBalance,\r\n  signMessage,\r\n  getReputation,\r\n  getTx,\r\n  getLinkToInfo,\r\n  getInvoices,\r\n  getWalletByWords,\r\n  getRandomMnemonicWords,\r\n  validateMnemonicWords,\r\n  sweepToMnemonic,\r\n  isSweeped,\r\n  getSweepAddress,\r\n  getAllMyAddresses,\r\n  getDataByAddress,\r\n  getMainPublicKey,\r\n  getTxRouter,\r\n  fetchTxRaw,\r\n}\r\n"]}]}