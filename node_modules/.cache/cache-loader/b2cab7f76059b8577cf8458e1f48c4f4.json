{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\next.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\next.ts","mtime":1614842913753},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFN3YXBBcHAgZnJvbSAnc3dhcC5hcHAnOwppbXBvcnQgKiBhcyBtbmVtb25pY1V0aWxzIGZyb20gJy4uLy4uL2NvbW1vbi91dGlscy9tbmVtb25pYyc7Cgp2YXIgbG9naW5NbmVtb25pYyA9IGZ1bmN0aW9uIGxvZ2luTW5lbW9uaWMobW5lbW9uaWMpIHsKICB2YXIgd2FsbGV0TnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgdmFyIGFwcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogIHZhciBuZXR3b3JrID0gYXBwLmlzTWFpbk5ldCgpID8gYXBwLmVudi5jb2luaW5mby5uZXh0Lm1haW4gOiBhcHAuZW52LmNvaW5pbmZvLm5leHQudGVzdDsKICB2YXIgd2FsbGV0ID0gbW5lbW9uaWNVdGlscy5nZXROZXh0V2FsbGV0KG5ldHdvcmssIG1uZW1vbmljLCB3YWxsZXROdW1iZXIsIHBhdGgpOwogIHJldHVybiBsb2dpbih3YWxsZXQuV0lGLCBhcHApOwp9OwoKdmFyIGxvZ2luID0gZnVuY3Rpb24gbG9naW4oX3ByaXZhdGVLZXksIGFwcCkgewogIFN3YXBBcHAucmVxdWlyZWQoYXBwKTsKICB2YXIgc3RvcmFnZUtleSA9ICIiLmNvbmNhdChhcHAubmV0d29yaywgIjpuZXh0OnByaXZhdGVLZXkiKTsKCiAgdmFyIHByaXZhdGVLZXkgPSBfcHJpdmF0ZUtleSB8fCBhcHAuZW52LnN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KTsKCiAgdmFyIGFjY291bnQ7CiAgdmFyIG5ldHdvcmsgPSBhcHAuaXNNYWluTmV0KCkgPyBhcHAuZW52LmNvaW5pbmZvLm5leHQubWFpbiA6IGFwcC5lbnYuY29pbmluZm8ubmV4dC50ZXN0OwoKICBpZiAoIXByaXZhdGVLZXkpIHsKICAgIHByaXZhdGVLZXkgPSBhcHAuZW52LmJpdGNvaW4uRUNQYWlyLm1ha2VSYW5kb20oewogICAgICBuZXR3b3JrOiBuZXR3b3JrCiAgICB9KS50b1dJRigpOwogIH0KCiAgYWNjb3VudCA9IG5ldyBhcHAuZW52LmJpdGNvaW4uRUNQYWlyLmZyb21XSUYocHJpdmF0ZUtleSwgbmV0d29yayk7CgogIHZhciBfYXBwJGVudiRiaXRjb2luJHBheW0gPSBhcHAuZW52LmJpdGNvaW4ucGF5bWVudHMucDJwa2goewogICAgcHVia2V5OiBhY2NvdW50LnB1YmxpY0tleSwKICAgIG5ldHdvcms6IG5ldHdvcmsKICB9KSwKICAgICAgYWRkcmVzcyA9IF9hcHAkZW52JGJpdGNvaW4kcGF5bS5hZGRyZXNzOwoKICB2YXIgX2FjY291bnQgPSBhY2NvdW50LAogICAgICBwdWJsaWNLZXkgPSBfYWNjb3VudC5wdWJsaWNLZXk7CgogIGFjY291bnQuZ2V0UHVibGljS2V5ID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHB1YmxpY0tleS50b1N0cmluZygnaGV4Jyk7CiAgfTsKCiAgYWNjb3VudC5nZXRQdWJsaWNLZXlCdWZmZXIgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gcHVibGljS2V5OwogIH07CgogIGFjY291bnQuZ2V0UHJpdmF0ZUtleSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBwcml2YXRlS2V5OwogIH07CgogIGFjY291bnQuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBhZGRyZXNzOwogIH07CgogIGlmICghX3ByaXZhdGVLZXkpIHsKICAgIGFwcC5lbnYuc3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIHByaXZhdGVLZXkpOwogIH0KCiAgcmV0dXJuIGFjY291bnQ7Cn07Cgp2YXIgZ2V0UHVibGljRGF0YSA9IGZ1bmN0aW9uIGdldFB1YmxpY0RhdGEoYWNjb3VudCkgewogIHJldHVybiB7CiAgICBhZGRyZXNzOiBhY2NvdW50LmdldEFkZHJlc3MoKSwKICAgIHB1YmxpY0tleTogYWNjb3VudC5nZXRQdWJsaWNLZXkoKQogIH07Cn07CgpleHBvcnQgZGVmYXVsdCB7CiAgbG9naW46IGxvZ2luLAogIGxvZ2luTW5lbW9uaWM6IGxvZ2luTW5lbW9uaWMsCiAgZ2V0UHVibGljRGF0YTogZ2V0UHVibGljRGF0YQp9Ow=="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.auth/next.ts"],"names":["SwapApp","mnemonicUtils","loginMnemonic","mnemonic","walletNumber","path","app","network","isMainNet","env","coininfo","next","main","test","wallet","getNextWallet","login","WIF","_privateKey","required","storageKey","privateKey","storage","getItem","account","bitcoin","ECPair","makeRandom","toWIF","fromWIF","payments","p2pkh","pubkey","publicKey","address","getPublicKey","toString","getPublicKeyBuffer","getPrivateKey","getAddress","setItem","getPublicData"],"mappings":"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","sourcesContent":["import SwapApp from 'swap.app'\r\nimport * as mnemonicUtils from '../../common/utils/mnemonic'\r\n\r\n\r\nconst loginMnemonic = (mnemonic, walletNumber=0, path, app) => {\r\n  const network = (\r\n    app.isMainNet()\r\n      ? app.env.coininfo.next.main\r\n      : app.env.coininfo.next.test\r\n  )\r\n\r\n  const wallet = mnemonicUtils.getNextWallet(network, mnemonic, walletNumber, path)\r\n  return login(wallet.WIF, app)\r\n}\r\n\r\nconst login = (_privateKey, app) => {\r\n  SwapApp.required(app)\r\n\r\n  const storageKey = `${app.network}:next:privateKey`\r\n  let privateKey = _privateKey || app.env.storage.getItem(storageKey)\r\n\r\n  let account\r\n\r\n  const network = (\r\n    app.isMainNet()\r\n      ? app.env.coininfo.next.main\r\n      : app.env.coininfo.next.test\r\n  )\r\n\r\n  if (!privateKey) {\r\n    privateKey = app.env.bitcoin.ECPair.makeRandom({ network }).toWIF()\r\n  }\r\n\r\n  account = new app.env.bitcoin.ECPair.fromWIF(privateKey, network)\r\n\r\n  const { address } = app.env.bitcoin.payments.p2pkh({\r\n    pubkey: account.publicKey,\r\n    network\r\n  })\r\n\r\n  const { publicKey } = account\r\n\r\n  account.getPublicKey = () => publicKey.toString('hex')\r\n  account.getPublicKeyBuffer = () => publicKey\r\n  account.getPrivateKey = () => privateKey\r\n  account.getAddress = () => address\r\n\r\n  if (!_privateKey) {\r\n    app.env.storage.setItem(storageKey, privateKey)\r\n  }\r\n\r\n  return account\r\n}\r\n\r\n\r\nconst getPublicData = (account) => ({\r\n  address: account.getAddress(),\r\n  publicKey: account.getPublicKey(),\r\n})\r\n\r\n\r\nexport default {\r\n  login,\r\n  loginMnemonic,\r\n  getPublicData,\r\n}\r\n"]}]}