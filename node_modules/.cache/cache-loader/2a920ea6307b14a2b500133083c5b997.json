{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\helpers\\ghost.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\helpers\\ghost.ts","mtime":1614850469185},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/helpers/ghost.ts"],"names":["getState","actions","config","constants","request","BigNumber","networks","mainnet","messagePrefix","bech32","bip32","pubKeyHash","scriptHash","wif","testnet","hasAdminFee","opts","fee","ghost","network","process","env","MAINNET","DUST","getByteCount","inputs","outputs","totalWeight","hasWitness","inputCount","outputCount","types","checkUInt53","n","Number","MAX_SAFE_INTEGER","RangeError","varIntLength","number","Object","keys","forEach","key","slice","keyParts","split","length","Error","newKey","mAndN","map","item","parseInt","multiplyer","indexOf","Math","ceil","calculateTxSize","speed","unspents","address","txOut","method","fixed","defaultTxSize","defaultFeeRates","size","fetchUnspents","txIn","txSize","msuSize","msutxSize","msSize","mstxSize","estimateFeeValue","options","feeRate","inSatoshis","user","ghostData","ghostMultisigSMSData","ghostMultisigUserData","ghostMultisigSMS","estimateFeeRate","calculatedFeeValue","maximum","multipliedBy","div","dp","ROUND_HALF_EVEN","CUSTOM_SATOSHI","plus","finalFeeValue","toString","console","log","link","feeRates","defaultRate","rate","get","cacheResponse","apiResult","error","message","apiSpeeds","slow","normal","fast","apiSpeed","apiRate","isGreaterThanOrEqualTo"],"mappings":";;AAAA;AAEA,SAASA,QAAT,QAAyB,YAAzB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAGA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aAAa,EAAE,+BADR;AAEPC,IAAAA,MAAM,EAAE,IAFD;AAGPC,IAAAA,KAAK,EAAE;AACL,gBAAS,UADJ;AAEL,iBAAS;AAFJ,KAHA;AAOPC,IAAAA,UAAU,EAAE,IAPL;AAQPC,IAAAA,UAAU,EAAE,IARL;AASPC,IAAAA,GAAG,EAAE;AATE,GADM;AAYfC,EAAAA,OAAO,EAAE;AACPN,IAAAA,aAAa,EAAE,+BADR;AAEPC,IAAAA,MAAM,EAAE,QAFD;AAGPC,IAAAA,KAAK,EAAE;AACL,gBAAQ,UADH;AAEL,iBAAS;AAFJ,KAHA;AAOPC,IAAAA,UAAU,EAAE,IAPL;AAQPC,IAAAA,UAAU,EAAE,IARL;AASPC,IAAAA,GAAG,EAAE;AATE;AAZM,CAAjB;AA0BA,IAAME,WAAW,GACfb,MAAM,IACDA,MAAM,CAACc,IADZ,IAEKd,MAAM,CAACc,IAAP,CAAYC,GAFjB,IAGKf,MAAM,CAACc,IAAP,CAAYC,GAAZ,CAAgBC,KAHrB,IAIKhB,MAAM,CAACc,IAAP,CAAYC,GAAZ,CAAgBC,KAAhB,CAAsBD,GALT,GAMhBf,MAAM,CAACc,IAAP,CAAYC,GAAZ,CAAgBC,KANA,GAMQ,KAN5B;AAQA,IAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAZ,GACZhB,QAAQ,CAACC,OADG,GAEZD,QAAQ,CAACQ,OAFb;AAIA,IAAMS,IAAI,GAAG,GAAb,C,CAAiB;AAEjB;AACA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAASC,OAAT,EAAqB;AACxC,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,WAAW,GAAG,CAAlB,CAJwC,CAKxC;;AACA,MAAMC,KAAK,GAAG;AACZ,cAAU;AACR,uBAAiB,KAAK,CADd;AAER,wBAAkB,IAAK,KAAK,CAFpB;AAGR,6BAAuB,IAAK,KAAK,CAHzB;AAIR,eAAS,MAAM,CAJP;AAKR,gBAAU,MAAO,KAAK,CALd;AAMR,qBAAe,MAAO,KAAK;AANnB,KADE;AASZ,eAAW;AACT,cAAQ,KAAK,CADJ;AAET,eAAS,KAAK,CAFL;AAGT,gBAAU,KAAK,CAHN;AAIT,eAAS,KAAK;AAJL;AATC,GAAd;;AAiBA,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAO;AACzB,QAAIA,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAGC,MAAM,CAACC,gBAApB,IAAwCF,CAAC,GAAG,CAAJ,KAAU,CAAtD,EAAyD,MAAM,IAAIG,UAAJ,CAAe,oBAAf,CAAN;AAC1D,GAFD;;AAIA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AAC/BN,IAAAA,WAAW,CAACM,MAAD,CAAX;AAEA,WACEA,MAAM,GAAG,IAAT,GAAgB,CAAhB,GACIA,MAAM,IAAI,MAAV,GAAmB,CAAnB,GACEA,MAAM,IAAI,UAAV,GAAuB,CAAvB,GACE,CAJV;AAMD,GATD;;AAWAC,EAAAA,MAAM,CAACC,IAAP,CAAYf,MAAZ,EAAoBgB,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnCV,IAAAA,WAAW,CAACP,MAAM,CAACiB,GAAD,CAAP,CAAX;;AACA,QAAIA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb,MAAoB,UAAxB,EAAoC;AAClC;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAjB;AACA,UAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B,MAAM,IAAIC,KAAJ,0BAA4BL,GAA5B,EAAN;AAC3B,UAAMM,MAAM,GAAGJ,QAAQ,CAAC,CAAD,CAAvB;AACA,UAAMK,KAAK,GAAGL,QAAQ,CAAC,CAAD,CAAR,CAAYC,KAAZ,CAAkB,GAAlB,EAAuBK,GAAvB,CAA2B,UAACC,IAAD;AAAA,eAAUC,QAAQ,CAACD,IAAD,CAAlB;AAAA,OAA3B,CAAd;AAEAxB,MAAAA,WAAW,IAAII,KAAK,CAACN,MAAN,CAAauB,MAAb,IAAuBvB,MAAM,CAACiB,GAAD,CAA5C;AACA,UAAMW,UAAU,GAAIL,MAAM,KAAK,eAAZ,GAA+B,CAA/B,GAAmC,CAAtD;AACArB,MAAAA,WAAW,IAAI,CAAE,KAAKsB,KAAK,CAAC,CAAD,CAAX,GAAmB,KAAKA,KAAK,CAAC,CAAD,CAA9B,IAAsCI,UAAtC,GAAmD5B,MAAM,CAACiB,GAAD,CAAxE;AACD,KAVD,MAUO;AACLf,MAAAA,WAAW,IAAII,KAAK,CAACN,MAAN,CAAaiB,GAAb,IAAoBjB,MAAM,CAACiB,GAAD,CAAzC;AACD;;AACDb,IAAAA,UAAU,IAAIJ,MAAM,CAACiB,GAAD,CAApB;AACA,QAAIA,GAAG,CAACY,OAAJ,CAAY,GAAZ,KAAoB,CAAxB,EAA2B1B,UAAU,GAAG,IAAb;AAC5B,GAjBD;AAmBAW,EAAAA,MAAM,CAACC,IAAP,CAAYd,OAAZ,EAAqBe,OAArB,CAA6B,UAACC,GAAD,EAAS;AACpCV,IAAAA,WAAW,CAACN,OAAO,CAACgB,GAAD,CAAR,CAAX;AACAf,IAAAA,WAAW,IAAII,KAAK,CAACL,OAAN,CAAcgB,GAAd,IAAqBhB,OAAO,CAACgB,GAAD,CAA3C;AACAZ,IAAAA,WAAW,IAAIJ,OAAO,CAACgB,GAAD,CAAtB;AACD,GAJD;AAMA,MAAId,UAAJ,EAAgBD,WAAW,IAAI,CAAf;AAEhBA,EAAAA,WAAW,IAAI,IAAI,CAAnB;AACAA,EAAAA,WAAW,IAAIU,YAAY,CAACR,UAAD,CAAZ,GAA2B,CAA1C;AACAF,EAAAA,WAAW,IAAIU,YAAY,CAACP,WAAD,CAAZ,GAA4B,CAA3C;AAEA,SAAOyB,IAAI,CAACC,IAAL,CAAU7B,WAAW,GAAG,CAAxB,CAAP;AACD,CAtED,C,CAwEA;;;AACA,IAAM8B,eAAe;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAAyE,EAAzE,EAASC,KAAT,SAASA,KAAT,EAAgBC,QAAhB,SAAgBA,QAAhB,EAA0BC,OAA1B,SAA0BA,OAA1B,sBAAmCC,KAAnC,EAAmCA,KAAnC,4BAA2C,CAA3C,qCAA8CC,MAA9C,EAA8CA,MAA9C,6BAAuD,MAAvD,iBAA+DC,KAA/D,SAA+DA,KAA/D;AAChBC,YAAAA,aADgB,GACA7D,SAAS,CAAC8D,eAAV,CAA0B/C,KAA1B,CAAgCgD,IAAhC,CAAqCJ,MAArC,CADA;;AAAA,iBAGlBC,KAHkB;AAAA;AAAA;AAAA;;AAAA,6CAIbC,aAJa;;AAAA;AAAA,0BAOXL,QAPW;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOO1D,OAAO,CAACiB,KAAR,CAAciD,aAAd,CAA4BP,OAA5B,CAPP;;AAAA;AAAA;;AAAA;AAOtBD,YAAAA,QAPsB;AAUhBS,YAAAA,IAVgB,GAUTT,QAAQ,CAACb,MAVA;AAWhBuB,YAAAA,MAXgB,GAWPD,IAAI,GAAG,CAAP,GACXA,IAAI,GAAG,GAAP,GAAaP,KAAK,GAAG,EAArB,IAA2B,KAAKO,IAAL,GAAYP,KAAvC,CADW,GAEXG,aAbkB;;AAAA,kBAelBF,MAAM,KAAK,eAfO;AAAA;AAAA;AAAA;;AAgBdQ,YAAAA,OAhBc,GAgBJ9C,YAAY,CAC1B;AAAE,yCAA2B;AAA7B,aAD0B,EAE1B;AAAE,uBAAUT,WAAD,GAAgB,CAAhB,GAAoB;AAA/B,aAF0B,CAhBR;AAoBdwD,YAAAA,SApBc,GAoBFH,IAAI,GAAGE,OAAP,GAAiBT,KAAK,GAAG,EAAzB,IAA+B,KAAKO,IAAL,GAAYP,KAA3C,CApBE;AAAA,6CAsBbU,SAtBa;;AAAA;AAAA,kBAyBlBT,MAAM,KAAK,UAzBO;AAAA;AAAA;AAAA;;AA0BdU,YAAAA,MA1Bc,GA0BLhD,YAAY,CACzB;AAAE,yCAA2B;AAA7B,aADyB,EAEzB;AAAE,uBAAUT,WAAD,GAAgB,CAAhB,GAAoB;AAA/B,aAFyB,CA1BP;AA8Bd0D,YAAAA,QA9Bc,GA8BHL,IAAI,GAAGI,MAAP,GAAgBX,KAAK,GAAG,EAAxB,IAA8B,KAAKO,IAAL,GAAYP,KAA1C,CA9BG;AAAA,6CAgCbY,QAhCa;;AAAA;AAAA,6CAmCfJ,MAnCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfZ,eAAe;AAAA;AAAA;AAAA,GAArB;;AAgDA,IAAMiB,gBAAgB;AAAA,uEAAG,kBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,OADiB,GAC8CD,OAD9C,CACjBC,OADiB,EACRC,UADQ,GAC8CF,OAD9C,CACRE,UADQ,EACInB,KADJ,GAC8CiB,OAD9C,CACIjB,KADJ,EACWE,OADX,GAC8Ce,OAD9C,CACWf,OADX,EACoBS,MADpB,GAC8CM,OAD9C,CACoBN,MADpB,EAC4BN,KAD5B,GAC8CY,OAD9C,CAC4BZ,KAD5B,EACmCD,MADnC,GAC8Ca,OAD9C,CACmCb,MADnC;AAAA,wBAQnB9D,QAAQ,EARW,6BAGrB8E,IAHqB,EAInBC,SAJmB,kBAInBA,SAJmB,EAKnBC,oBALmB,kBAKnBA,oBALmB,EAMnBC,qBANmB,kBAMnBA,qBANmB;AAUnBpB,YAAAA,KAVmB,GAUX,CAVW;AAYvB,gBAAI9C,WAAJ,EAAiB8C,KAAK,GAAG,CAAR;;AAEjB,gBAAI,CAACD,OAAL,EAAc;AACZA,cAAAA,OAAO,GAAGmB,SAAS,CAACnB,OAApB,CADY,CAEZ;;AACA,kBAAIE,MAAM,KAAK,UAAf,EAA2BF,OAAO,GAAGsB,gBAAV;AAC3B,kBAAIpB,MAAM,KAAK,eAAf,EAAgCF,OAAO,GAAGqB,qBAAqB,CAACrB,OAAhC;AACjC,aAnBsB,CAqBvB;;;AArBuB,2BAsBdS,MAtBc;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAsBEZ,eAAe,CAAC;AAAEG,cAAAA,OAAO,EAAPA,OAAF;AAAWF,cAAAA,KAAK,EAALA,KAAX;AAAkBK,cAAAA,KAAK,EAALA,KAAlB;AAAyBD,cAAAA,MAAM,EAANA,MAAzB;AAAiCD,cAAAA,KAAK,EAALA;AAAjC,aAAD,CAtBjB;;AAAA;AAAA;;AAAA;AAsBvBQ,YAAAA,MAtBuB;AAAA,2BAuBbO,OAvBa;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuBIO,eAAe,CAAC;AAAEzB,cAAAA,KAAK,EAALA;AAAF,aAAD,CAvBnB;;AAAA;AAAA;;AAAA;AAuBvBkB,YAAAA,OAvBuB;AAyBjBQ,YAAAA,kBAzBiB,GAyBI/E,SAAS,CAACgF,OAAV,CACzB9D,IADyB,EAEzB,IAAIlB,SAAJ,CAAcuE,OAAd,EACGU,YADH,CACgBjB,MADhB,EAEGkB,GAFH,CAEO,IAFP,EAEa;AAFb,aAGGC,EAHH,CAGM,CAHN,EAGSnF,SAAS,CAACoF,eAHnB,CAFyB,CAzBJ;AAiCjBC,YAAAA,cAjCiB,GAiCA,EAjCA;AAkCvBN,YAAAA,kBAAkB,CAACO,IAAnB,CAAwBD,cAAxB,EAlCuB,CAkCiB;;AAElCE,YAAAA,aApCiB,GAoCDf,UAAU,GAC5BO,kBAAkB,CAACS,QAAnB,EAD4B,GAE5BT,kBAAkB,CAACE,YAAnB,CAAgC,IAAhC,EAAsCO,QAAtC,EAtCmB;AAwCvBC,YAAAA,OAAO,CAACC,GAAR,oCAAwCrC,KAAxC,uBAA0DI,MAA1D,eAAqE8B,aAArE;AAxCuB,8CAyChBA,aAzCgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBlB,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AA4CA,IAAMS,eAAe;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+EAA4B,EAA5B,sBAASzB,KAAT,EAASA,KAAT,4BAAiB,MAAjB;AAChBsC,YAAAA,IADgB,GACT9F,MAAM,CAAC+F,QAAP,CAAgB/E,KADP;AAEhBgF,YAAAA,WAFgB,GAEF/F,SAAS,CAAC8D,eAAV,CAA0B/C,KAA1B,CAAgCiF,IAF9B;;AAAA,gBAIjBH,IAJiB;AAAA;AAAA;AAAA;;AAAA,8CAKbE,WAAW,CAACxC,KAAD,CALE;;AAAA;AAAA;AAAA;AAAA,mBAWFtD,OAAO,CAACgG,GAAR,CAAYJ,IAAZ,EAAkB;AAAEK,cAAAA,aAAa,EAAE;AAAjB,aAAlB,CAXE;;AAAA;AAWpBC,YAAAA,SAXoB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAapBR,YAAAA,OAAO,CAACS,KAAR,4BAAkC,aAAIC,OAAtC;AAboB,8CAcbN,WAAW,CAACxC,KAAD,CAdE;;AAAA;AAiBhB+C,YAAAA,SAjBgB,GAiBJ;AAChBC,cAAAA,IAAI,EAAE,gBADU;AAEhBC,cAAAA,MAAM,EAAE,mBAFQ;AAGhBC,cAAAA,IAAI,EAAE;AAHU,aAjBI;AAuBhBC,YAAAA,QAvBgB,GAuBLJ,SAAS,CAAC/C,KAAD,CAAT,IAAoB+C,SAAS,CAACE,MAvBzB;AAwBhBG,YAAAA,OAxBgB,GAwBN,IAAIzG,SAAJ,CAAciG,SAAS,CAACO,QAAD,CAAvB,CAxBM;AAAA,8CA0BfC,OAAO,CAACC,sBAAR,CAA+BxF,IAA/B,IACHuF,OAAO,CAACjB,QAAR,EADG,GAEHK,WAAW,CAACxC,KAAD,CA5BO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfyB,eAAe;AAAA;AAAA;AAAA,GAArB;;AA+BA,eAAe;AACb1B,EAAAA,eAAe,EAAfA,eADa;AAEbiB,EAAAA,gBAAgB,EAAhBA,gBAFa;AAGbS,EAAAA,eAAe,EAAfA,eAHa;AAIbhE,EAAAA,OAAO,EAAPA,OAJa;AAKbb,EAAAA,QAAQ,EAARA;AALa,CAAf","sourcesContent":["// @ts-nocheck\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport { getState } from 'redux/core'\r\nimport actions from 'redux/actions'\r\nimport config from './externalConfig'\r\nimport constants from './constants'\r\nimport request from 'common/utils/request'\r\nimport BigNumber from 'bignumber.js'\r\n\r\n\r\nconst networks = {\r\n  mainnet: {\r\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\r\n    bech32: 'gp',\r\n    bip32: {\r\n      public:  0x68DF7CBD,\r\n      private: 0x8E8EA8EA,\r\n    },\r\n    pubKeyHash: 0x26,\r\n    scriptHash: 0x61,\r\n    wif: 0xA6,\r\n  },\r\n  testnet: {\r\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\r\n    bech32: 'tghost',\r\n    bip32: {\r\n      public: 0xe1427800,\r\n      private: 0x04889478,\r\n    },\r\n    pubKeyHash: 0x4B,\r\n    scriptHash: 0x89,\r\n    wif: 0x2e,\r\n  }\r\n}\r\n\r\n\r\nconst hasAdminFee = (\r\n  config\r\n    && config.opts\r\n    && config.opts.fee\r\n    && config.opts.fee.ghost\r\n    && config.opts.fee.ghost.fee\r\n) ? config.opts.fee.ghost : false\r\n\r\nconst network = process.env.MAINNET\r\n  ? networks.mainnet\r\n  : networks.testnet\r\n\r\nconst DUST = 546 // description in ./btc.ts\r\n\r\n// getByteCount({'MULTISIG-P2SH:2-4':45},{'P2PKH':1}) Means \"45 inputs of P2SH Multisig and 1 output of P2PKH\"\r\n// getByteCount({'P2PKH':1,'MULTISIG-P2SH:2-3':2},{'P2PKH':2}) means \"1 P2PKH input and 2 Multisig P2SH (2 of 3) inputs along with 2 P2PKH outputs\"\r\nconst getByteCount = (inputs, outputs) => {\r\n  let totalWeight = 0\r\n  let hasWitness = false\r\n  let inputCount = 0\r\n  let outputCount = 0\r\n  // assumes compressed pubkeys in all cases.\r\n  const types = {\r\n    'inputs': {\r\n      'MULTISIG-P2SH': 49 * 4,\r\n      'MULTISIG-P2WSH': 6 + (41 * 4),\r\n      'MULTISIG-P2SH-P2WSH': 6 + (76 * 4),\r\n      'P2PKH': 148 * 4,\r\n      'P2WPKH': 108 + (41 * 4),\r\n      'P2SH-P2WPKH': 108 + (64 * 4),\r\n    },\r\n    'outputs': {\r\n      'P2SH': 32 * 4,\r\n      'P2PKH': 34 * 4,\r\n      'P2WPKH': 31 * 4,\r\n      'P2WSH': 43 * 4,\r\n    },\r\n  }\r\n\r\n  const checkUInt53 = (n) => {\r\n    if (n < 0 || n > Number.MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range')\r\n  }\r\n\r\n  const varIntLength = (number) => {\r\n    checkUInt53(number)\r\n\r\n    return (\r\n      number < 0xfd ? 1\r\n        : number <= 0xffff ? 3\r\n          : number <= 0xffffffff ? 5\r\n            : 9\r\n    )\r\n  }\r\n\r\n  Object.keys(inputs).forEach((key) => {\r\n    checkUInt53(inputs[key])\r\n    if (key.slice(0, 8) === 'MULTISIG') {\r\n      // ex. \"MULTISIG-P2SH:2-3\" would mean 2 of 3 P2SH MULTISIG\r\n      const keyParts = key.split(':')\r\n      if (keyParts.length !== 2) throw new Error(`invalid input: ${key}`)\r\n      const newKey = keyParts[0]\r\n      const mAndN = keyParts[1].split('-').map((item) => parseInt(item))\r\n\r\n      totalWeight += types.inputs[newKey] * inputs[key]\r\n      const multiplyer = (newKey === 'MULTISIG-P2SH') ? 4 : 1\r\n      totalWeight += ((73 * mAndN[0]) + (34 * mAndN[1])) * multiplyer * inputs[key]\r\n    } else {\r\n      totalWeight += types.inputs[key] * inputs[key]\r\n    }\r\n    inputCount += inputs[key]\r\n    if (key.indexOf('W') >= 0) hasWitness = true\r\n  })\r\n\r\n  Object.keys(outputs).forEach((key) => {\r\n    checkUInt53(outputs[key])\r\n    totalWeight += types.outputs[key] * outputs[key]\r\n    outputCount += outputs[key]\r\n  })\r\n\r\n  if (hasWitness) totalWeight += 2\r\n\r\n  totalWeight += 8 * 4\r\n  totalWeight += varIntLength(inputCount) * 4\r\n  totalWeight += varIntLength(outputCount) * 4\r\n\r\n  return Math.ceil(totalWeight / 4)\r\n}\r\n\r\n//@\r\nconst calculateTxSize = async ({ speed, unspents, address, txOut = 2, method = 'send', fixed } = {}) => {\r\n  const defaultTxSize = constants.defaultFeeRates.ghost.size[method]\r\n\r\n  if (fixed) {\r\n    return defaultTxSize\r\n  }\r\n\r\n  unspents = unspents || await actions.ghost.fetchUnspents(address)\r\n\r\n\r\n  const txIn = unspents.length\r\n  const txSize = txIn > 0\r\n    ? txIn * 146 + txOut * 33 + (15 + txIn - txOut)\r\n    : defaultTxSize\r\n\r\n  if (method === 'send_multisig') {\r\n    const msuSize = getByteCount(\r\n      { 'MULTISIG-P2SH-P2WSH:2-2': 1 },\r\n      { 'P2PKH': (hasAdminFee) ? 3 : 2 }\r\n    )\r\n    const msutxSize = txIn * msuSize + txOut * 33 + (15 + txIn - txOut)\r\n\r\n    return msutxSize\r\n  }\r\n\r\n  if (method === 'send_2fa') {\r\n    const msSize = getByteCount(\r\n      { 'MULTISIG-P2SH-P2WSH:2-3': 1 },\r\n      { 'P2PKH': (hasAdminFee) ? 3 : 2 }\r\n    )\r\n    const mstxSize = txIn * msSize + txOut * 33 + (15 + txIn - txOut)\r\n\r\n    return mstxSize\r\n  }\r\n\r\n  return txSize\r\n}\r\n\r\ntype EstimateFeeValueOptions = {\r\n  method?: string\r\n  speed: 'fast' | 'normal' | 'slow'\r\n  feeRate?: number\r\n  inSatoshis?: boolean\r\n  address?: string\r\n  txSize?: number\r\n  fixed?: string\r\n}\r\n\r\nconst estimateFeeValue = async (options: EstimateFeeValueOptions) => {\r\n  let { feeRate, inSatoshis, speed, address, txSize, fixed, method } = options\r\n  const {\r\n    user: {\r\n      ghostData,\r\n      ghostMultisigSMSData,\r\n      ghostMultisigUserData,\r\n    },\r\n  } = getState()\r\n\r\n  let txOut = 2\r\n\r\n  if (hasAdminFee) txOut = 3\r\n\r\n  if (!address) {\r\n    address = ghostData.address\r\n    //@\r\n    if (method === 'send_2fa') address = ghostMultisigSMS\r\n    if (method === 'send_multisig') address = ghostMultisigUserData.address\r\n  }\r\n\r\n  //@\r\n  txSize = txSize || await calculateTxSize({ address, speed, fixed, method, txOut })\r\n  feeRate = feeRate || await estimateFeeRate({ speed })\r\n\r\n  const calculatedFeeValue = BigNumber.maximum(\r\n    DUST,\r\n    new BigNumber(feeRate)\r\n      .multipliedBy(txSize)\r\n      .div(1024) // divide by one kilobyte\r\n      .dp(0, BigNumber.ROUND_HALF_EVEN),\r\n  )\r\n\r\n  const CUSTOM_SATOSHI = 20\r\n  calculatedFeeValue.plus(CUSTOM_SATOSHI) // just wanted to add\r\n\r\n  const finalFeeValue = inSatoshis\r\n    ? calculatedFeeValue.toString()\r\n    : calculatedFeeValue.multipliedBy(1e-8).toString()\r\n\r\n  console.log(`Ghost withdraw fee speed(${speed}) method (${method}) ${finalFeeValue}`)\r\n  return finalFeeValue\r\n}\r\n\r\nconst estimateFeeRate = async ({ speed = 'fast' } = {}) => {\r\n  const link = config.feeRates.ghost\r\n  const defaultRate = constants.defaultFeeRates.ghost.rate\r\n\r\n  if (!link) {\r\n    return defaultRate[speed]\r\n  }\r\n\r\n  let apiResult\r\n\r\n  try {\r\n    apiResult = await request.get(link, { cacheResponse: 60000 })\r\n  } catch (err) {\r\n    console.error(`EstimateFeeRate: ${err.message}`)\r\n    return defaultRate[speed]\r\n  }\r\n\r\n  const apiSpeeds = {\r\n    slow: 'low_fee_per_kb',\r\n    normal: 'medium_fee_per_kb',\r\n    fast: 'high_fee_per_kb',\r\n  }\r\n\r\n  const apiSpeed = apiSpeeds[speed] || apiSpeeds.normal\r\n  const apiRate = new BigNumber(apiResult[apiSpeed])\r\n\r\n  return apiRate.isGreaterThanOrEqualTo(DUST)\r\n    ? apiRate.toString()\r\n    : defaultRate[speed]\r\n}\r\n\r\nexport default {\r\n  calculateTxSize,\r\n  estimateFeeValue,\r\n  estimateFeeRate,\r\n  network,\r\n  networks,\r\n}\r\n"]}]}