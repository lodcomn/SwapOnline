{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETH2GHOST.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETH2GHOST.ts","mtime":1614842913756},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/ETH2GHOST.ts"],"names":["debug","constants","util","AtomicAB2UTXO","ETH2GHOST","swap","utxoCoin","_flowName","getName","stepNumbers","ethSwap","participantSwap","ghostSwap","ownerSwap","abBlockchain","utxoBlockchain","Error","state","step","isStoppedSwap","signTransactionHash","isSignFetching","isMeSigned","targetWallet","secretHash","isBalanceFetching","isBalanceEnough","balance","ethSwapCreationTransactionHash","canCreateEthTransaction","isEthContractFunded","secret","isEthWithdrawn","isGhostWithdrawn","ethSwapWithdrawTransactionHash","ghostSwapWithdrawTransactionHash","refundTransactionHash","isRefunded","isFinished","isSwapExist","withdrawRequestIncoming","withdrawRequestAccepted","isFailedTransaction","isFailedTransactionError","_persistState","flow","room","once","setState","on","console","log","sendMessage","event","data","signABSide","waitUTXOScriptCreated","syncBalance","fundAB2UTXOContract","getSecretFromAB2UTXO","helpers","repeatAsyncUntilResult","stopRepeat","utxoScriptValues","error","withdraw","scriptValues","destinationAddress","destinationBuyAddress","then","hash","finishStep","swapData","ownerAddress","app","getMyEthAddress","participantAddress","getParticipantEthAddress","checkSwapExists","refundHandler","wasRefunded","warn","refund","_secret","_secretHash","env","bitcoin","crypto","ripemd160","Buffer","from","toString","createScript","scriptAddress","getBalance","btcSwapWithdrawTransactionHash","getFromName","getToName","COINS","eth","ghost"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\n\r\n\r\nclass ETH2GHOST extends AtomicAB2UTXO {\r\n\r\n  _flowName: string\r\n  ethSwap: any\r\n  ghostSwap: any\r\n  state: any\r\n\r\n  static getName() {\r\n    return `${this.getFromName()}2${this.getToName()}`\r\n  }\r\n  static getFromName() {\r\n    return constants.COINS.eth\r\n  }\r\n  static getToName() {\r\n    return constants.COINS.ghost\r\n  }\r\n  constructor(swap) {\r\n    super(swap)\r\n    this.utxoCoin = `ghost`\r\n    this._flowName = ETH2GHOST.getName()\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'wait-lock-utxo': 2,\r\n      'verify-script': 3,\r\n      'sync-balance': 4,\r\n      'lock-eth': 5,\r\n      'wait-withdraw-eth': 6, // aka getSecret\r\n      'withdraw-utxo': 7,\r\n      'finish': 8,\r\n      'end': 9\r\n    }\r\n\r\n    this.ethSwap = swap.participantSwap\r\n    this.ghostSwap = swap.ownerSwap\r\n\r\n    this.abBlockchain = this.ethSwap\r\n    this.utxoBlockchain = this.ghostSwap\r\n\r\n    if (!this.ethSwap) {\r\n      throw new Error('ETH2GHOST: \"ethSwap\" of type object required')\r\n    }\r\n    if (!this.ghostSwap) {\r\n      throw new Error('ETH2GHOST: \"ghostSwap\" of type object required')\r\n    }\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isStoppedSwap: false,\r\n\r\n      signTransactionHash: null,\r\n      isSignFetching: false,\r\n      isMeSigned: false,\r\n\r\n      targetWallet : null,\r\n      secretHash: null,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n      balance: null,\r\n\r\n      ethSwapCreationTransactionHash: null,\r\n      canCreateEthTransaction: true,\r\n      isEthContractFunded: false,\r\n\r\n      secret: null,\r\n\r\n      isEthWithdrawn: false,\r\n      isGhostWithdrawn: false,\r\n\r\n      ethSwapWithdrawTransactionHash: null,\r\n      ghostSwapWithdrawTransactionHash: null,\r\n\r\n      refundTransactionHash: null,\r\n      isRefunded: false,\r\n\r\n      isFinished: false,\r\n      isSwapExist: false,\r\n\r\n      withdrawRequestIncoming: false,\r\n      withdrawRequestAccepted: false,\r\n\r\n      isFailedTransaction: false,\r\n      isFailedTransactionError: null,\r\n    }\r\n\r\n    this._persistState()\r\n\r\n    const flow = this\r\n    flow.swap.room.once('request withdraw', () => {\r\n      flow.setState({\r\n        withdrawRequestIncoming: true,\r\n      })\r\n    })\r\n\r\n    flow.swap.room.on('request eth contract', () => {\r\n      console.log('Requesting eth contract')\r\n      const { ethSwapCreationTransactionHash } = flow.state\r\n\r\n      if (ethSwapCreationTransactionHash) {\r\n        console.log('Exists - send hash')\r\n        flow.swap.room.sendMessage({\r\n          event: 'create eth contract',\r\n          data: {\r\n            ethSwapCreationTransactionHash,\r\n          },\r\n        })\r\n      }\r\n    })\r\n\r\n    super._persistSteps()\r\n  }\r\n\r\n  _persistState() {\r\n    super._persistState()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n\r\n    return [\r\n\r\n      // 1. Sign swap to start\r\n\r\n      () => {\r\n        this.signABSide()\r\n      },\r\n\r\n      // 2. Wait participant create, fund BTC Script\r\n\r\n      () => {\r\n        flow.waitUTXOScriptCreated()\r\n      },\r\n\r\n      // 3. Verify GHOST Script\r\n\r\n      () => {\r\n        debug('swap.core:flow')(`waiting verify ghost script`)\r\n        // this.verifyGhostScript()\r\n      },\r\n\r\n      // 4. Check balance\r\n\r\n      () => {\r\n        this.syncBalance()\r\n      },\r\n\r\n      // 5. Create ETH Contract\r\n\r\n      async () => {\r\n        await flow.ethSwap.fundAB2UTXOContract({\r\n          flow,\r\n          utxoCoin: `ghost`,\r\n        })\r\n      },\r\n\r\n      // 6. Wait participant withdraw\r\n\r\n      async () => {\r\n        await flow.ethSwap.getSecretFromAB2UTXO({ flow })\r\n      },\r\n\r\n      // 7. Withdraw\r\n\r\n      async () => {\r\n        await util.helpers.repeatAsyncUntilResult((stopRepeat) => {\r\n          const { secret, utxoScriptValues, ghostSwapWithdrawTransactionHash } = flow.state\r\n\r\n          if (ghostSwapWithdrawTransactionHash) {\r\n            return true\r\n          }\r\n\r\n          if (!utxoScriptValues) {\r\n            console.error('There is no \"utxoScriptValues\" in state. No way to continue swap...')\r\n            return null\r\n          }\r\n\r\n          return flow.ghostSwap.withdraw({\r\n            scriptValues: utxoScriptValues,\r\n            secret,\r\n            destinationAddress: flow.swap.destinationBuyAddress,\r\n          })\r\n            .then((hash) => {\r\n              console.log('withdraw hash', hash)\r\n              flow.setState({\r\n                ghostSwapWithdrawTransactionHash: hash,\r\n              }, true)\r\n              return true\r\n            })\r\n            .catch((error) => null)\r\n        })\r\n\r\n        flow.finishStep({\r\n          isGhostWithdrawn: true,\r\n        }, { step: 'withdraw-utxo' })\r\n      },\r\n\r\n      // 8. Finish\r\n\r\n      () => {\r\n        flow.swap.room.once('request swap finished', () => {\r\n          const { ghostSwapWithdrawTransactionHash } = flow.state\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'swap finished',\r\n            data: {\r\n              ghostSwapWithdrawTransactionHash,\r\n            },\r\n          })\r\n        })\r\n\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, { step: 'finish' })\r\n      },\r\n\r\n      // 9. Finished!\r\n\r\n      () => {}\r\n    ]\r\n  }\r\n\r\n  _checkSwapAlreadyExists() {\r\n    const swapData = {\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: this.app.getParticipantEthAddress(this.swap)\r\n    }\r\n\r\n    return this.ethSwap.checkSwapExists(swapData)\r\n  }\r\n\r\n  async tryRefund() {\r\n    const { secretHash } = this.state\r\n\r\n    const refundHandler = (hash = null) => {\r\n      this.swap.room.sendMessage({\r\n        event: 'eth refund completed',\r\n      })\r\n\r\n      this.setState({\r\n        refundTransactionHash: hash,\r\n        isRefunded: true,\r\n        isSwapExist: false,\r\n      }, true)\r\n    }\r\n\r\n    try {\r\n      const wasRefunded = await this.ethSwap.wasRefunded({ secretHash })\r\n\r\n      if (wasRefunded) {\r\n        debug('swap.core:flow')('This swap was refunded')\r\n\r\n        refundHandler()\r\n\r\n        return true\r\n      }\r\n    } catch (error) {\r\n      console.warn('wasRefunded error:', error)\r\n\r\n      return false\r\n    }\r\n\r\n    return this.ethSwap.refund({\r\n      participantAddress: this.app.getParticipantEthAddress(this.swap),\r\n    })\r\n      .then((hash) => {\r\n        if (!hash) {\r\n          return false\r\n        }\r\n\r\n        refundHandler(hash)\r\n\r\n        return true\r\n      })\r\n      .catch((error) => false)\r\n  }\r\n\r\n  async isRefundSuccess() {\r\n    return true\r\n  }\r\n\r\n  async tryWithdraw(_secret) {\r\n    const { secret, secretHash, isEthWithdrawn, isGhostWithdrawn, utxoScriptValues } = this.state\r\n\r\n    if (!_secret)\r\n      throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n    if (!utxoScriptValues)\r\n      throw new Error(`Cannot withdraw without script values`)\r\n\r\n    if (secret && secret != _secret)\r\n      console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n    if (isGhostWithdrawn)\r\n      console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n    debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n    const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n    if (secretHash != _secretHash)\r\n      console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n    const { scriptAddress } = this.ghostSwap.createScript(utxoScriptValues)\r\n    const balance = await this.ghostSwap.getBalance(scriptAddress)\r\n\r\n    debug('swap.core:flow')(`address=${scriptAddress}, balance=${balance}`)\r\n\r\n    if (balance === 0) {\r\n      this.finishStep({\r\n        isGhostWithdrawn: true,\r\n      }, { step: 'withdraw-utxo' })\r\n      throw new Error(`Already withdrawn: address=${scriptAddress},balance=${balance}`)\r\n    }\r\n\r\n    await this.ghostSwap.withdraw({\r\n      scriptValues: utxoScriptValues,\r\n      secret: _secret,\r\n    }, (hash) => {\r\n      debug('swap.core:flow')(`TX hash=${hash}`)\r\n      this.setState({\r\n        btcSwapWithdrawTransactionHash: hash,\r\n      })\r\n    })\r\n    debug('swap.core:flow')(`TX withdraw sent: ${this.state.btcSwapWithdrawTransactionHash}`)\r\n\r\n    this.finishStep({\r\n      isGhostWithdrawn: true,\r\n    }, { step: 'withdraw-utxo' })\r\n  }\r\n}\r\n\r\n\r\nexport default ETH2GHOST\r\n"]}]}