{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETH2NEXT.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETH2NEXT.ts","mtime":1614842913756},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/ETH2NEXT.ts"],"names":["debug","constants","util","AtomicAB2UTXO","ETH2NEXT","swap","utxoCoin","_flowName","getName","stepNumbers","ethSwap","participantSwap","nextSwap","ownerSwap","abBlockchain","utxoBlockchain","Error","state","step","isStoppedSwap","signTransactionHash","isSignFetching","isMeSigned","targetWallet","secretHash","nextScriptVerified","isBalanceFetching","isBalanceEnough","balance","ethSwapCreationTransactionHash","canCreateEthTransaction","isEthContractFunded","secret","isEthWithdrawn","isNextWithdrawn","ethSwapWithdrawTransactionHash","nextSwapWithdrawTransactionHash","refundTransactionHash","isRefunded","isFinished","isSwapExist","withdrawRequestIncoming","withdrawRequestAccepted","isFailedTransaction","isFailedTransactionError","_persistState","flow","room","once","setState","on","console","log","sendMessage","event","data","signABSide","waitUTXOScriptCreated","syncBalance","fundAB2UTXOContract","getSecretFromAB2UTXO","helpers","repeatAsyncUntilResult","stopRepeat","utxoScriptValues","error","withdraw","scriptValues","destinationAddress","destinationBuyAddress","then","hash","finishStep","swapData","ownerAddress","app","getMyEthAddress","participantAddress","getParticipantEthAddress","checkSwapExists","refundHandler","wasRefunded","warn","refund","_secret","_secretHash","env","bitcoin","crypto","ripemd160","Buffer","from","toString","createScript","scriptAddress","getBalance","getFromName","getToName","COINS","eth","next"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAkBC,SAAlB,EAA6BC,IAA7B,QAAyC,UAAzC;AACA,SAASC,aAAT,QAA8B,WAA9B;;IAGMC,Q;;;;;AAgBJ,oBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB,8BAAMA,IAAN;;AADgB;;AAAA;;AAAA;;AAAA;;AAEhB,UAAKC,QAAL;AACA,UAAKC,SAAL,GAAiBH,QAAQ,CAACI,OAAT,EAAjB;AAEA,UAAKC,WAAL,GAAmB;AACjB,cAAQ,CADS;AAEjB,wBAAkB,CAFD;AAGjB,uBAAiB,CAHA;AAIjB,sBAAgB,CAJC;AAKjB,kBAAY,CALK;AAMjB,2BAAqB,CANJ;AAMO;AACxB,uBAAiB,CAPA;AAQjB,gBAAU,CARO;AASjB,aAAO;AATU,KAAnB;AAYA,UAAKC,OAAL,GAAeL,IAAI,CAACM,eAApB;AACA,UAAKC,QAAL,GAAgBP,IAAI,CAACQ,SAArB;AAEA,UAAKC,YAAL,GAAoB,MAAKJ,OAAzB;AACA,UAAKK,cAAL,GAAsB,MAAKH,QAA3B;;AAEA,QAAI,CAAC,MAAKF,OAAV,EAAmB;AACjB,YAAM,IAAIM,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,QAAI,CAAC,MAAKJ,QAAV,EAAoB;AAClB,YAAM,IAAII,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,CADK;AAGXC,MAAAA,aAAa,EAAE,KAHJ;AAKXC,MAAAA,mBAAmB,EAAE,IALV;AAMXC,MAAAA,cAAc,EAAE,KANL;AAOXC,MAAAA,UAAU,EAAE,KAPD;AASXC,MAAAA,YAAY,EAAG,IATJ;AAUXC,MAAAA,UAAU,EAAE,IAVD;AAYXC,MAAAA,kBAAkB,EAAE,KAZT;AAcXC,MAAAA,iBAAiB,EAAE,KAdR;AAeXC,MAAAA,eAAe,EAAE,IAfN;AAgBXC,MAAAA,OAAO,EAAE,IAhBE;AAkBXC,MAAAA,8BAA8B,EAAE,IAlBrB;AAmBXC,MAAAA,uBAAuB,EAAE,IAnBd;AAoBXC,MAAAA,mBAAmB,EAAE,KApBV;AAsBXC,MAAAA,MAAM,EAAE,IAtBG;AAwBXC,MAAAA,cAAc,EAAE,KAxBL;AAyBXC,MAAAA,eAAe,EAAE,KAzBN;AA2BXC,MAAAA,8BAA8B,EAAE,IA3BrB;AA4BXC,MAAAA,+BAA+B,EAAE,IA5BtB;AA8BXC,MAAAA,qBAAqB,EAAE,IA9BZ;AA+BXC,MAAAA,UAAU,EAAE,KA/BD;AAiCXC,MAAAA,UAAU,EAAE,KAjCD;AAkCXC,MAAAA,WAAW,EAAE,KAlCF;AAoCXC,MAAAA,uBAAuB,EAAE,KApCd;AAqCXC,MAAAA,uBAAuB,EAAE,KArCd;AAuCXC,MAAAA,mBAAmB,EAAE,KAvCV;AAwCXC,MAAAA,wBAAwB,EAAE;AAxCf,KAAb;;AA2CA,UAAKC,aAAL;;AAEA,QAAMC,IAAI,gCAAV;;AACAA,IAAAA,IAAI,CAACzC,IAAL,CAAU0C,IAAV,CAAeC,IAAf,CAAoB,kBAApB,EAAwC,YAAM;AAC5CF,MAAAA,IAAI,CAACG,QAAL,CAAc;AACZR,QAAAA,uBAAuB,EAAE;AADb,OAAd;AAGD,KAJD;AAMAK,IAAAA,IAAI,CAACzC,IAAL,CAAU0C,IAAV,CAAeG,EAAf,CAAkB,sBAAlB,EAA0C,YAAM;AAC9CC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AAD8C,UAEtCvB,8BAFsC,GAEHiB,IAAI,CAAC7B,KAFF,CAEtCY,8BAFsC;;AAI9C,UAAIA,8BAAJ,EAAoC;AAClCsB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAN,QAAAA,IAAI,CAACzC,IAAL,CAAU0C,IAAV,CAAeM,WAAf,CAA2B;AACzBC,UAAAA,KAAK,EAAE,qBADkB;AAEzBC,UAAAA,IAAI,EAAE;AACJ1B,YAAAA,8BAA8B,EAA9BA;AADI;AAFmB,SAA3B;AAMD;AACF,KAbD;;AAeA;;AAjGgB;AAkGjB;;;;WAED,yBAAgB;AACd;AACD;;;WAED,qBAAY;AAAA;;AACV,UAAMiB,IAAI,GAAG,IAAb;AAEA,aAAO,CAEL;AAEA,kBAAM;AACJ,QAAA,MAAI,CAACU,UAAL;AACD,OANI,EAQL;AAEA,kBAAM;AACJV,QAAAA,IAAI,CAACW,qBAAL;AACD,OAZI,EAcL;AAEA,kBAAM;AACJzD,QAAAA,KAAK,CAAC,gBAAD,CAAL,+BADI,CAEJ;AACD,OAnBI,EAqBL;AAEA,kBAAM;AACJ,QAAA,MAAI,CAAC0D,WAAL;AACD,OAzBI;AAAA;AA2BL;AA3BK,+DA6BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQZ,IAAI,CAACpC,OAAL,CAAaiD,mBAAb,CAAiC;AACrCb,kBAAAA,IAAI,EAAJA,IADqC;AAErCxC,kBAAAA,QAAQ;AAF6B,iBAAjC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA7BK;AAAA;AAoCL;AApCK,+DAsCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQwC,IAAI,CAACpC,OAAL,CAAakD,oBAAb,CAAkC;AAAEd,kBAAAA,IAAI,EAAJA;AAAF,iBAAlC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAtCK;AAAA;AA0CL;AA1CK,+DA4CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACQ5C,IAAI,CAAC2D,OAAL,CAAaC,sBAAb,CAAoC,UAACC,UAAD,EAAgB;AAAA,oCACcjB,IAAI,CAAC7B,KADnB;AAAA,sBAChDe,MADgD,eAChDA,MADgD;AAAA,sBACxCgC,gBADwC,eACxCA,gBADwC;AAAA,sBACtB5B,+BADsB,eACtBA,+BADsB;;AAGxD,sBAAIA,+BAAJ,EAAqC;AACnC,2BAAO,IAAP;AACD;;AAED,sBAAI,CAAC4B,gBAAL,EAAuB;AACrBb,oBAAAA,OAAO,CAACc,KAAR,CAAc,qEAAd;AACA,2BAAO,IAAP;AACD;;AAED,yBAAOnB,IAAI,CAAClC,QAAL,CAAcsD,QAAd,CAAuB;AAC5BC,oBAAAA,YAAY,EAAEH,gBADc;AAE5BhC,oBAAAA,MAAM,EAANA,MAF4B;AAG5BoC,oBAAAA,kBAAkB,EAAEtB,IAAI,CAACzC,IAAL,CAAUgE;AAHF,mBAAvB,EAKJC,IALI,CAKC,UAACC,IAAD,EAAU;AACdpB,oBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BmB,IAA7B;AACAzB,oBAAAA,IAAI,CAACG,QAAL,CAAc;AACZb,sBAAAA,+BAA+B,EAAEmC;AADrB,qBAAd,EAEG,IAFH;AAGA,2BAAO,IAAP;AACD,mBAXI,WAYE,UAACN,KAAD;AAAA,2BAAW,IAAX;AAAA,mBAZF,CAAP;AAaD,iBAzBK,CADR;;AAAA;AA4BEnB,gBAAAA,IAAI,CAAC0B,UAAL,CAAgB;AACdtC,kBAAAA,eAAe,EAAE;AADH,iBAAhB,EAEG;AAAEhB,kBAAAA,IAAI,EAAE;AAAR,iBAFH;;AA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA5CK,IA6EL;AAEA,kBAAM;AACJ4B,QAAAA,IAAI,CAACzC,IAAL,CAAU0C,IAAV,CAAeC,IAAf,CAAoB,uBAApB,EAA6C,YAAM;AAAA,cACzCZ,+BADyC,GACLU,IAAI,CAAC7B,KADA,CACzCmB,+BADyC;AAGjDU,UAAAA,IAAI,CAACzC,IAAL,CAAU0C,IAAV,CAAeM,WAAf,CAA2B;AACzBC,YAAAA,KAAK,EAAE,eADkB;AAEzBC,YAAAA,IAAI,EAAE;AACJnB,cAAAA,+BAA+B,EAA/BA;AADI;AAFmB,WAA3B;AAMD,SATD;AAWAU,QAAAA,IAAI,CAAC0B,UAAL,CAAgB;AACdjC,UAAAA,UAAU,EAAE;AADE,SAAhB,EAEG;AAAErB,UAAAA,IAAI,EAAE;AAAR,SAFH;AAGD,OA9FI,EAgGL;AAEA,kBAAM,CAAE,CAlGH,CAAP;AAoGD;;;WAED,mCAA0B;AACxB,UAAMuD,QAAQ,GAAG;AACfC,QAAAA,YAAY,EAAE,KAAKC,GAAL,CAASC,eAAT,EADC;AAEfC,QAAAA,kBAAkB,EAAE,KAAKF,GAAL,CAASG,wBAAT,CAAkC,KAAKzE,IAAvC;AAFL,OAAjB;AAKA,aAAO,KAAKK,OAAL,CAAaqE,eAAb,CAA6BN,QAA7B,CAAP;AACD;;;;gFAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACUjD,gBAAAA,UADV,GACyB,KAAKP,KAD9B,CACUO,UADV;;AAGQwD,gBAAAA,aAHR,GAGwB,SAAhBA,aAAgB,GAAiB;AAAA,sBAAhBT,IAAgB,uEAAT,IAAS;;AACrC,kBAAA,MAAI,CAAClE,IAAL,CAAU0C,IAAV,CAAeM,WAAf,CAA2B;AACzBC,oBAAAA,KAAK,EAAE;AADkB,mBAA3B;;AAIA,kBAAA,MAAI,CAACL,QAAL,CAAc;AACZZ,oBAAAA,qBAAqB,EAAEkC,IADX;AAEZjC,oBAAAA,UAAU,EAAE,IAFA;AAGZE,oBAAAA,WAAW,EAAE;AAHD,mBAAd,EAIG,IAJH;AAKD,iBAbH;;AAAA;AAAA;AAAA,uBAgB8B,KAAK9B,OAAL,CAAauE,WAAb,CAAyB;AAAEzD,kBAAAA,UAAU,EAAVA;AAAF,iBAAzB,CAhB9B;;AAAA;AAgBUyD,gBAAAA,WAhBV;;AAAA,qBAkBQA,WAlBR;AAAA;AAAA;AAAA;;AAmBMjF,gBAAAA,KAAK,CAAC,gBAAD,CAAL,CAAwB,wBAAxB;AAEAgF,gBAAAA,aAAa;AArBnB,kDAuBa,IAvBb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA0BI7B,gBAAAA,OAAO,CAAC+B,IAAR,CAAa,oBAAb;AA1BJ,kDA4BW,KA5BX;;AAAA;AAAA,kDA+BS,KAAKxE,OAAL,CAAayE,MAAb,CAAoB;AACzBN,kBAAAA,kBAAkB,EAAE,KAAKF,GAAL,CAASG,wBAAT,CAAkC,KAAKzE,IAAvC;AADK,iBAApB,EAGJiE,IAHI,CAGC,UAACC,IAAD,EAAU;AACd,sBAAI,CAACA,IAAL,EAAW;AACT,2BAAO,KAAP;AACD;;AAEDS,kBAAAA,aAAa,CAACT,IAAD,CAAb;AAEA,yBAAO,IAAP;AACD,iBAXI,WAYE,UAACN,KAAD;AAAA,yBAAW,KAAX;AAAA,iBAZF,CA/BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;sFA8CA;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,IADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAIA,kBAAkBmB,OAAlB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BACoF,KAAKnE,KADzF,EACUe,MADV,eACUA,MADV,EACkBR,UADlB,eACkBA,UADlB,EAC8BS,cAD9B,eAC8BA,cAD9B,EAC8CC,eAD9C,eAC8CA,eAD9C,EAC+D8B,gBAD/D,eAC+DA,gBAD/D;;AAAA,oBAGOoB,OAHP;AAAA;AAAA;AAAA;;AAAA,sBAIU,IAAIpE,KAAJ,oEAJV;;AAAA;AAAA,oBAMOgD,gBANP;AAAA;AAAA;AAAA;;AAAA,sBAOU,IAAIhD,KAAJ,yCAPV;;AAAA;AASE,oBAAIgB,MAAM,IAAIA,MAAM,IAAIoD,OAAxB,EACEjC,OAAO,CAAC+B,IAAR;AAEF,oBAAIhD,eAAJ,EACEiB,OAAO,CAAC+B,IAAR;AAEFlF,gBAAAA,KAAK,CAAC,gBAAD,CAAL,mCAAmDoF,OAAnD;AAEMC,gBAAAA,WAjBR,GAiBsB,KAAKV,GAAL,CAASW,GAAT,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,SAA5B,CAAsCC,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqB,KAArB,CAAtC,EAAmEQ,QAAnE,CAA4E,KAA5E,CAjBtB;AAmBE,oBAAIpE,UAAU,IAAI6D,WAAlB,EACElC,OAAO,CAAC+B,IAAR,uCAA4C1D,UAA5C,sBAAkE6D,WAAlE;AApBJ,wCAsB4B,KAAKzE,QAAL,CAAciF,YAAd,CAA2B7B,gBAA3B,CAtB5B,EAsBU8B,aAtBV,yBAsBUA,aAtBV;AAAA;AAAA,uBAuBwB,KAAKlF,QAAL,CAAcmF,UAAd,CAAyBD,aAAzB,CAvBxB;;AAAA;AAuBQlE,gBAAAA,OAvBR;AAyBE5B,gBAAAA,KAAK,CAAC,gBAAD,CAAL,mBAAmC8F,aAAnC,uBAA6DlE,OAA7D;;AAzBF,sBA2BMA,OAAO,KAAK,CA3BlB;AAAA;AAAA;AAAA;;AA4BI,qBAAK4C,UAAL,CAAgB;AACdtC,kBAAAA,eAAe,EAAE;AADH,iBAAhB,EAEG;AAAEhB,kBAAAA,IAAI,EAAE;AAAR,iBAFH;AA5BJ,sBA+BU,IAAIF,KAAJ,sCAAwC8E,aAAxC,sBAAiElE,OAAjE,EA/BV;;AAAA;AAAA;AAAA,uBAkCQ,KAAKhB,QAAL,CAAcsD,QAAd,CAAuB;AAC3BC,kBAAAA,YAAY,EAAEH,gBADa;AAE3BhC,kBAAAA,MAAM,EAAEoD;AAFmB,iBAAvB,EAGH,UAACb,IAAD,EAAU;AACXvE,kBAAAA,KAAK,CAAC,gBAAD,CAAL,mBAAmCuE,IAAnC;;AACA,kBAAA,MAAI,CAACtB,QAAL,CAAc;AACZb,oBAAAA,+BAA+B,EAAEmC;AADrB,mBAAd;AAGD,iBARK,CAlCR;;AAAA;AA2CEvE,gBAAAA,KAAK,CAAC,gBAAD,CAAL,6BAA6C,KAAKiB,KAAL,CAAWmB,+BAAxD;AAEA,qBAAKoC,UAAL,CAAgB;AACdtC,kBAAAA,eAAe,EAAE;AADH,iBAAhB,EAEG;AAAEhB,kBAAAA,IAAI,EAAE;AAAR,iBAFH;;AA7CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WArRA,mBAAiB;AACf,uBAAU,KAAK8E,WAAL,EAAV,cAAgC,KAAKC,SAAL,EAAhC;AACD;;;WACD,uBAAqB;AACnB,aAAOhG,SAAS,CAACiG,KAAV,CAAgBC,GAAvB;AACD;;;WACD,qBAAmB;AACjB,aAAOlG,SAAS,CAACiG,KAAV,CAAgBE,IAAvB;AACD;;;;EAfoBjG,a;;AAgVvB,eAAeC,QAAf","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\n\r\n\r\nclass ETH2NEXT extends AtomicAB2UTXO {\r\n\r\n  _flowName: string\r\n  ethSwap: any\r\n  nextSwap: any\r\n  state: any\r\n\r\n  static getName() {\r\n    return `${this.getFromName()}2${this.getToName()}`\r\n  }\r\n  static getFromName() {\r\n    return constants.COINS.eth\r\n  }\r\n  static getToName() {\r\n    return constants.COINS.next\r\n  }\r\n  constructor(swap) {\r\n    super(swap)\r\n    this.utxoCoin = `next`\r\n    this._flowName = ETH2NEXT.getName()\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'wait-lock-utxo': 2,\r\n      'verify-script': 3,\r\n      'sync-balance': 4,\r\n      'lock-eth': 5,\r\n      'wait-withdraw-eth': 6, // aka getSecret\r\n      'withdraw-utxo': 7,\r\n      'finish': 8,\r\n      'end': 9\r\n    }\r\n\r\n    this.ethSwap = swap.participantSwap\r\n    this.nextSwap = swap.ownerSwap\r\n\r\n    this.abBlockchain = this.ethSwap\r\n    this.utxoBlockchain = this.nextSwap\r\n\r\n    if (!this.ethSwap) {\r\n      throw new Error('ETH2NEXT: \"ethSwap\" of type object required')\r\n    }\r\n    if (!this.nextSwap) {\r\n      throw new Error('ETH2NEXT: \"nextSwap\" of type object required')\r\n    }\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isStoppedSwap: false,\r\n\r\n      signTransactionHash: null,\r\n      isSignFetching: false,\r\n      isMeSigned: false,\r\n\r\n      targetWallet : null,\r\n      secretHash: null,\r\n\r\n      nextScriptVerified: false,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n      balance: null,\r\n\r\n      ethSwapCreationTransactionHash: null,\r\n      canCreateEthTransaction: true,\r\n      isEthContractFunded: false,\r\n\r\n      secret: null,\r\n\r\n      isEthWithdrawn: false,\r\n      isNextWithdrawn: false,\r\n\r\n      ethSwapWithdrawTransactionHash: null,\r\n      nextSwapWithdrawTransactionHash: null,\r\n\r\n      refundTransactionHash: null,\r\n      isRefunded: false,\r\n\r\n      isFinished: false,\r\n      isSwapExist: false,\r\n\r\n      withdrawRequestIncoming: false,\r\n      withdrawRequestAccepted: false,\r\n\r\n      isFailedTransaction: false,\r\n      isFailedTransactionError: null,\r\n    }\r\n\r\n    this._persistState()\r\n\r\n    const flow = this\r\n    flow.swap.room.once('request withdraw', () => {\r\n      flow.setState({\r\n        withdrawRequestIncoming: true,\r\n      })\r\n    })\r\n\r\n    flow.swap.room.on('request eth contract', () => {\r\n      console.log('Requesting eth contract')\r\n      const { ethSwapCreationTransactionHash } = flow.state\r\n\r\n      if (ethSwapCreationTransactionHash) {\r\n        console.log('Exists - send hash')\r\n        flow.swap.room.sendMessage({\r\n          event: 'create eth contract',\r\n          data: {\r\n            ethSwapCreationTransactionHash,\r\n          },\r\n        })\r\n      }\r\n    })\r\n\r\n    super._persistSteps()\r\n  }\r\n\r\n  _persistState() {\r\n    super._persistState()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n\r\n    return [\r\n\r\n      // 1. Sign swap to start\r\n\r\n      () => {\r\n        this.signABSide()\r\n      },\r\n\r\n      // 2. Wait participant create, fund NEXT Script\r\n\r\n      () => {\r\n        flow.waitUTXOScriptCreated()\r\n      },\r\n\r\n      // 3. Verify NEXT Script\r\n\r\n      () => {\r\n        debug('swap.core:flow')(`waiting verify next script`)\r\n        // this.verifyNextScript()\r\n      },\r\n\r\n      // 4. Check balance\r\n\r\n      () => {\r\n        this.syncBalance()\r\n      },\r\n\r\n      // 5. Create ETH Contract\r\n\r\n      async () => {\r\n        await flow.ethSwap.fundAB2UTXOContract({\r\n          flow,\r\n          utxoCoin: `next`,\r\n        })\r\n      },\r\n\r\n      // 6. Wait participant withdraw\r\n\r\n      async () => {\r\n        await flow.ethSwap.getSecretFromAB2UTXO({ flow })\r\n      },\r\n\r\n      // 7. Withdraw\r\n\r\n      async () => {\r\n        await util.helpers.repeatAsyncUntilResult((stopRepeat) => {\r\n          const { secret, utxoScriptValues, nextSwapWithdrawTransactionHash } = flow.state\r\n\r\n          if (nextSwapWithdrawTransactionHash) {\r\n            return true\r\n          }\r\n\r\n          if (!utxoScriptValues) {\r\n            console.error('There is no \"utxoScriptValues\" in state. No way to continue swap...')\r\n            return null\r\n          }\r\n\r\n          return flow.nextSwap.withdraw({\r\n            scriptValues: utxoScriptValues,\r\n            secret,\r\n            destinationAddress: flow.swap.destinationBuyAddress,\r\n          })\r\n            .then((hash) => {\r\n              console.log('withdraw hash', hash)\r\n              flow.setState({\r\n                nextSwapWithdrawTransactionHash: hash,\r\n              }, true)\r\n              return true\r\n            })\r\n            .catch((error) => null)\r\n        })\r\n\r\n        flow.finishStep({\r\n          isNextWithdrawn: true,\r\n        }, { step: 'withdraw-utxo' })\r\n      },\r\n\r\n      // 8. Finish\r\n\r\n      () => {\r\n        flow.swap.room.once('request swap finished', () => {\r\n          const { nextSwapWithdrawTransactionHash } = flow.state\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'swap finished',\r\n            data: {\r\n              nextSwapWithdrawTransactionHash,\r\n            },\r\n          })\r\n        })\r\n\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, { step: 'finish' })\r\n      },\r\n\r\n      // 9. Finished!\r\n\r\n      () => {}\r\n    ]\r\n  }\r\n\r\n  _checkSwapAlreadyExists() {\r\n    const swapData = {\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: this.app.getParticipantEthAddress(this.swap)\r\n    }\r\n\r\n    return this.ethSwap.checkSwapExists(swapData)\r\n  }\r\n\r\n  async tryRefund() {\r\n    const { secretHash } = this.state\r\n\r\n    const refundHandler = (hash = null) => {\r\n      this.swap.room.sendMessage({\r\n        event: 'eth refund completed',\r\n      })\r\n\r\n      this.setState({\r\n        refundTransactionHash: hash,\r\n        isRefunded: true,\r\n        isSwapExist: false,\r\n      }, true)\r\n    }\r\n\r\n    try {\r\n      const wasRefunded = await this.ethSwap.wasRefunded({ secretHash })\r\n\r\n      if (wasRefunded) {\r\n        debug('swap.core:flow')('This swap was refunded')\r\n\r\n        refundHandler()\r\n\r\n        return true\r\n      }\r\n    } catch (error) {\r\n      console.warn('wasRefunded error:', error)\r\n\r\n      return false\r\n    }\r\n\r\n    return this.ethSwap.refund({\r\n      participantAddress: this.app.getParticipantEthAddress(this.swap),\r\n    })\r\n      .then((hash) => {\r\n        if (!hash) {\r\n          return false\r\n        }\r\n\r\n        refundHandler(hash)\r\n\r\n        return true\r\n      })\r\n      .catch((error) => false)\r\n  }\r\n\r\n  async isRefundSuccess() {\r\n    return true\r\n  }\r\n\r\n  async tryWithdraw(_secret) {\r\n    const { secret, secretHash, isEthWithdrawn, isNextWithdrawn, utxoScriptValues } = this.state\r\n\r\n    if (!_secret)\r\n      throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n    if (!utxoScriptValues)\r\n      throw new Error(`Cannot withdraw without script values`)\r\n\r\n    if (secret && secret != _secret)\r\n      console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n    if (isNextWithdrawn)\r\n      console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n    debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n    const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n    if (secretHash != _secretHash)\r\n      console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n    const { scriptAddress } = this.nextSwap.createScript(utxoScriptValues)\r\n    const balance = await this.nextSwap.getBalance(scriptAddress)\r\n\r\n    debug('swap.core:flow')(`address=${scriptAddress}, balance=${balance}`)\r\n\r\n    if (balance === 0) {\r\n      this.finishStep({\r\n        isNextWithdrawn: true,\r\n      }, { step: 'withdraw-utxo' })\r\n      throw new Error(`Already withdrawn: address=${scriptAddress},balance=${balance}`)\r\n    }\r\n\r\n    await this.nextSwap.withdraw({\r\n      scriptValues: utxoScriptValues,\r\n      secret: _secret,\r\n    }, (hash) => {\r\n      debug('swap.core:flow')(`TX hash=${hash}`)\r\n      this.setState({\r\n        nextSwapWithdrawTransactionHash: hash,\r\n      })\r\n    })\r\n    debug('swap.core:flow')(`TX withdraw sent: ${this.state.nextSwapWithdrawTransactionHash}`)\r\n\r\n    this.finishStep({\r\n      isNextWithdrawn: true,\r\n    }, { step: 'withdraw-utxo' })\r\n  }\r\n}\r\n\r\n\r\nexport default ETH2NEXT\r\n"]}]}