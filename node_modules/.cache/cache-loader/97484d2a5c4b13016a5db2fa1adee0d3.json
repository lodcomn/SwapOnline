{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\EthTokenSwap.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\EthTokenSwap.ts","mtime":1614850209298},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.swaps/EthTokenSwap.ts"],"names":["debug","SwapInterface","constants","util","BigNumber","InputDataDecoder","EthTokenSwap","options","transactionHash","app","env","web3","eth","getTransaction","then","txResult","bytes32","decoder","decodeData","input","utils","bytesToHex","inputs","split","err","message","name","Error","Object","values","COINS","includes","toUpperCase","address","decimals","Array","isArray","abi","tokenAddress","tokenAbi","estimateGasPrice","console","warn","_swapName","gasLimit","gasPrice","fetchBalance","getWeb3","contract","Contract","ERC20","updateGasPrice","speed","methodName","args","_params","handleTransactionHash","methods","Promise","resolve","reject","params","from","getMyEthAddress","gas","gasAmount","estimateGas","dividedBy","toString","send","on","hash","error","receipt","data","amount","exp","pow","newAmount","times","approve","result","spender","allowance","call","targetWallet","participantAddress","createSwapTarget","createSwap","secretHash","replace","ownerAddress","swaps","swap","balance","parseInt","getBalance","expectedValue","expectedHash","helpers","repeatAsyncUntilResult","_secretHash","expectedValueWei","multipliedBy","isGreaterThan","_allSwapEvents","getPastEvents","fromBlock","toBlock","allSwapEvents","events","allEvents","event","push","fetchSwapEvents","swapEvents","filter","returnValues","create","close","rest","length","findSwap","wasClosed","status","token","getTargetWallet","getTargetWalletPromise","calcWithdrawOtherGas","secret","withdrawOther","_secret","getSecret","secretValue","test","flow","abClass","participant","buyAmount","sellAmount","waitConfirm","state","swapData","getParticipantEthAddress","destinationSellAddress","calcFee","tryCreateSwap","isEthContractFunded","checkAllowance","isLessThan","_checkSwapAlreadyExists","swapExists","refund","refundTx","room","sendMessage","ethSwapCreationTransactionHash","setState","canCreateEthTransaction","isFailedTransaction","gasAmountNeeded","isFailedTransactionError","isStoppedSwap","finishStep","step","once","ethSwapWithdrawTransactionHash","extractSecretFromTx","swapFlow","ethTokenSwap","secretFromTxhash","isEthWithdrawn","checkSecretExist","extractSecretFromContract","stopRepeat","isRefunded","secretFromContract","utxoCoin","scriptValues","utxoScriptValues","txHash","utxoScriptCreatingTransactionHash","isContractBalanceOk","checkBalance","balanceCheckError","dispatch","hasTargetWallet","needTargetWallet","destinationBuyAddress","toLowerCase","needed","getted","checkTokenIsValid","tokenAddressIsValid","onWithdrawReady","tryWithdraw","stopRepeater","withdrawFee","calcWithdrawGas","withdrawNeededGas","withdraw","requireWithdrawFee"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport debug from 'debug'\r\nimport SwapApp, { SwapInterface, constants, util } from 'swap.app'\r\nimport BigNumber from 'bignumber.js'\r\nimport InputDataDecoder from 'ethereum-input-data-decoder'\r\n\r\n\r\nclass EthTokenSwap extends SwapInterface {\r\n\r\n  _swapName: string\r\n  address: string\r\n  abi: any[]\r\n  decimals: number\r\n  tokenAddress: string\r\n  tokenAbi: any[]\r\n  gasLimit: number\r\n  gasPrice: number\r\n  fetchBalance: any\r\n  estimateGasPrice: any\r\n  _allSwapEvents: any\r\n\r\n  app: any\r\n  decoder: any\r\n  contract: any\r\n  ERC20: any\r\n\r\n  /**\r\n   *\r\n   * @param {object}    options\r\n   * @param {string}    options.name\r\n   * @param {string}    options.address\r\n   * @param {array}     options.abi\r\n   * @param {string}    options.tokenAddress\r\n   * @param {array}     options.tokenAbi\r\n   * @param {number}    options.gasLimit\r\n   * @param {function}  options.fetchBalance\r\n   */\r\n  constructor(options) {\r\n    super()\r\n\r\n    if (!options.name) {\r\n      throw new Error('EthTokenSwap: \"name\" required')\r\n    }\r\n    if (!Object.values(constants.COINS).includes(options.name.toUpperCase())) {\r\n      throw new Error('EthTokenSwap: \"name\" should be correct')\r\n    }\r\n    if (typeof options.address !== 'string') {\r\n      throw new Error('EthTokenSwap: \"address\" required')\r\n    }\r\n    if (typeof options.decimals !== 'number') {\r\n      throw new Error('EthTokenSwap: \"decimals\" required')\r\n    }\r\n    if (!Array.isArray(options.abi)) {\r\n      throw new Error('EthTokenSwap: \"abi\" required')\r\n    }\r\n    if (typeof options.tokenAddress !== 'string') {\r\n      throw new Error('EthTokenSwap: \"tokenAddress\" required')\r\n    }\r\n    if (!Array.isArray(options.tokenAbi)) {\r\n      throw new Error('EthTokenSwap: \"tokenAbi\" required')\r\n    }\r\n    if (typeof options.estimateGasPrice !== 'function') {\r\n      // ({ speed } = {}) => gasPrice\r\n      console.warn(`EthTokenSwap: \"estimateGasPrice\" is not a function. You will not be able use automatic mempool-based fee`)\r\n    }\r\n\r\n\r\n\r\n    this._swapName      = options.name.toUpperCase()\r\n\r\n    this.address        = options.address\r\n    this.abi            = options.abi\r\n    this.decimals       = options.decimals\r\n    this.tokenAddress   = options.tokenAddress\r\n    this.tokenAbi       = options.tokenAbi\r\n\r\n    this.gasLimit       = options.gasLimit || 2e5\r\n    this.gasPrice       = options.gasPrice || 2e9\r\n    this.fetchBalance   = options.fetchBalance\r\n    this.estimateGasPrice = options.estimateGasPrice || (() => {})\r\n\r\n  }\r\n\r\n  _initSwap(app) {\r\n    super._initSwap(app)\r\n\r\n    this.app = app\r\n\r\n    const web3 = this.app.env.getWeb3()\r\n    this.decoder        = new InputDataDecoder(this.abi)\r\n    this.contract       = new web3.eth.Contract(this.abi, this.address)\r\n    this.ERC20          = new web3.eth.Contract(this.tokenAbi, this.tokenAddress)\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   */\r\n  updateGas() {\r\n    console.warn(`EthSwap.updateGas() is deprecated and will be removed. Use .updateGasPrice()`)\r\n    return this.updateGasPrice()\r\n  }\r\n\r\n  async updateGasPrice() {\r\n    //@\r\n    debug('gas price before update', this.gasPrice)\r\n\r\n    try {\r\n      this.gasPrice = await this.estimateGasPrice({ speed: 'fast' })\r\n    } catch(err) {\r\n      debug(`EthTokenSwap: Error with gas update: ${err.message}, using old value gasPrice=${this.gasPrice}`)\r\n    }\r\n    //@\r\n    debug('gas price after update', this.gasPrice)\r\n  }\r\n\r\n  async send(methodName, args, _params = {}, handleTransactionHash) {\r\n    if (typeof this.contract.methods[methodName] !== 'function') {\r\n      throw new Error(`EthTokenSwap.send: No method ${methodName} in contract`)\r\n    }\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      const params = {\r\n        from: this.app.getMyEthAddress(),\r\n        gas: this.gasLimit,\r\n        gasPrice: this.gasPrice,\r\n        ..._params,\r\n      }\r\n      //@\r\n      debug(`EthTokenSwap -> ${methodName} -> params`, params)\r\n\r\n      let gasAmount = 0\r\n      try {\r\n        gasAmount = await this.contract.methods[methodName](...args).estimateGas(params)\r\n      } catch (estimateGasError) {\r\n        reject({ message: estimateGasError.message, gasAmount: new BigNumber(gasAmount).dividedBy(1e8).toString() })\r\n        return\r\n      }\r\n\r\n      params.gas = gasAmount\r\n      //@\r\n      debug(`EthTokenSwap -> ${methodName} -> gas`, gasAmount)\r\n      const receipt = await this.contract.methods[methodName](...args).send(params)\r\n        .on('transactionHash', (hash) => {\r\n          if (typeof handleTransactionHash === 'function') {\r\n            handleTransactionHash(hash)\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          reject({ message: error.message, gasAmount: new BigNumber(gasAmount).dividedBy(1e8).toString() })\r\n        })\r\n\r\n      resolve(receipt)\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {BigNumber} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async approve(data, handleTransactionHash: Function = null) {\r\n    const { amount } = data\r\n\r\n    const exp = new BigNumber(10).pow(this.decimals)\r\n    const newAmount = new BigNumber(amount).times(exp).toString()\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const params = {\r\n          from: this.app.getMyEthAddress(),\r\n          gas: this.gasLimit,\r\n          gasPrice: this.gasPrice,\r\n        }\r\n        //@\r\n        debug(`EthTokenSwap -> approve -> params`, params)\r\n\r\n        const gasAmount = await this.ERC20.methods.approve(this.address, newAmount).estimateGas(params)\r\n\r\n        params.gas = gasAmount\r\n        //@\r\n        debug(`EthTokenSwap -> approve -> gas`, gasAmount)\r\n\r\n        const result = await this.ERC20.methods.approve(this.address, newAmount).send(params)\r\n          .on('transactionHash', (hash) => {\r\n            if (typeof handleTransactionHash === 'function') {\r\n              handleTransactionHash(hash)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            reject({ message: error.message, gasAmount: new BigNumber(gasAmount).dividedBy(1e8).toString() })\r\n          })\r\n\r\n        resolve(result)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.spender\r\n   * @returns {Promise}\r\n   */\r\n  checkAllowance(data): Promise<number> {\r\n    const { spender } = data\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const result = await this.ERC20.methods.allowance(spender, this.address).call({\r\n          from: this.app.getMyEthAddress(),\r\n        })\r\n\r\n        resolve(result)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.participantAddress\r\n   * @param {BigNumber} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async create(data, handleTransactionHash) {\r\n    if (data.targetWallet && (data.targetWallet!==data.participantAddress)) {\r\n      return this.createSwapTarget(data, handleTransactionHash)\r\n    } else {\r\n      return this.createSwap(data, handleTransactionHash)\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.participantAddress\r\n   * @param {BigNumber} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async createSwap(data, handleTransactionHash) {\r\n    const { secretHash, participantAddress, amount } = data\r\n\r\n    const exp = new BigNumber(10).pow(this.decimals)\r\n    const newAmount = new BigNumber(amount).times(exp).toString()\r\n\r\n    const hash = `0x${secretHash.replace(/^0x/, '')}`\r\n    const args = [ hash, participantAddress, newAmount, this.tokenAddress ]\r\n\r\n    return this.send('createSwap', [...args], {}, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.participantAddress\r\n   * @param {BigNumber} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async createSwapTarget(data, handleTransactionHash) {\r\n    const { secretHash, participantAddress, amount, targetWallet } = data\r\n\r\n    const exp = new BigNumber(10).pow(this.decimals)\r\n    const newAmount = new BigNumber(amount).times(exp).toString()\r\n\r\n    const hash = `0x${secretHash.replace(/^0x/, '')}`\r\n    const args = [ hash, participantAddress, targetWallet, newAmount, this.tokenAddress ]\r\n\r\n    return this.send('createSwapTarget', [...args], {}, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  swaps(data) {\r\n    const { ownerAddress, participantAddress } = data\r\n\r\n    return this.contract.methods.swaps(ownerAddress, participantAddress).call()\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  async checkSwapExists(data) {\r\n    const swap = await this.swaps(data)\r\n    //@\r\n    debug('swapExists', swap)\r\n\r\n    const balance = swap && swap.balance ? parseInt(swap.balance) : 0\r\n\r\n    return balance > 0\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @returns {Promise}\r\n   */\r\n  getBalance(data) {\r\n    const { ownerAddress } = data\r\n\r\n    return this.contract.methods.getBalance(ownerAddress).call({\r\n      from: this.app.getMyEthAddress(),\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {BigNumber} data.expectedValue\r\n   * @returns {Promise.<string>}\r\n   */\r\n  async checkBalance(data) {\r\n    const { ownerAddress, participantAddress, expectedValue, expectedHash } = data\r\n\r\n    const balance = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.getBalance({ ownerAddress })\r\n    )\r\n    const swap = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.contract.methods.swaps(ownerAddress, participantAddress).call()\r\n    )\r\n    //@\r\n    const { secretHash } = swap\r\n    debug('swap.core:swaps')(`swap.secretHash`, secretHash)\r\n\r\n    const _secretHash = `${secretHash.replace(/^0x/, '')}`\r\n\r\n    debug('swap.core:swaps')(`secretHash: expected hash = ${expectedHash}, contract hash = ${_secretHash}`)\r\n\r\n    if (expectedHash !== _secretHash) {\r\n      return `Expected hash: ${expectedHash}, got: ${_secretHash}`\r\n    }\r\n\r\n    const expectedValueWei = new BigNumber(expectedValue).multipliedBy(this.decimals)\r\n\r\n    if (expectedValueWei.isGreaterThan(balance)) {\r\n      return `Expected value: ${expectedValueWei.toString()}, got: ${balance}`\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  async fetchSwapEvents() {\r\n    if (this._allSwapEvents) return this._allSwapEvents\r\n\r\n    const allSwapEvents = await this.contract.getPastEvents('allEvents', {\r\n      fromBlock: 0,\r\n      toBlock: 'latest',\r\n    })\r\n\r\n    this.contract.events.allEvents({ fromBlock: 0, toBlock: 'latest' })\r\n      .on('data', event => {\r\n        this._allSwapEvents.push(event)\r\n      })\r\n      .on('changed', (event) => {\r\n        console.error(`EthTokenSwap: fetchEvents: needs rescan`)\r\n        this._allSwapEvents = null\r\n      })\r\n      .on('error', err => {\r\n        console.error(err)\r\n        this._allSwapEvents = null\r\n      })\r\n\r\n    this._allSwapEvents = allSwapEvents\r\n\r\n    return allSwapEvents\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @returns {Promise}\r\n   */\r\n  async findSwap(data) {\r\n    const { secretHash } = data\r\n\r\n    const allSwapEvents = await this.fetchSwapEvents()\r\n\r\n    const swapEvents = allSwapEvents\r\n      .filter(({ returnValues }) => returnValues._secretHash === `0x${secretHash.replace('0x','')}`)\r\n\r\n    const [ create, close, ...rest ] = swapEvents\r\n\r\n    if (rest && rest.length) {\r\n      console.error(`More than two swaps with same hash`, rest)\r\n      // throw new Error(`More than two swaps with same hash`)\r\n    }\r\n\r\n    return [ create, close ]\r\n  }\r\n\r\n  /**\r\n    *\r\n    * @param {object} data\r\n    * @param {string} data.secretHash\r\n    * @returns {Promise(status)}\r\n    */\r\n\r\n  async wasClosed(data) {\r\n    const [ create, close ] = await this.findSwap(data)\r\n\r\n    if (!create) {\r\n      debug(`No swap with hash ${data.secretHash}`)\r\n      return 'no swap'\r\n    } else if (create && !close) {\r\n      debug(`Open yet!`)\r\n      return 'open'\r\n    } else {\r\n      if (close.event == 'Withdraw') {\r\n        debug(`Withdrawn`)\r\n        return 'withdrawn'\r\n      } else if (close.event == 'Refund') {\r\n        debug(`Refund`)\r\n        return 'refunded'\r\n      } else {\r\n        debug(`Unknown event, error`)\r\n        return 'error'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @returns {Promise(boolean)}\r\n   */\r\n  wasRefunded(data) {\r\n    return this.wasClosed(data)\r\n      .then((status) =>\r\n        status === 'refunded'\r\n      )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @returns {Promise(boolean)}\r\n   */\r\n  async wasWithdrawn(data) {\r\n    const status = await this.wasClosed(data)\r\n    return status === 'withdrawn'\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} tokenAddress\r\n   */\r\n  async checkTokenIsValid(data) {\r\n    const { ownerAddress, participantAddress } = data\r\n\r\n    debug('swap.core:swaps')(`Check token is valid. Needed token address: ${this.tokenAddress.toUpperCase()}`);\r\n    const swap = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.contract.methods.swaps(ownerAddress, participantAddress).call()\r\n    )\r\n\r\n    const { token } = swap\r\n    debug('swap.core:swaps')(`Token address at swap contract: ${token.toUpperCase()}`);\r\n\r\n    return (this.tokenAddress.toUpperCase() == token.toUpperCase())\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  hasTargetWallet() {\r\n    return !!this.contract.methods.getTargetWallet\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param {string} ownerAddress\r\n   * @returns {Promise.<string>}\r\n   */\r\n  async getTargetWallet(ownerAddress: string): Promise<string> {\r\n    let address: string = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.getTargetWalletPromise(ownerAddress)\r\n    )\r\n    return address\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} ownerAddress\r\n   * @returns {string}\r\n   */\r\n  async getTargetWalletPromise(ownerAddress) {\r\n    debug('swap.core:swaps')('EthTokenSwap->getTargetWallet');\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const targetWallet = await this.contract.methods.getTargetWallet(ownerAddress).call({\r\n          from: this.app.getMyEthAddress(),\r\n        })\r\n        debug('swap.core:swaps')('EthTokenSwap->getTargetWallet',targetWallet);\r\n\r\n        resolve(targetWallet)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.ownerAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async calcWithdrawGas(data) {\r\n    return this.calcWithdrawOtherGas({\r\n      ownerAddress: data.ownerAddress,\r\n      participantAddress: this.app.getMyEthAddress(),\r\n      secret: data.secret,\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.ownerAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async withdraw(data, handleTransactionHash) {\r\n    return this.withdrawOther({\r\n      ownerAddress: data.ownerAddress,\r\n      participantAddress: this.app.getMyEthAddress(),\r\n      secret: data.secret,\r\n    } , handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  async calcWithdrawNoMoneyGas(data) {\r\n    return this.calcWithdrawOtherGas({\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: data.participantAddress,\r\n      secret: data.secret,\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.participantAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async withdrawNoMoney(data, handleTransactionHash) {\r\n    return this.withdrawOther({\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: data.participantAddress,\r\n      secret: data.secret,\r\n    }, handleTransactionHash)\r\n  }\r\n\r\n  async calcWithdrawOtherGas(data) {\r\n    const { ownerAddress, participantAddress, secret } = data\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      const _secret = `0x${secret.replace(/^0x/, '')}`\r\n\r\n      const params = {\r\n        from: this.app.getMyEthAddress(),\r\n        gas: this.gasLimit,\r\n        gasPrice: this.gasPrice,\r\n      }\r\n\r\n      try {\r\n        const gasAmount = await this.contract.methods.withdrawOther(_secret, ownerAddress, participantAddress).estimateGas(params);\r\n        resolve(gasAmount)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} data.participantAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async withdrawOther(data, handleTransactionHash) {\r\n    const { ownerAddress, participantAddress, secret } = data\r\n\r\n    const _secret = `0x${secret.replace(/^0x/, '')}`\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return this.send('withdrawOther', [ _secret, ownerAddress, participantAddress ], {}, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.participantAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async refund(data, handleTransactionHash?: Function) {\r\n    const { participantAddress } = data\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return this.send('refund', [ participantAddress ], {}, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  getSecret(data) {\r\n    const { participantAddress } = data\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const secret = await this.contract.methods.getSecret(participantAddress).call({\r\n          from: this.app.getMyEthAddress(),\r\n        })\r\n\r\n        const secretValue = secret && !/^0x0+$/.test(secret) ? secret : null\r\n\r\n        resolve(secretValue)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param {string} transactionHash\r\n   * @returns {Promise<any>}\r\n   */\r\n  getSecretFromTxhash = (transactionHash) =>\r\n    this.app.env.web3.eth.getTransaction(transactionHash)\r\n      .then(txResult => {\r\n        try {\r\n          const bytes32 = this.decoder.decodeData(txResult.input)\r\n          return this.app.env.web3.utils.bytesToHex(bytes32.inputs[0]).split('0x')[1]\r\n        } catch (err) {\r\n          debug('swap.core:swaps')('Trying to fetch secret from tx: ' + err.message)\r\n          return\r\n        }\r\n      })\r\n\r\n\r\n  async fundERC20Contract({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const abClass = this\r\n    const {\r\n      participant,\r\n      buyAmount,\r\n      sellAmount,\r\n      waitConfirm,\r\n    } = flow.swap\r\n\r\n    const { secretHash } = flow.state\r\n\r\n    const swapData = {\r\n      participantAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n      secretHash,\r\n      amount: sellAmount,\r\n      targetWallet: flow.swap.destinationSellAddress,\r\n      calcFee: true,\r\n    }\r\n\r\n    // TODO fee after allowance\r\n    // EthTokenSwap -> approve need gas too\r\n    /* calc create contract fee and save this */\r\n    /*\r\n    flow.setState({\r\n      createSwapFee: await flow.ethTokenSwap.create(swapData),\r\n    })\r\n    */\r\n    swapData.calcFee = false\r\n    //debug('swap.core:flow')('create swap fee', flow.state.createSwapFee)\r\n\r\n    const tryCreateSwap = async () => {\r\n      const { isEthContractFunded } = flow.state\r\n\r\n      if (!isEthContractFunded) {\r\n        try {\r\n          debug('swap.core:flow')('fetching allowance')\r\n\r\n          const allowance = await abClass.checkAllowance({\r\n            spender: abClass.app.getMyEthAddress(),\r\n          })\r\n\r\n          debug('swap.core:flow')('allowance', allowance)\r\n\r\n          if (new BigNumber(allowance).isLessThan(sellAmount)) {\r\n            debug('swap.core:flow')('allowance < sellAmount', allowance, sellAmount)\r\n            await abClass.approve({\r\n              amount: sellAmount,\r\n            })\r\n          }\r\n\r\n          debug('swap.core:flow')('check swap exists')\r\n          const swapExists = await flow._checkSwapAlreadyExists()\r\n          if (swapExists) {\r\n            console.warn('Swap exists!! May be stucked. Try refund')\r\n            await abClass.refund({\r\n              participantAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n            }, (refundTx) => {\r\n              debug('swap.core:flow')('Stucked swap refunded', refundTx)\r\n            })\r\n          }\r\n          await abClass.create(swapData, async (hash) => {\r\n            debug('swap.core:flow')('create swap tx hash', hash)\r\n            flow.swap.room.sendMessage({\r\n              event: 'create eth contract',\r\n              data: {\r\n                ethSwapCreationTransactionHash: hash,\r\n              },\r\n            })\r\n\r\n            flow.swap.room.on('request eth contract', () => {\r\n              flow.swap.room.sendMessage({\r\n                event: 'create eth contract',\r\n                data: {\r\n                  ethSwapCreationTransactionHash: hash,\r\n                },\r\n              })\r\n            })\r\n\r\n            flow.setState({\r\n              ethSwapCreationTransactionHash: hash,\r\n              canCreateEthTransaction: true,\r\n              isFailedTransaction: false,\r\n            }, true)\r\n\r\n            debug('swap.core:flow')('created swap!', hash)\r\n          })\r\n\r\n        } catch (error) {\r\n          if (flow.state.ethSwapCreationTransactionHash) {\r\n            console.error('fail create swap, but tx already exists')\r\n            flow.setState({\r\n              canCreateEthTransaction: true,\r\n              isFailedTransaction: false,\r\n            }, true)\r\n            return true\r\n          }\r\n          const { message, gasAmount } = error\r\n\r\n          if ( /insufficient funds/.test(message) ) {\r\n            console.error(`Insufficient ETH for gas: ${gasAmount} ETH needed`)\r\n\r\n            flow.setState({\r\n              canCreateEthTransaction: false,\r\n              gasAmountNeeded: gasAmount,\r\n            })\r\n\r\n            return null\r\n          } else if ( /known transaction/.test(message) ) {\r\n            console.error(`known tx: ${message}`)\r\n          } else if ( /out of gas/.test(message) ) {\r\n            console.error(`tx failed (wrong secret?): ${message}`)\r\n          } else if ( /always failing transaction/.test(message) ) {\r\n            console.error(`Insufficient Token for transaction: ${message}`)\r\n          } else if ( /Failed to check for transaction receipt/.test(message) ) {\r\n            console.error(error)\r\n          } else if ( /replacement transaction underpriced/.test(message) ) {\r\n            console.error(error)\r\n          } else {\r\n            console.error(error)\r\n          }\r\n\r\n          flow.setState({\r\n            isFailedTransaction: true,\r\n            isFailedTransactionError: error.message,\r\n          })\r\n\r\n          return null\r\n        }\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    const isEthContractFunded = await util.helpers.repeatAsyncUntilResult(() =>\r\n      tryCreateSwap(),\r\n    )\r\n\r\n    const { isStoppedSwap } = flow.state\r\n\r\n    if (isEthContractFunded && !isStoppedSwap) {\r\n      debug('swap.core:flow')(`finish step`)\r\n      flow.finishStep({\r\n        isEthContractFunded,\r\n      }, {step: 'lock-eth'})\r\n    }\r\n  }\r\n\r\n\r\n  async getSecretFromAB2UTXO({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const abClass = this\r\n\r\n    flow.swap.room.once('ethWithdrawTxHash', async ({ethSwapWithdrawTransactionHash}) => {\r\n      flow.setState({\r\n        ethSwapWithdrawTransactionHash,\r\n      }, true)\r\n\r\n      const secretFromTxhash = await util.helpers.extractSecretFromTx({\r\n        flow,\r\n        swapFlow: flow.ethTokenSwap,\r\n        app: flow.app,\r\n        ethSwapWithdrawTransactionHash,\r\n      })\r\n\r\n      const { isEthWithdrawn } = flow.state\r\n\r\n      if (!isEthWithdrawn && secretFromTxhash) {\r\n        debug('swap.core:flow')('got secret from tx', ethSwapWithdrawTransactionHash, secretFromTxhash)\r\n        flow.finishStep({\r\n          isEthWithdrawn: true,\r\n          secret: secretFromTxhash,\r\n        }, {step: 'wait-withdraw-eth'})\r\n      }\r\n    })\r\n\r\n    flow.swap.room.sendMessage({\r\n      event: 'request ethWithdrawTxHash',\r\n    })\r\n\r\n    const { participant } = flow.swap\r\n\r\n    const checkSecretExist = async () => {\r\n      return await util.helpers.extractSecretFromContract({\r\n        flow,\r\n        swapFlow: abClass,\r\n        participantAddress: flow.app.getParticipantEthAddress(flow.swap),\r\n        ownerAddress: flow.app.getMyEthAddress(),\r\n        app: flow.app,\r\n      })\r\n    }\r\n\r\n    const secretFromContract = await util.helpers.repeatAsyncUntilResult((stopRepeat) => {\r\n      const { isEthWithdrawn, isRefunded } = flow.state\r\n\r\n      if (isEthWithdrawn || isRefunded) {\r\n        stopRepeat()\r\n\r\n        return false\r\n      }\r\n\r\n      return checkSecretExist()\r\n    })\r\n\r\n    const { isEthWithdrawn } = flow.state\r\n\r\n    if (secretFromContract && !isEthWithdrawn) {\r\n      debug('swap.core:flow')('got secret from smart contract', secretFromContract)\r\n\r\n      flow.finishStep({\r\n        isEthWithdrawn: true,\r\n        secret: secretFromContract,\r\n      }, { step: 'wait-withdraw-eth' })\r\n    }\r\n  }\r\n\r\n\r\n  async waitAB2UTXOContract({\r\n    flow,\r\n    utxoCoin,\r\n  }: {\r\n    flow: any,\r\n    utxoCoin: string,\r\n  }) {\r\n    const abClass = this\r\n\r\n    flow.swap.room.sendMessage({\r\n      event: 'request eth contract',\r\n    })\r\n\r\n    flow.swap.room.once(`request ${utxoCoin} script`, () => {\r\n      const {\r\n        utxoScriptValues: scriptValues,\r\n        utxoScriptCreatingTransactionHash: txHash,\r\n      } = flow.state\r\n\r\n      flow.swap.room.sendMessage({\r\n        event:  `create ${utxoCoin} script`,\r\n        data: {\r\n          scriptValues,\r\n          utxoScriptCreatingTransactionHash: txHash,\r\n        }\r\n      })\r\n    })\r\n\r\n    const { participant } = flow.swap\r\n\r\n    flow.swap.room.on('create eth contract', ({ ethSwapCreationTransactionHash }) => {\r\n      flow.setState({\r\n        ethSwapCreationTransactionHash,\r\n      }, true)\r\n    })\r\n\r\n    const isContractBalanceOk = await util.helpers.repeatAsyncUntilResult(async () => {\r\n      const balance = await abClass.getBalance({\r\n        ownerAddress: flow.app.getParticipantEthAddress(flow.swap),\r\n      })\r\n\r\n      debug('swap.core:flow')('Checking contract balance:', balance)\r\n\r\n      if (balance > 0) {\r\n        return true\r\n      }\r\n\r\n      return false\r\n    })\r\n\r\n    if (isContractBalanceOk) {\r\n      const { isEthContractFunded } = flow.state\r\n\r\n      if (!isEthContractFunded) {\r\n        flow.finishStep({\r\n          isEthContractFunded: true,\r\n        }, { step: 'wait-lock-eth' })\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  async withdrawFromAB2UTXO({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const abClass = this\r\n    const { buyAmount, participant } = flow.swap\r\n    const { secretHash, secret } = flow.state\r\n\r\n    const data = {\r\n      ownerAddress: flow.app.getParticipantEthAddress(flow.swap),\r\n      secret,\r\n    }\r\n\r\n    const balanceCheckError = await abClass.checkBalance({\r\n      ownerAddress: flow.app.getParticipantEthAddress(flow.swap),\r\n      participantAddress: flow.app.getMyEthAddress(),\r\n      expectedValue: buyAmount,\r\n      expectedHash: secretHash,\r\n    })\r\n\r\n    if (balanceCheckError) {\r\n      console.error('Waiting until deposit: ETH balance check error:', balanceCheckError)\r\n      flow.swap.events.dispatch('eth balance check error', balanceCheckError)\r\n\r\n      return\r\n    }\r\n\r\n    if (abClass.hasTargetWallet()) {\r\n      const targetWallet = await abClass.getTargetWallet(\r\n        flow.app.getParticipantEthAddress(flow.swap)\r\n      )\r\n      const needTargetWallet = (flow.swap.destinationBuyAddress)\r\n        ? flow.swap.destinationBuyAddress\r\n        : flow.app.getMyEthAddress()\r\n\r\n      if (targetWallet.toLowerCase() != needTargetWallet.toLowerCase()) {\r\n        console.error(\r\n          \"Destination address for tokens dismatch with needed (Needed, Getted). Stop swap now!\",\r\n          needTargetWallet,\r\n          targetWallet,\r\n        )\r\n\r\n        flow.swap.events.dispatch('address for tokens invalid', {\r\n          needed: needTargetWallet,\r\n          getted: targetWallet,\r\n        })\r\n\r\n        return\r\n      }\r\n    }\r\n\r\n    const tokenAddressIsValid = await abClass.checkTokenIsValid({\r\n      ownerAddress: flow.app.getParticipantEthAddress(flow.swap),\r\n      participantAddress: flow.app.getMyEthAddress(),\r\n    })\r\n\r\n    if (!tokenAddressIsValid) {\r\n      console.error(\"Tokens, blocked at contract dismatch with needed. Stop swap now!\")\r\n      return\r\n    }\r\n\r\n    const onWithdrawReady = () => {\r\n      flow.swap.room.once('request ethWithdrawTxHash', () => {\r\n        const { ethSwapWithdrawTransactionHash } = flow.state\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'ethWithdrawTxHash',\r\n          data: {\r\n            ethSwapWithdrawTransactionHash,\r\n          },\r\n        })\r\n      })\r\n\r\n      const { step } = flow.state\r\n\r\n      if (step >= 7) {\r\n        return\r\n      }\r\n\r\n      flow.finishStep({\r\n        isEthWithdrawn: true,\r\n      }, 'withdraw-eth')\r\n    }\r\n\r\n    const tryWithdraw = async (stopRepeater) => {\r\n      const { isEthWithdrawn } = flow.state\r\n\r\n      if (!isEthWithdrawn) {\r\n        try {\r\n          const { withdrawFee } = flow.state\r\n\r\n          if (!withdrawFee) {\r\n            const withdrawNeededGas = await abClass.calcWithdrawGas({\r\n              ownerAddress: data.ownerAddress,\r\n              secret,\r\n            })\r\n            flow.setState({\r\n              withdrawFee: withdrawNeededGas,\r\n            })\r\n            debug('swap.core:flow')('withdraw gas fee', withdrawNeededGas)\r\n          }\r\n\r\n          await abClass.withdraw(data, (hash) => {\r\n            flow.setState({\r\n              isEthWithdrawn: true,\r\n              ethSwapWithdrawTransactionHash: hash,\r\n              canCreateEthTransaction: true,\r\n              requireWithdrawFee: false,\r\n            }, true)\r\n\r\n            flow.swap.room.sendMessage({\r\n              event: 'ethWithdrawTxHash',\r\n              data: {\r\n                ethSwapWithdrawTransactionHash: hash,\r\n              }\r\n            })\r\n          })\r\n\r\n          stopRepeater()\r\n          return true\r\n        } catch (err) {\r\n          if ( /known transaction/.test(err.message) ) {\r\n            console.error(`known tx: ${err.message}`)\r\n            stopRepeater()\r\n            return true\r\n          } else if ( /out of gas/.test(err.message) ) {\r\n            console.error(`tx failed (wrong secret?): ${err.message}`)\r\n          } else if ( /insufficient funds for gas/.test(err.message) ) {\r\n            console.error(`insufficient fund for gas: ${err.message}`)\r\n\r\n            debug('swap.core:flow')('insufficient fund for gas... wait fund or request other side to withdraw')\r\n\r\n            const { requireWithdrawFee } = flow.state\r\n\r\n            if (!requireWithdrawFee) {\r\n              flow.swap.room.once('withdraw ready', ({ethSwapWithdrawTransactionHash}) => {\r\n                flow.setState({\r\n                  ethSwapWithdrawTransactionHash,\r\n                })\r\n\r\n                onWithdrawReady()\r\n              })\r\n\r\n              flow.setState({\r\n                requireWithdrawFee: true,\r\n              })\r\n            }\r\n\r\n          } else {\r\n            console.error(err)\r\n          }\r\n\r\n          flow.setState({\r\n            canCreateEthTransaction: false,\r\n          })\r\n\r\n          return null\r\n        }\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    const isEthWithdrawn = await util.helpers.repeatAsyncUntilResult((stopRepeater) =>\r\n      tryWithdraw(stopRepeater),\r\n    )\r\n\r\n    if (isEthWithdrawn) {\r\n      onWithdrawReady()\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default EthTokenSwap\r\n"]}]}