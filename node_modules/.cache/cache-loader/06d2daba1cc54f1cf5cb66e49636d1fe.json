{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\eth.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\eth.ts","mtime":1614842913752},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFN3YXBBcHAgZnJvbSAnc3dhcC5hcHAnOwppbXBvcnQgKiBhcyBtbmVtb25pY1V0aWxzIGZyb20gJy4uLy4uL2NvbW1vbi91dGlscy9tbmVtb25pYyc7Cgp2YXIgbG9naW5NbmVtb25pYyA9IGZ1bmN0aW9uIGxvZ2luTW5lbW9uaWMobW5lbW9uaWMpIHsKICB2YXIgd2FsbGV0TnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgdmFyIGFwcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogIHZhciB3YWxsZXQgPSBtbmVtb25pY1V0aWxzLmdldEV0aFdhbGxldCgnbm90aGluZycsIG1uZW1vbmljLCB3YWxsZXROdW1iZXIsIHBhdGgpOwogIHJldHVybiBsb2dpbih3YWxsZXQucHJpdmF0ZUtleSwgYXBwKTsKfTsKCnZhciBsb2dpbiA9IGZ1bmN0aW9uIGxvZ2luKF9wcml2YXRlS2V5LCBhcHApIHsKICBTd2FwQXBwLnJlcXVpcmVkKGFwcCk7CiAgdmFyIHN0b3JhZ2VLZXkgPSAiIi5jb25jYXQoYXBwLm5ldHdvcmssICI6ZXRoOnByaXZhdGVLZXkiKTsKCiAgdmFyIHByaXZhdGVLZXkgPSBfcHJpdmF0ZUtleSB8fCBhcHAuZW52LnN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5KTsKCiAgdmFyIGFjY291bnQ7CgogIGlmIChwcml2YXRlS2V5KSB7CiAgICBhY2NvdW50ID0gYXBwLmVudi53ZWIzLmV0aC5hY2NvdW50cy5wcml2YXRlS2V5VG9BY2NvdW50KHByaXZhdGVLZXkpOwogIH0gZWxzZSB7CiAgICBhY2NvdW50ID0gYXBwLmVudi53ZWIzLmV0aC5hY2NvdW50cy5jcmVhdGUoKTsKICB9CgogIGFwcC5lbnYud2ViMy5ldGguYWNjb3VudHMud2FsbGV0LmFkZChhY2NvdW50LnByaXZhdGVLZXkpOwoKICBpZiAoIV9wcml2YXRlS2V5KSB7CiAgICBhcHAuZW52LnN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBhY2NvdW50LnByaXZhdGVLZXkpOwogIH0KCiAgcmV0dXJuIGFjY291bnQ7Cn07Cgp2YXIgZ2V0UHVibGljRGF0YSA9IGZ1bmN0aW9uIGdldFB1YmxpY0RhdGEoYWNjb3VudCkgewogIHJldHVybiB7CiAgICBhZGRyZXNzOiBhY2NvdW50LmFkZHJlc3MsCiAgICBwdWJsaWNLZXk6IG51bGwKICB9Owp9OwoKZXhwb3J0IGRlZmF1bHQgewogIGxvZ2luOiBsb2dpbiwKICBsb2dpbk1uZW1vbmljOiBsb2dpbk1uZW1vbmljLAogIGdldFB1YmxpY0RhdGE6IGdldFB1YmxpY0RhdGEKfTs="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.auth/eth.ts"],"names":["SwapApp","mnemonicUtils","loginMnemonic","mnemonic","walletNumber","path","app","wallet","getEthWallet","login","privateKey","_privateKey","required","storageKey","network","env","storage","getItem","account","web3","eth","accounts","privateKeyToAccount","create","add","setItem","getPublicData","address","publicKey"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAO,KAAKC,aAAZ,MAA+B,6BAA/B;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAyC;AAAA,MAA9BC,YAA8B,uEAAjB,CAAiB;AAAA,MAAdC,IAAc;AAAA,MAARC,GAAQ;AAC7D,MAAMC,MAAM,GAAGN,aAAa,CAACO,YAAd,CAA2B,SAA3B,EAAsCL,QAAtC,EAAgDC,YAAhD,EAA8DC,IAA9D,CAAf;AACA,SAAOI,KAAK,CAACF,MAAM,CAACG,UAAR,EAAoBJ,GAApB,CAAZ;AACD,CAHD;;AAKA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAACE,WAAD,EAAcL,GAAd,EAAsB;AAClCN,EAAAA,OAAO,CAACY,QAAR,CAAiBN,GAAjB;AAEA,MAAMO,UAAU,aAAMP,GAAG,CAACQ,OAAV,oBAAhB;;AACA,MAAMJ,UAAU,GAAGC,WAAW,IAAIL,GAAG,CAACS,GAAJ,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBJ,UAAxB,CAAlC;;AACA,MAAIK,OAAJ;;AAEA,MAAIR,UAAJ,EAAgB;AACdQ,IAAAA,OAAO,GAAGZ,GAAG,CAACS,GAAJ,CAAQI,IAAR,CAAaC,GAAb,CAAiBC,QAAjB,CAA0BC,mBAA1B,CAA8CZ,UAA9C,CAAV;AACD,GAFD,MAGK;AACHQ,IAAAA,OAAO,GAAGZ,GAAG,CAACS,GAAJ,CAAQI,IAAR,CAAaC,GAAb,CAAiBC,QAAjB,CAA0BE,MAA1B,EAAV;AACD;;AAEDjB,EAAAA,GAAG,CAACS,GAAJ,CAAQI,IAAR,CAAaC,GAAb,CAAiBC,QAAjB,CAA0Bd,MAA1B,CAAiCiB,GAAjC,CAAqCN,OAAO,CAACR,UAA7C;;AAEA,MAAI,CAACC,WAAL,EAAkB;AAChBL,IAAAA,GAAG,CAACS,GAAJ,CAAQC,OAAR,CAAgBS,OAAhB,CAAwBZ,UAAxB,EAAoCK,OAAO,CAACR,UAA5C;AACD;;AAED,SAAOQ,OAAP;AACD,CArBD;;AAuBA,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB,CAACR,OAAD;AAAA,SAAc;AAClCS,IAAAA,OAAO,EAAET,OAAO,CAACS,OADiB;AAElCC,IAAAA,SAAS,EAAE;AAFuB,GAAd;AAAA,CAAtB;;AAMA,eAAe;AACbnB,EAAAA,KAAK,EAALA,KADa;AAEbP,EAAAA,aAAa,EAAbA,aAFa;AAGbwB,EAAAA,aAAa,EAAbA;AAHa,CAAf","sourcesContent":["import SwapApp from 'swap.app'\r\nimport * as mnemonicUtils from '../../common/utils/mnemonic'\r\n\r\n\r\nconst loginMnemonic = (mnemonic, walletNumber=0, path, app) => {\r\n  const wallet = mnemonicUtils.getEthWallet('nothing', mnemonic, walletNumber, path)\r\n  return login(wallet.privateKey, app)\r\n}\r\n\r\nconst login = (_privateKey, app) => {\r\n  SwapApp.required(app)\r\n\r\n  const storageKey = `${app.network}:eth:privateKey`\r\n  const privateKey = _privateKey || app.env.storage.getItem(storageKey)\r\n  let account\r\n\r\n  if (privateKey) {\r\n    account = app.env.web3.eth.accounts.privateKeyToAccount(privateKey)\r\n  }\r\n  else {\r\n    account = app.env.web3.eth.accounts.create()\r\n  }\r\n\r\n  app.env.web3.eth.accounts.wallet.add(account.privateKey)\r\n\r\n  if (!_privateKey) {\r\n    app.env.storage.setItem(storageKey, account.privateKey)\r\n  }\r\n\r\n  return account\r\n}\r\n\r\nconst getPublicData = (account) => ({\r\n  address: account.address,\r\n  publicKey: null,\r\n})\r\n\r\n\r\nexport default {\r\n  login,\r\n  loginMnemonic,\r\n  getPublicData,\r\n}\r\n"]}]}