{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\pages\\Wallet\\components\\Endpoints\\index.tsx","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\pages\\Wallet\\components\\Endpoints\\index.tsx","mtime":1614842914274},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JzsKaW1wb3J0IGNvbmZpZyBmcm9tICdhcHAtY29uZmlnJzsKaW1wb3J0IEhyZWYgZnJvbSAnY29tcG9uZW50cy9IcmVmL0hyZWYnOwoKdmFyIEFwaUVuZHBvaW50ID0gZnVuY3Rpb24gQXBpRW5kcG9pbnQocHJvcHMpIHsKICB2YXIgc3ltYm9sID0gcHJvcHMuc3ltYm9sLAogICAgICBpc0VSQzIwID0gcHJvcHMuaXNFUkMyMCwKICAgICAgaXNCVEMgPSBwcm9wcy5pc0JUQywKICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjsKICB2YXIgbG93ZXJTeW1ib2wgPSBzeW1ib2wudG9Mb3dlckNhc2UoKTsKICB2YXIgYXBpID0gJy4nOwoKICBpZiAoaXNFUkMyMCB8fCBsb3dlclN5bWJvbCA9PT0gJ2V0aCcpIHsKICAgIGFwaSA9IGNvbmZpZy5hcGkuZXRoZXJzY2FuWzBdOwogIH0gZWxzZSBpZiAoaXNCVEMpIHsKICAgIC8vIGJ0YyBbcGluLCBzbXMsIG11bHRpc2lnXQogICAgYXBpID0gY29uZmlnLmFwaS5iaXRwYXk7CiAgfSBlbHNlIGlmIChsb3dlclN5bWJvbCA9PT0gJ2dob3N0JykgewogICAgYXBpID0gY29uZmlnLmFwaS5naG9zdHNjYW47CiAgfSBlbHNlIGlmIChsb3dlclN5bWJvbCA9PT0gJ25leHQnKSB7CiAgICBhcGkgPSBjb25maWcuYXBpLm5leHRFeHBsb3JlcjsKICB9CgogIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChIcmVmLCB7CiAgICB0YWI6IGFwaQogIH0sIGNoaWxkcmVuKTsKfTsKCnZhciBMaW5rRW5kcG9pbnQgPSBmdW5jdGlvbiBMaW5rRW5kcG9pbnQocHJvcHMpIHsKICB2YXIgc3ltYm9sID0gcHJvcHMuc3ltYm9sLAogICAgICBhZGRyZXNzID0gcHJvcHMuYWRkcmVzcywKICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbiwKICAgICAgY29udHJhY3RBZGRyZXNzID0gcHJvcHMuY29udHJhY3RBZGRyZXNzLAogICAgICBpc0VSQzIwID0gcHJvcHMuaXNFUkMyMCwKICAgICAgaXNCVEMgPSBwcm9wcy5pc0JUQzsKICB2YXIgbG93ZXJTeW1ib2wgPSBzeW1ib2wudG9Mb3dlckNhc2UoKTsKICB2YXIgbGluayA9ICcuJzsKCiAgaWYgKGlzRVJDMjAgfHwgbG93ZXJTeW1ib2wgPT09ICdldGgnKSB7CiAgICBsaW5rID0gY29uZmlnLmxpbmsuZXRoZXJzY2FuOwogIH0gZWxzZSBpZiAoaXNCVEMpIHsKICAgIC8vIGJ0YyBbcGluLCBzbXMsIG11bHRpc2lnXQogICAgbGluayA9IGNvbmZpZy5saW5rLmJpdHBheTsKICB9IGVsc2UgaWYgKGxvd2VyU3ltYm9sID09PSAnZ2hvc3QnKSB7CiAgICBsaW5rID0gY29uZmlnLmxpbmsuZ2hvc3RzY2FuOwogIH0gZWxzZSBpZiAobG93ZXJTeW1ib2wgPT09ICduZXh0JykgewogICAgLy8gb25seSBtYWlubmV0IGxpbmsKICAgIGxpbmsgPSBjb25maWcubGluay5uZXh0RXhwbG9yZXI7CiAgfQoKICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGxvd2VyU3ltYm9sID09PSAnbmV4dCcgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChIcmVmLCB7CiAgICB0YWI6ICIiLmNvbmNhdChsaW5rLCAiLyMvYWRkcmVzcy8iKS5jb25jYXQoYWRkcmVzcykKICB9LCBjaGlsZHJlbikgOiBpc0VSQzIwID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSHJlZiwgewogICAgdGFiOiAiIi5jb25jYXQobGluaywgIi90b2tlbi8iKS5jb25jYXQoY29udHJhY3RBZGRyZXNzLCAiP2E9IikuY29uY2F0KGFkZHJlc3MpCiAgfSwgY2hpbGRyZW4pIDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoSHJlZiwgewogICAgdGFiOiAiIi5jb25jYXQobGluaywgIi9hZGRyZXNzLyIpLmNvbmNhdChhZGRyZXNzKQogIH0sIGNoaWxkcmVuKSk7Cn07CgpleHBvcnQgeyBBcGlFbmRwb2ludCwgTGlua0VuZHBvaW50IH07"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/pages/Wallet/components/Endpoints/index.tsx"],"names":["React","config","Href","ApiEndpoint","props","symbol","isERC20","isBTC","children","lowerSymbol","toLowerCase","api","etherscan","bitpay","ghostscan","nextExplorer","LinkEndpoint","address","contractAddress","link"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA,MACrBC,MADqB,GACgBD,KADhB,CACrBC,MADqB;AAAA,MACbC,OADa,GACgBF,KADhB,CACbE,OADa;AAAA,MACJC,KADI,GACgBH,KADhB,CACJG,KADI;AAAA,MACGC,QADH,GACgBJ,KADhB,CACGI,QADH;AAE7B,MAAMC,WAAW,GAAGJ,MAAM,CAACK,WAAP,EAApB;AACA,MAAIC,GAAG,GAAG,GAAV;;AAEA,MAAIL,OAAO,IAAIG,WAAW,KAAK,KAA/B,EAAsC;AACpCE,IAAAA,GAAG,GAAGV,MAAM,CAACU,GAAP,CAAWC,SAAX,CAAqB,CAArB,CAAN;AACD,GAFD,MAEO,IAAIL,KAAJ,EAAW;AAAE;AAClBI,IAAAA,GAAG,GAAGV,MAAM,CAACU,GAAP,CAAWE,MAAjB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,OAApB,EAA6B;AAClCE,IAAAA,GAAG,GAAGV,MAAM,CAACU,GAAP,CAAWG,SAAjB;AACD,GAFM,MAEA,IAAIL,WAAW,KAAK,MAApB,EAA4B;AACjCE,IAAAA,GAAG,GAAGV,MAAM,CAACU,GAAP,CAAWI,YAAjB;AACD;;AAED,sBAAO,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEJ;AAAX,KAAiBH,QAAjB,CAAP;AACD,CAhBD;;AAkBA,IAAMQ,YAAY,GAAG,SAAfA,YAAe,CAACZ,KAAD,EAAW;AAAA,MAE5BC,MAF4B,GAQ1BD,KAR0B,CAE5BC,MAF4B;AAAA,MAG5BY,OAH4B,GAQ1Bb,KAR0B,CAG5Ba,OAH4B;AAAA,MAI5BT,QAJ4B,GAQ1BJ,KAR0B,CAI5BI,QAJ4B;AAAA,MAK5BU,eAL4B,GAQ1Bd,KAR0B,CAK5Bc,eAL4B;AAAA,MAM5BZ,OAN4B,GAQ1BF,KAR0B,CAM5BE,OAN4B;AAAA,MAO5BC,KAP4B,GAQ1BH,KAR0B,CAO5BG,KAP4B;AAS9B,MAAME,WAAW,GAAGJ,MAAM,CAACK,WAAP,EAApB;AACA,MAAIS,IAAI,GAAG,GAAX;;AAEA,MAAIb,OAAO,IAAIG,WAAW,KAAK,KAA/B,EAAsC;AACpCU,IAAAA,IAAI,GAAGlB,MAAM,CAACkB,IAAP,CAAYP,SAAnB;AACD,GAFD,MAEO,IAAIL,KAAJ,EAAW;AAAE;AAClBY,IAAAA,IAAI,GAAGlB,MAAM,CAACkB,IAAP,CAAYN,MAAnB;AACD,GAFM,MAEA,IAAIJ,WAAW,KAAK,OAApB,EAA6B;AAClCU,IAAAA,IAAI,GAAGlB,MAAM,CAACkB,IAAP,CAAYL,SAAnB;AACD,GAFM,MAEA,IAAIL,WAAW,KAAK,MAApB,EAA4B;AAAE;AACnCU,IAAAA,IAAI,GAAGlB,MAAM,CAACkB,IAAP,CAAYJ,YAAnB;AACD;;AAED,sBACE,0CACGN,WAAW,KAAK,MAAhB,gBACG,oBAAC,IAAD;AAAM,IAAA,GAAG,YAAKU,IAAL,wBAAuBF,OAAvB;AAAT,KAA4CT,QAA5C,CADH,GAEGF,OAAO,gBACP,oBAAC,IAAD;AAAM,IAAA,GAAG,YAAKa,IAAL,oBAAmBD,eAAnB,gBAAwCD,OAAxC;AAAT,KAA6DT,QAA7D,CADO,gBAEP,oBAAC,IAAD;AAAM,IAAA,GAAG,YAAKW,IAAL,sBAAqBF,OAArB;AAAT,KAA0CT,QAA1C,CALN,CADF;AAUD,CAhCD;;AAkCA,SACEL,WADF,EAEEa,YAFF","sourcesContent":["import React from 'react'\r\nimport config from 'app-config'\r\nimport Href from 'components/Href/Href'\r\n\r\nconst ApiEndpoint = (props) => {\r\n  const { symbol, isERC20, isBTC, children } = props\r\n  const lowerSymbol = symbol.toLowerCase()\r\n  let api = '.'\r\n\r\n  if (isERC20 || lowerSymbol === 'eth') {\r\n    api = config.api.etherscan[0]\r\n  } else if (isBTC) { // btc [pin, sms, multisig]\r\n    api = config.api.bitpay\r\n  } else if (lowerSymbol === 'ghost') {\r\n    api = config.api.ghostscan\r\n  } else if (lowerSymbol === 'next') {\r\n    api = config.api.nextExplorer\r\n  }\r\n\r\n  return <Href tab={api}>{children}</Href>\r\n}\r\n\r\nconst LinkEndpoint = (props) => {\r\n  const {\r\n    symbol,\r\n    address,\r\n    children,\r\n    contractAddress,\r\n    isERC20,\r\n    isBTC,\r\n  } = props\r\n  const lowerSymbol = symbol.toLowerCase()\r\n  let link = '.'\r\n\r\n  if (isERC20 || lowerSymbol === 'eth') {\r\n    link = config.link.etherscan\r\n  } else if (isBTC) { // btc [pin, sms, multisig]\r\n    link = config.link.bitpay\r\n  } else if (lowerSymbol === 'ghost') {\r\n    link = config.link.ghostscan\r\n  } else if (lowerSymbol === 'next') { // only mainnet link\r\n    link = config.link.nextExplorer\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {lowerSymbol === 'next'\r\n        ? <Href tab={`${link}/#/address/${address}`}>{children}</Href>\r\n        : isERC20\r\n        ? <Href tab={`${link}/token/${contractAddress}?a=${address}`}>{children}</Href>\r\n        : <Href tab={`${link}/address/${address}`}>{children}</Href>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport {\r\n  ApiEndpoint,\r\n  LinkEndpoint,\r\n}\r\n"]}]}