{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\history.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\history.ts","mtime":1614842914289},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKaW1wb3J0IGFjdGlvbnMgZnJvbSAncmVkdXgvYWN0aW9ucyc7CmltcG9ydCByZWR1Y2VycyBmcm9tICdyZWR1eC9jb3JlL3JlZHVjZXJzJzsKaW1wb3J0IGdldEN1cnJlbmN5S2V5IGZyb20gJ2hlbHBlcnMvZ2V0Q3VycmVuY3lLZXknOwoKdmFyIHB1bGxUcmFuc2FjdGlvbnMgPSBmdW5jdGlvbiBwdWxsVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9ucykgewogIHZhciBfcmVmOwoKICB2YXIgZGF0YSA9IChfcmVmID0gW10pLmNvbmNhdC5hcHBseShfcmVmLCBbW11dLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodHJhbnNhY3Rpb25zKSkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgIHJldHVybiBiLmRhdGUgLSBhLmRhdGU7CiAgfSk7CgogIHJlZHVjZXJzLmhpc3Rvcnkuc2V0VHJhbnNhY3Rpb25zKGRhdGEpOwp9OwoKdmFyIGRlbGF5ID0gZnVuY3Rpb24gZGVsYXkobXMpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIHJlc29sdmUodHJ1ZSk7CiAgICB9LCBtcyk7CiAgfSk7Cn07Cgp2YXIgc2V0VHJhbnNhY3Rpb25zID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGFkZHJlc3MsIHR5cGUsIGNhbGxiYWNrKSB7CiAgICB2YXIgcmVkdWNlciwgY3VycmVuY3lUeHM7CiAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICByZWR1Y2VyID0gZ2V0Q3VycmVuY3lLZXkodHlwZSwgZmFsc2UpOwogICAgICAgICAgICB0eXBlID0gZ2V0Q3VycmVuY3lLZXkodHlwZSwgdHJ1ZSk7CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFthY3Rpb25zW3JlZHVjZXJdLmdldFRyYW5zYWN0aW9uKGFkZHJlc3MsIHR5cGUpLCByZWR1Y2VyID09PSAiYnRjIiAmJiBhY3Rpb25zLmJ0Y211bHRpc2lnLmlzQlRDTVNVc2VyQWRkcmVzcyhhZGRyZXNzKSA/IGFjdGlvbnMubXVsdGlzaWdUeC5mZXRjaChhZGRyZXNzKSA6IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoW10pOwogICAgICAgICAgICB9KQogICAgICAgICAgICAvKg0KICAgICAgICAgICAgLy8gRG9udCBzaG93IGludm9pY2VzIGluIHRyYW5zYWN0aW9uIGxpc3QuDQogICAgICAgICAgICAvLyBAVG9EbyAtIEZldGNoIG11bHRpc2lnIHRyYW5zYWN0aW9ucyBmb3IgY29uZmlybWF0aW9ucw0KICAgICAgICAgICAgKA0KICAgICAgICAgICAgICAoY29uZmlnLm9wdHMgJiYgY29uZmlnLm9wdHMuaW52b2ljZUVuYWJsZWQgJiYgYWN0aW9ucy51c2VyLmlzT3duZXIoYWRkcmVzcywgdHlwZSkpID8NCiAgICAgICAgICAgICAgICBhY3Rpb25zLmludm9pY2VzLmdldEludm9pY2VzKHsNCiAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiB0eXBlLnRvVXBwZXJDYXNlKCksDQogICAgICAgICAgICAgICAgICBhZGRyZXNzLA0KICAgICAgICAgICAgICAgIH0pIDoNCiAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZShbXSkpDQogICAgICAgICAgICApLA0KICAgICAgICAgICAgKi8KICAgICAgICAgICAgXSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjdXJyZW5jeVR4cyA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgY2FsbGJhY2soX3RvQ29uc3VtYWJsZUFycmF5KGN1cnJlbmN5VHhzKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcHVsbFRyYW5zYWN0aW9ucyhfdG9Db25zdW1hYmxlQXJyYXkoY3VycmVuY3lUeHMpKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvKg0KICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoYXN5bmMgcmVzb2x2ZSA9PiB7DQogICAgICAgICAgICAgIGNvbnN0IGVyY0FycmF5ID0gYXdhaXQgUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoY29uZmlnLmVyYzIwKQ0KICAgICAgICAgICAgICAgIC5tYXAoYXN5bmMgKG5hbWUsIGluZGV4KSA9PiB7DQogICAgICAgICAgICAgICAgICBhd2FpdCBkZWxheSg2NTAgKiBpbmRleCkNCiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGFjdGlvbnMudG9rZW4uZ2V0VHJhbnNhY3Rpb24obmFtZSkNCiAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCduYW1lIC0gJywgbmFtZSwgJ1xuJywgJ1xuJywgcmVzKQ0KICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcw0KICAgICAgICAgICAgICAgIH0pKQ0KICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlcmNBcnJheSkNCiAgICAgICAgICAgIH0pLnRoZW4oKGVyY1Rva2VucykgPT4gew0KICAgICAgICAgICAgICBwdWxsVHJhbnNhY3Rpb25zKFsuLi5tYWluVG9rZW5zLCAuLi5lcmNUb2tlbnNdKQ0KICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICovCgoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA5OwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdnZXRUcmFuc0Vycm9yOiAnLCBfY29udGV4dC50MCk7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDldXSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gc2V0VHJhbnNhY3Rpb25zKF94LCBfeDIsIF94MykgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgewogIHNldFRyYW5zYWN0aW9uczogc2V0VHJhbnNhY3Rpb25zCn07"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/history.ts"],"names":["actions","reducers","getCurrencyKey","pullTransactions","transactions","data","concat","sort","a","b","date","history","setTransactions","delay","ms","Promise","resolve","setTimeout","address","type","callback","reducer","all","getTransaction","btcmultisig","isBTCMSUserAddress","multisigTx","fetch","currencyTxs","console","error"],"mappings":";;;AACA,OAAOA,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAOC,cAAP,MAA2B,wBAA3B;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,YAAY,EAAI;AAAA;;AACvC,MAAIC,IAAI,GAAG,YAAGC,MAAH,cAAU,EAAV,4BAAiBF,YAAjB,IAA+BG,IAA/B,CAAoC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUA,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAArB;AAAA,GAApC,CAAX;;AACAT,EAAAA,QAAQ,CAACU,OAAT,CAAiBC,eAAjB,CAAiCP,IAAjC;AACD,CAHD;;AAKA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,CAACC,EAAD;AAAA,SAAQ,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,WAAIC,UAAU,CAAC;AAAA,aAAMD,OAAO,CAAC,IAAD,CAAb;AAAA,KAAD,EAAsBF,EAAtB,CAAd;AAAA,GAAnB,CAAR;AAAA,CAAd;;AAEA,IAAMF,eAAe;AAAA,uEAAG,iBAAOM,OAAP,EAAgBC,IAAhB,EAAsBC,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,YAAAA,OADkB,GACRnB,cAAc,CAACiB,IAAD,EAAO,KAAP,CADN;AAGtBA,YAAAA,IAAI,GAAGjB,cAAc,CAACiB,IAAD,EAAO,IAAP,CAArB;AAHsB;AAAA;AAAA,mBAMMJ,OAAO,CAACO,GAAR,CAAY,CACpCtB,OAAO,CAACqB,OAAD,CAAP,CAAiBE,cAAjB,CAAgCL,OAAhC,EAAyCC,IAAzC,CADoC,EAGjCE,OAAO,UAAP,IAAqBrB,OAAO,CAACwB,WAAR,CAAoBC,kBAApB,CAAuCP,OAAvC,CAAtB,GACElB,OAAO,CAAC0B,UAAR,CAAmBC,KAAnB,CAAyBT,OAAzB,CADF,GAEE,IAAIH,OAAJ,CAAY,UAACC,OAAD;AAAA,qBAAaA,OAAO,CAAC,EAAD,CAApB;AAAA,aAAZ;AAEJ;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlB0C,aAAZ,CANN;;AAAA;AAMdY,YAAAA,WANc;;AA0BpB,gBAAI,OAAOR,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,cAAAA,QAAQ,oBAAKQ,WAAL,EAAR;AACD,aAFD,MAEO;AACLzB,cAAAA,gBAAgB,oBAAKyB,WAAL,EAAhB;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA5CwB;AAAA;;AAAA;AAAA;AAAA;AA8CpBC,YAAAA,OAAO,CAACC,KAAR,CAAc,iBAAd;;AA9CoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAflB,eAAe;AAAA;AAAA;AAAA,GAArB;;AAmDA,eAAe;AACbA,EAAAA,eAAe,EAAfA;AADa,CAAf","sourcesContent":["import config from 'app-config'\r\nimport actions from 'redux/actions'\r\nimport reducers from 'redux/core/reducers'\r\nimport { getState } from 'redux/core'\r\nimport getCurrencyKey from 'helpers/getCurrencyKey'\r\n\r\n\r\nconst pullTransactions = transactions => {\r\n  let data = [].concat([], ...transactions).sort((a, b) => b.date - a.date)\r\n  reducers.history.setTransactions(data)\r\n}\r\n\r\nconst delay = (ms) => new Promise(resolve => setTimeout(() => resolve(true), ms))\r\n\r\nconst setTransactions = async (address, type, callback) => {\r\n  let reducer = getCurrencyKey(type, false)\r\n\r\n  type = getCurrencyKey(type, true)\r\n\r\n  try {\r\n    const currencyTxs = await Promise.all([\r\n      actions[reducer].getTransaction(address, type),\r\n      (\r\n        (reducer === `btc` && actions.btcmultisig.isBTCMSUserAddress(address)) ?\r\n          actions.multisigTx.fetch(address) :\r\n          new Promise((resolve) => resolve([]))\r\n      ),\r\n      /*\r\n      // Dont show invoices in transaction list.\r\n      // @ToDo - Fetch multisig transactions for confirmations\r\n      (\r\n        (config.opts && config.opts.invoiceEnabled && actions.user.isOwner(address, type)) ?\r\n          actions.invoices.getInvoices({\r\n            currency: type.toUpperCase(),\r\n            address,\r\n          }) :\r\n          new Promise((resolve) => resolve([]))\r\n      ),\r\n      */\r\n    ])\r\n    if (typeof callback === 'function') {\r\n      callback([...currencyTxs])\r\n    } else {\r\n      pullTransactions([...currencyTxs])\r\n    }\r\n    /*\r\n    await new Promise(async resolve => {\r\n      const ercArray = await Promise.all(Object.keys(config.erc20)\r\n        .map(async (name, index) => {\r\n          await delay(650 * index)\r\n          const res = await actions.token.getTransaction(name)\r\n          // console.log('name - ', name, '\\n', '\\n', res)\r\n          return res\r\n        }))\r\n      return resolve(ercArray)\r\n    }).then((ercTokens) => {\r\n      pullTransactions([...mainTokens, ...ercTokens])\r\n    })\r\n    */\r\n  } catch (error) {\r\n    console.error('getTransError: ', error)\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  setTransactions,\r\n}\r\n"]}]}