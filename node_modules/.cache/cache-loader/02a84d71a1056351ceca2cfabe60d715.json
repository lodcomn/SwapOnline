{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\messaging\\pubsubRoom\\index.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\messaging\\pubsubRoom\\index.ts","mtime":1614842913718},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/messaging/pubsubRoom/index.ts"],"names":["diff","EventEmitter","cloneDeep","clone","PROTOCOL","Connection","encoding","directConnection","namedQueryRun","DEFAULT_OPTIONS","pollInterval","index","PubSubRoom","libp2p","topic","options","_libp2p","_topic","_options","Object","assign","_peers","_connections","_handleDirectMessage","bind","_handleMessage","_onMessage","pubsub","Error","_interval","setInterval","_pollPeers","handle","handler","emitter","on","subscribe","error","console","log","_idx","slice","peer","Boolean","find","p","toString","clearInterval","keys","forEach","stop","removeListener","unhandle","unsubscribe","_message","message","peersInTopic","topics","get","peerId","sendTo","name","delay","func","peerStore","keyBook","data","has","toPeer","conn","err","emit","once","filter","seqno","Buffer","from","msg","to","topicIDs","topicCIDs","push","JSON","stringify","getSubscribers","newPeers","sort","_emitChanges","differences","added","removed","length","id","_idB58String","m"],"mappings":"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","sourcesContent":["import diff from 'hyperdiff'\r\nimport EventEmitter from 'events'\r\nimport { cloneDeep as clone } from 'lodash'\r\nimport PeerId from 'peer-id'\r\n\r\nimport debug from 'debug'\r\n\r\nimport { PROTOCOL } from './protocol'\r\nimport Connection from './connection'\r\nimport encoding from './encoding'\r\nimport directConnection from './direct-connection-handler'\r\nimport namedQueryRun from '../../utils/namedQuery'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  pollInterval: 1000\r\n}\r\n\r\nlet index = 0\r\n\r\nexport default class PubSubRoom extends EventEmitter {\r\n  _libp2p: any\r\n  _topic: any\r\n  _options: any\r\n  _peers: any[]\r\n  _connections: any\r\n  _handleMessage: any\r\n  _interval: NodeJS.Timeout\r\n  _idx: number\r\n\r\n  constructor (libp2p, topic, options) {\r\n    super()\r\n    this._libp2p = libp2p.libp2p || libp2p\r\n    this._topic = topic\r\n    this._options = Object.assign({}, clone(DEFAULT_OPTIONS), clone(options))\r\n    this._peers = []\r\n    this._connections = {}\r\n\r\n    this._handleDirectMessage = this._handleDirectMessage.bind(this)\r\n    this._handleMessage = this._onMessage.bind(this)\r\n\r\n    if (!this._libp2p.pubsub) {\r\n      throw new Error('pubsub has not been configured')\r\n    }\r\n\r\n    this._interval = setInterval(\r\n      this._pollPeers.bind(this),\r\n      this._options.pollInterval\r\n    )\r\n\r\n    this._libp2p.handle(PROTOCOL, directConnection.handler)\r\n    directConnection.emitter.on(this._topic, this._handleDirectMessage)\r\n\r\n    this._libp2p.pubsub.subscribe(this._topic, this._handleMessage)\r\n\r\n    this._libp2p.on('error', (error) => {\r\n      console.log('Libp2p error', error)\r\n    })\r\n\r\n    this._idx = index++\r\n  }\r\n\r\n  getPeers () {\r\n    return this._peers.slice(0)\r\n  }\r\n\r\n  hasPeer (peer) {\r\n    return Boolean(this._peers.find(p => p.toString() === peer.toString()))\r\n  }\r\n\r\n  async leave () {\r\n    clearInterval(this._interval)\r\n    Object.keys(this._connections).forEach((peer) => {\r\n      this._connections[peer].stop()\r\n    })\r\n    directConnection.emitter.removeListener(this._topic, this._handleDirectMessage)\r\n    this._libp2p.unhandle(PROTOCOL, directConnection.handler)\r\n    await this._libp2p.pubsub.unsubscribe(this._topic, this._handleMessage)\r\n  }\r\n\r\n  async broadcast (_message) {\r\n    const message = encoding(_message)\r\n\r\n    const peersInTopic = this._libp2p.pubsub.topics.get(this._topic)\r\n    if (peersInTopic) {\r\n      peersInTopic.forEach((peerId) => {\r\n        this.sendTo(peerId, _message)\r\n      })\r\n    }\r\n  }\r\n\r\n  sendTo (peer, message) {\r\n    namedQueryRun({\r\n      name: `libp2p_peer_${peer}`,\r\n      delay: 100,\r\n      func: async () => {\r\n        if (!this._libp2p.peerStore.keyBook.data.has(peer)) {\r\n          return\r\n        }\r\n        const toPeer = this._libp2p.peerStore.keyBook.data.get(peer)\r\n\r\n        let conn = this._connections[peer]\r\n\r\n        if (!conn) {\r\n          conn = new Connection(toPeer, this._libp2p, this)\r\n          conn.on('error', (err) => this.emit('error', err))\r\n          this._connections[peer] = conn\r\n\r\n          conn.once('disconnect', () => {\r\n            delete this._connections[peer]\r\n            this._peers = this._peers.filter((p) => p.toString() !== peer.toString())\r\n            this.emit('peer left', peer)\r\n          })\r\n        }\r\n\r\n        const seqno = Buffer.from([0])\r\n\r\n        const msg = {\r\n          to: toPeer,\r\n          from: this._libp2p.peerId,\r\n          data: Buffer.from(message).toString('hex'),\r\n          seqno: seqno.toString('hex'),\r\n          topicIDs: [this._topic],\r\n          topicCIDs: [this._topic]\r\n        }\r\n\r\n        conn.push(Buffer.from(JSON.stringify(msg)))\r\n      },\r\n    })\r\n  }\r\n\r\n  async _pollPeers () {\r\n    const newPeers = (await this._libp2p.pubsub.getSubscribers(this._topic)).sort()\r\n\r\n    if (this._emitChanges(newPeers)) {\r\n      this._peers = newPeers\r\n    }\r\n  }\r\n\r\n  _emitChanges (newPeers) {\r\n    const differences = diff(this._peers, newPeers)\r\n\r\n    differences.added.forEach((peer) => this.emit('peer joined', peer))\r\n    differences.removed.forEach((peer) => this.emit('peer left', peer))\r\n\r\n    return differences.added.length > 0 || differences.removed.length > 0\r\n  }\r\n\r\n  _onMessage (message) {\r\n\r\n    this.emit('message', message)\r\n  }\r\n\r\n  _handleDirectMessage (message) {\r\n    if (message.to.id === this._libp2p.peerId._idB58String) {\r\n      const m = Object.assign({}, message)\r\n      delete m.to\r\n\r\n      this.emit('message', m)\r\n    }\r\n  }\r\n}\r\n"]}]}