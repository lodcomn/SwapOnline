{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\token.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\token.ts","mtime":1614852129388},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/token.ts"],"names":["ERC20_ABI","helpers","apiLooper","constants","cacheStorageGet","cacheStorageSet","getState","actions","web3","reducers","config","BigNumber","InputDataDecoder","metamask","hasAdminFee","opts","fee","erc20","address","min","erc20Decoder","AddCustomERC20","contract","symbol","decimals","configStorage","process","env","MAINNET","tokensInfo","JSON","parse","localStorage","getItem","customERC","mainnet","testnet","setItem","stringify","GetCustromERC20","login","privateKey","contractAddress","nameContract","fullName","data","eth","accounts","privateKeyToAccount","console","info","create","wallet","add","setupContract","ethAddress","log","isMetamask","Error","isSweeped","balance","name","toLowerCase","currency","toUpperCase","currencyRate","isMnemonic","isERC20","isEnabled","isConnected","getAddress","user","setTokenAuthData","getBalance","undefined","tokensData","internalAddress","balanceInCache","setTokenBalance","amount","ERC20","Contract","methods","balanceOf","call","result","String","dividedBy","pow","toString","setTokenBalanceError","fetchBalance","getTransaction","ownAddress","ownType","Promise","resolve","warn","url","api","etherscan_ApiKey","join","get","then","res","transactions","filter","item","value","map","confirmations","type","hash","status","blockHash","Number","tokenDecimal","toNumber","to","date","timeStamp","direction","withToken","tokenContract","from","toWei","times","fromWei","wei","div","fetchFees","gasPrice","gasLimit","speed","ethToken","estimateGasPrice","defaultFeeRates","limit","send","gas","getTx","txRaw","transactionHash","getTxRouter","txId","getLinkToInfo","tx","link","etherscan","sendTransaction","method","args","params","callback","reject","on","error","receipt","sendWithAdminFee","sendDefault","feeConfig","adminFee","adminFeeAddress","adminFeeMinValue","adminFeeMin","feeFromAmount","multipliedBy","isGreaterThan","walletData","core","getWallet","newAmount","callMethod","transfer","loader","show","err","receiptAdminFee","approve","setAllowanceForToken","targetAllowance","allowance","isLessThanOrEqualTo","newTargetAllowance","max","fetchTokenTxInfo","ticker","cacheResponse","fetchTxInfo","txInfo","isContractTx","senderAddress","txs","ourTx","length","receiverAddress","Object","keys","forEach","key","txData","decodeData","input","inputs","minerFee","utils","toBN","afterBalance","minerFeeCurrency","confirmed","swapContract"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport ERC20_ABI from 'human-standard-token-abi'\r\nimport helpers, { apiLooper, constants, cacheStorageGet, cacheStorageSet } from 'helpers'\r\nimport { getState } from 'redux/core'\r\nimport actions from 'redux/actions'\r\nimport { web3, getWeb3 } from 'helpers/web3'\r\nimport reducers from 'redux/core/reducers'\r\nimport config from 'helpers/externalConfig'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport InputDataDecoder from 'ethereum-input-data-decoder'\r\n\r\nimport metamask from 'helpers/metamask'\r\n\r\n\r\n\r\nconst hasAdminFee = (\r\n  config\r\n  && config.opts\r\n  && config.opts.fee\r\n  && config.opts.fee.erc20\r\n  && config.opts.fee.erc20.fee\r\n  && config.opts.fee.erc20.address\r\n  && config.opts.fee.erc20.min\r\n) ? config.opts.fee.erc20 : false\r\n\r\nconst erc20Decoder = new InputDataDecoder(ERC20_ABI)\r\n\r\nconst AddCustomERC20 = (contract, symbol, decimals) => {\r\n  const configStorage = (process.env.MAINNET) ? 'mainnet' : 'testnet'\r\n  let tokensInfo = JSON.parse(localStorage.getItem(constants.localStorage.customERC))\r\n\r\n  if (!tokensInfo) {\r\n    tokensInfo = {\r\n      mainnet: {},\r\n      testnet: {},\r\n    }\r\n  }\r\n  tokensInfo[configStorage][contract] = {\r\n    address: contract,\r\n    symbol,\r\n    decimals,\r\n  }\r\n\r\n  localStorage.setItem(constants.localStorage.customERC, JSON.stringify(tokensInfo))\r\n}\r\n\r\nconst GetCustromERC20 = () => {\r\n  const configStorage = (process.env.MAINNET) ? 'mainnet' : 'testnet'\r\n\r\n  let tokensInfo = JSON.parse(localStorage.getItem(constants.localStorage.customERC))\r\n  if (!tokensInfo || !tokensInfo[configStorage]) return {}\r\n  return tokensInfo[configStorage]\r\n}\r\n\r\nconst login = (privateKey, contractAddress, nameContract, decimals, fullName) => {\r\n  let data\r\n  if (privateKey) {\r\n    data = web3.eth.accounts.privateKeyToAccount(privateKey)\r\n  } else {\r\n    console.info('Created account ETH Token ...')\r\n    data = web3.eth.accounts.create()\r\n    web3.eth.accounts.wallet.add(data)\r\n  }\r\n\r\n  web3.eth.accounts.wallet.add(data.privateKey)\r\n  console.info('Logged in with ETH Token', data)\r\n\r\n  setupContract(data.address, contractAddress, nameContract, decimals, fullName)\r\n}\r\n\r\n\r\nconst setupContract = (ethAddress, contractAddress, nameContract, decimals, fullName) => {\r\n  //@\r\n  console.log('setup contract', web3, web3.isMetamask)\r\n  if (!web3.eth.accounts.wallet[ethAddress]) {\r\n    throw new Error('web3 does not have given address')\r\n  }\r\n\r\n  const isSweeped = actions.eth.isSweeped()\r\n\r\n  let data = {\r\n    address: ethAddress,\r\n    balance: 0,\r\n    name: nameContract.toLowerCase(),\r\n    fullName,\r\n    currency: nameContract.toUpperCase(),\r\n    contractAddress,\r\n    decimals,\r\n    currencyRate: 1,\r\n    isMnemonic: isSweeped,\r\n    isMetamask: false,\r\n    isERC20: true,\r\n  }\r\n  if (metamask.isEnabled() && metamask.isConnected()) {\r\n    data = {\r\n      ...data,\r\n      address: metamask.getAddress(),\r\n      isMetamask: true,\r\n      //@\r\n      isConnected: true,\r\n    }\r\n  }\r\n\r\n  reducers.user.setTokenAuthData({ name: data.name, data })\r\n\r\n}\r\n\r\n\r\nconst getBalance = async (currency) => {\r\n  if (currency === undefined) {\r\n    return\r\n  }\r\n\r\n  const { user: { tokensData } } = getState()\r\n  const {\r\n    address: internalAddress,\r\n    contractAddress,\r\n    decimals,\r\n    name,\r\n  } = tokensData[currency.toLowerCase()]\r\n\r\n  const address = (metamask.isConnected()) ? metamask.getAddress() : false || internalAddress\r\n  const balanceInCache = cacheStorageGet('currencyBalances', `token_${currency}_${address}`)\r\n\r\n  if (balanceInCache !== false) {\r\n    reducers.user.setTokenBalance({\r\n      name,\r\n      amount: balanceInCache,\r\n    })\r\n    return balanceInCache\r\n  }\r\n\r\n  const ERC20 = new web3.eth.Contract(ERC20_ABI, contractAddress)\r\n\r\n  try {\r\n    const result = await ERC20.methods.balanceOf(address).call()\r\n\r\n    let amount = new BigNumber(String(result)).dividedBy(new BigNumber(String(10)).pow(decimals)).toString()\r\n    \r\n    reducers.user.setTokenBalance({ name, amount })\r\n    cacheStorageSet('currencyBalances', `token_${currency}_${address}`, amount, 60)\r\n\r\n    return amount\r\n  } catch (e) {\r\n    reducers.user.setTokenBalanceError({ name })\r\n  }\r\n}\r\n\r\n\r\nconst fetchBalance = async (address, contractAddress, decimals) => {\r\n  const ERC20 = new web3.eth.Contract(ERC20_ABI, contractAddress)\r\n  const result = await ERC20.methods.balanceOf(address).call()\r\n\r\n  const amount = new BigNumber(String(result)).dividedBy(new BigNumber(String(10)).pow(decimals)).toString()\r\n  return amount\r\n}\r\n\r\nconst getTransaction = (ownAddress, ownType) =>\r\n  new Promise((resolve) => {\r\n    const { user: { tokensData } } = getState()\r\n\r\n    if (ownType === undefined) {\r\n      console.warn('getTransaction - token type not deffined', ownAddress, ownType)\r\n      resolve([])\r\n      return\r\n    }\r\n\r\n\r\n    const { address, contractAddress } = tokensData[ownType.toLowerCase()]\r\n\r\n    console.log('currency', address, contractAddress)\r\n\r\n    const url = [\r\n      `?module=account&action=tokentx`,\r\n      `&contractaddress=${contractAddress}`,\r\n      `&address=${(ownAddress) || address}`,\r\n      `&startblock=0&endblock=99999999`,\r\n      `&sort=asc&apikey=${config.api.etherscan_ApiKey}`,\r\n    ].join('')\r\n\r\n    return apiLooper.get('etherscan', url, {\r\n      // @ToDo - may be need cache or use in memory cache\r\n      // cacheResponse: 60 * 1000\r\n    })\r\n      .then((res: any) => {\r\n        const transactions = res.result\r\n          .filter((item) => item.value > 0)\r\n          .map((item) => ({\r\n            confirmations: item.confirmations,\r\n            type: ownType.toLowerCase(),\r\n            hash: item.hash,\r\n            contractAddress: item.contractAddress,\r\n            status: item.blockHash != null ? 1 : 0,\r\n            value: new BigNumber(String(item.value)).dividedBy(new BigNumber(10).pow(Number(item.tokenDecimal))).toNumber(),\r\n            address: item.to,\r\n            date: item.timeStamp * 1000,\r\n            direction: address.toLowerCase() === item.to.toLowerCase() ? 'in' : 'out',\r\n          }))\r\n          .filter((item) => {\r\n            if (item.direction === 'in') return true\r\n            if (!hasAdminFee) return true\r\n            if (address.toLowerCase() === hasAdminFee.address.toLowerCase()) return true\r\n            if (item.address.toLowerCase() === hasAdminFee.address.toLowerCase()) return false\r\n\r\n            return true\r\n          })\r\n        resolve(transactions)\r\n      })\r\n      .catch(() => {\r\n        resolve([])\r\n      })\r\n  })\r\n\r\nconst withToken = (name) => {\r\n  if (!name) {\r\n    throw new Error('send: name is undefined')\r\n  }\r\n\r\n  name = name.toLowerCase()\r\n\r\n  const { user: { tokensData: { [name]: { address } } } } = getState()\r\n  const { [name]: { address: contractAddress, decimals } } = config.erc20\r\n\r\n  const tokenContract = new web3.eth.Contract(ERC20_ABI, contractAddress, { from: address })\r\n\r\n  const toWei: any = amount => new BigNumber(amount).times(new BigNumber(10).pow(decimals)).toString(10)\r\n  const fromWei: any = wei => new BigNumber(wei).div(new BigNumber(10).pow(decimals))\r\n\r\n  return { contractAddress, tokenContract, decimals, toWei, fromWei }\r\n}\r\n\r\n//@\r\nconst fetchFees = async ({ gasPrice, gasLimit, speed } = {}) => {\r\n  gasPrice = gasPrice || await helpers.ethToken.estimateGasPrice({ speed })\r\n  gasLimit = gasLimit || constants.defaultFeeRates.ethToken.limit.send\r\n\r\n  return {\r\n    gas: gasLimit,\r\n    gasPrice,\r\n  }\r\n}\r\n\r\nconst getTx = (txRaw) => txRaw.transactionHash\r\n\r\nconst getTxRouter = (txId, currency) => `/token/${currency.toUpperCase()}/tx/${txId}`\r\n\r\n\r\nconst getLinkToInfo = (tx) => {\r\n\r\n  if (!tx) {\r\n    return\r\n  }\r\n\r\n  return `${config.link.etherscan}/tx/${tx}`\r\n}\r\n//@\r\nconst sendTransaction = ({ contract, method }, { args, params = {} } = {}, callback) =>\r\n  new Promise(async (resolve, reject) => {\r\n    const receipt = await contract.methods[method](...args).send(params)\r\n      .on('transactionHash', (hash) => {\r\n        // eslint-disable-next-line\r\n        callback && callback(hash)\r\n      })\r\n      .catch((error) => {\r\n        reject(error)\r\n      })\r\n\r\n    resolve(receipt)\r\n  })\r\n\r\nconst send = (data) => (hasAdminFee) ? sendWithAdminFee(data) : sendDefault(data)\r\n//@\r\nconst sendWithAdminFee = async ({ name, from, to, amount, ...feeConfig } = {}) => {\r\n  const { tokenContract, toWei } = withToken(name)\r\n  const {\r\n    fee: adminFee,\r\n    address: adminFeeAddress,\r\n    min: adminFeeMinValue,\r\n  } = config.opts.fee.erc20\r\n\r\n  const adminFeeMin = new BigNumber(adminFeeMinValue)\r\n\r\n  // fee - from amount - percent\r\n\r\n  let feeFromAmount: any = new BigNumber(adminFee).dividedBy(100).multipliedBy(amount)\r\n  if (adminFeeMin.isGreaterThan(feeFromAmount)) feeFromAmount = adminFeeMin\r\n\r\n  feeFromAmount = toWei(feeFromAmount.toNumber()) // Admin fee\r\n\r\n  const params = {\r\n    //@\r\n    ... await fetchFees({ ...feeConfig }),\r\n    from,\r\n  }\r\n\r\n  const walletData = actions.core.getWallet({\r\n    address: from,\r\n    currency: name,\r\n  })\r\n\r\n  const newAmount = toWei(amount)\r\n  const callMethod = { contract: tokenContract, method: 'transfer' }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const receipt = tokenContract.methods.transfer(to, newAmount).send(params)\r\n      .on('transactionHash', (hash) => {\r\n        const txId = `${config.link.etherscan}/tx/${hash}`\r\n        actions.loader.show(true, { txId })\r\n      })\r\n      .on('error', (err) => {\r\n        reject(err)\r\n      })\r\n\r\n    receipt.then(() => {\r\n      resolve(receipt)\r\n      if (walletData.isMetamask) return\r\n      // Send admin fee\r\n      new Promise(async () => {\r\n        const receiptAdminFee = await tokenContract.methods.transfer(adminFeeAddress, feeFromAmount).send(params)\r\n          .on('transactionHash', (hash) => {\r\n            console.log('ERC20 admin fee tx', hash)\r\n          })\r\n      })\r\n    })\r\n  })\r\n}\r\n//@\r\nconst sendDefault = async ({ name, from, to, amount, ...feeConfig } = {}) => {\r\n  const { tokenContract, toWei } = withToken(name)\r\n  const params = {\r\n    //@\r\n    ... await fetchFees({ ...feeConfig }),\r\n    from,\r\n  }\r\n\r\n  const newAmount = toWei(amount)\r\n  const callMethod = { contract: tokenContract, method: 'transfer' }\r\n\r\n  // return sendTransaction(\r\n  //   { contract: tokenContract, method: 'transfer' },\r\n  //   { args: [ to, newAmount ], params },\r\n  //   (hash) => {\r\n  //     const txId = `${config.link.etherscan}/tx/${hash}`\r\n  //     actions.loader.show(true, { txId })\r\n  //   })\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    const receipt = await tokenContract.methods.transfer(to, newAmount).send(params)\r\n      .on('transactionHash', (hash) => {\r\n        const txId = `${config.link.etherscan}/tx/${hash}`\r\n        actions.loader.show(true, { txId })\r\n      })\r\n      .on('error', (err) => {\r\n        reject(err)\r\n      })\r\n\r\n    resolve(receipt)\r\n  })\r\n}\r\n//@\r\nconst approve = async ({ name, to, amount, ...feeConfig } = {}) => {\r\n  const { tokenContract, toWei } = withToken(name)\r\n  //@\r\n  const params = await fetchFees({ ...feeConfig })\r\n\r\n  const newAmount = toWei(amount)\r\n//@\r\n  return sendTransaction(\r\n    { contract: tokenContract, method: 'approve' },\r\n    { args: [to, newAmount], params })\r\n}\r\n\r\nconst setAllowanceForToken = async ({ name, to, targetAllowance, ...config }) => {\r\n  const { tokenContract, toWei } = withToken(name)\r\n\r\n  name = name.toLowerCase()\r\n\r\n  const { user: { tokensData: { [name]: { address } } } } = getState()\r\n\r\n  const allowance = await tokenContract.methods.allowance(address, to).call()\r\n\r\n  // if there is already enough allowance, skip\r\n  if (new BigNumber(toWei(targetAllowance)).isLessThanOrEqualTo(allowance)) {\r\n    return Promise.resolve()\r\n  }\r\n  // but if not, set allowance to 1 billion (or requested target allowance, if it's bigger than 1 billion)\r\n\r\n  const newTargetAllowance = BigNumber.max(1e9, targetAllowance)\r\n\r\n  return approve({ name, to, amount: newTargetAllowance, ...config })\r\n}\r\n\r\nconst fetchTokenTxInfo = (ticker, hash, cacheResponse) => {\r\n  return new Promise(async (resolve) => {\r\n    let txInfo = await <IUniversalObj>fetchTxInfo(hash, cacheResponse)\r\n\r\n    if (txInfo.isContractTx) {\r\n      // This is tx to contract. Fetch all txs and find this tx\r\n      const txs = await <IUniversalObj>getTransaction(txInfo.senderAddress, ticker)\r\n\r\n      const ourTx = txs.filter((tx) => tx.hash.toLowerCase() === hash.toLowerCase())\r\n      if (ourTx.length) {\r\n        txInfo.amount = ourTx[0].value\r\n        txInfo.adminFee = false // Swap dont have service fee\r\n\r\n        if (ourTx[0].direction == `in`) {\r\n          txInfo = {\r\n            ...txInfo,\r\n            receiverAddress: txInfo.senderAddress,\r\n            senderAddress: txInfo.receiverAddress,\r\n          }\r\n        }\r\n      }\r\n    }\r\n    resolve(txInfo)\r\n  })\r\n}\r\n\r\nconst fetchTxInfo = (hash, cacheResponse) => new Promise((resolve) => {\r\n  const { user: { tokensData } } = getState()\r\n\r\n  const url = `?module=proxy&action=eth_getTransactionByHash&txhash=${hash}&apikey=${config.api.etherscan_ApiKey}`\r\n\r\n  return apiLooper.get('etherscan', url, {\r\n    cacheResponse,\r\n  })\r\n    .then((res: any) => {\r\n      if (res && res.result) {\r\n        let amount: number | string = 0\r\n        let receiverAddress = res.result.to\r\n\r\n        const contractAddress = res.result.to\r\n        let tokenDecimal = 18\r\n\r\n        // Определим токен по адрессу контракта\r\n        Object.keys(tokensData).forEach((key) => {\r\n          if (tokensData[key]\r\n              && tokensData[key].contractAddress\r\n              && tokensData[key].contractAddress.toLowerCase() == contractAddress.toLowerCase()\r\n              && tokensData[key].decimals\r\n          ) {\r\n            tokenDecimal = tokensData[key].decimals\r\n            return false\r\n          }\r\n        })\r\n\r\n        const txData = erc20Decoder.decodeData(res.result.input)\r\n\r\n        if (txData\r\n            && (\r\n              txData.name === `transfer`\r\n              || txData.method === `transfer`\r\n            )\r\n            && txData.inputs\r\n            && txData.inputs.length == 2\r\n        ) {\r\n          receiverAddress = `0x${txData.inputs[0]}`\r\n          amount = new BigNumber(txData.inputs[1]).div(new BigNumber(10).pow(tokenDecimal)).toString()\r\n        } else {\r\n          // This is not erc20 transfer tx (swap tx)\r\n        }\r\n\r\n        const {\r\n          from,\r\n          gas,\r\n          gasPrice,\r\n          blockHash,\r\n        } = res.result\r\n\r\n        // Calc miner fee, used for this tx\r\n        const minerFee = new BigNumber(web3.utils.toBN(gas).toNumber())\r\n          .multipliedBy(web3.utils.toBN(gasPrice).toNumber())\r\n          .dividedBy(1e18).toNumber()\r\n\r\n        let adminFee: any = false\r\n\r\n        if (hasAdminFee) {\r\n          adminFee = new BigNumber(hasAdminFee.fee).dividedBy(100).multipliedBy(amount)\r\n\r\n          if (new BigNumber(hasAdminFee.min).isGreaterThan(adminFee)) adminFee = new BigNumber(hasAdminFee.min)\r\n\r\n          adminFee = adminFee.toNumber()\r\n        }\r\n\r\n        resolve({\r\n          amount,\r\n          afterBalance: null,\r\n          receiverAddress,\r\n          senderAddress: from,\r\n          minerFee,\r\n          minerFeeCurrency: 'ETH',\r\n          adminFee,\r\n          confirmed: (blockHash != null),\r\n          isContractTx: (contractAddress.toLowerCase() === config.swapContract.erc20.toLowerCase()),\r\n        })\r\n\r\n      } else {\r\n        resolve(false)\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n      resolve(false)\r\n    })\r\n})\r\n\r\nexport default {\r\n  login,\r\n  getBalance,\r\n  getTransaction,\r\n  send,\r\n  getTx,\r\n  getLinkToInfo,\r\n  approve,\r\n  setAllowanceForToken,\r\n  fetchBalance,\r\n  AddCustomERC20,\r\n  GetCustromERC20,\r\n  fetchTokenTxInfo,\r\n  fetchTxInfo,\r\n  getTxRouter,\r\n  withToken,\r\n}\r\n"]}]}