{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\web3connect\\providers\\index.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\web3connect\\providers\\index.ts","mtime":1614842913727},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEluamVjdGVkUHJvdmlkZXIgZnJvbSAnLi9JbmplY3RlZFByb3ZpZGVyJzsKaW1wb3J0IFdhbGxldENvbm5lY3RQcm92aWRlciBmcm9tICcuL1dhbGxldENvbm5lY3RQcm92aWRlcic7CmltcG9ydCBTVVBQT1JURURfUFJPVklERVJTIGZyb20gJy4vc3VwcG9ydGVkJzsKZXhwb3J0IHZhciBpc0luamVjdGVkRW5hYmxlZCA9IGZ1bmN0aW9uIGlzSW5qZWN0ZWRFbmFibGVkKCkgewogIHJldHVybiB3aW5kb3cgJiYgd2luZG93LmV0aGVyZXVtOwp9Owp2YXIgX2NhY2hlZFByb3ZpZGVycyA9IHt9OwoKdmFyIGdldFByb3ZpZGVyQnlOYW1lID0gZnVuY3Rpb24gZ2V0UHJvdmlkZXJCeU5hbWUod2ViM2Nvbm5lY3QsIHByb3ZpZGVyTmFtZSwgbmV3SW5zdGFuY2UpIHsKICBpZiAoIV9jYWNoZWRQcm92aWRlcnNbcHJvdmlkZXJOYW1lXSB8fCBuZXdJbnN0YW5jZSkgewogICAgc3dpdGNoIChwcm92aWRlck5hbWUpIHsKICAgICAgY2FzZSBTVVBQT1JURURfUFJPVklERVJTLklOSkVDVEVEOgogICAgICAgIF9jYWNoZWRQcm92aWRlcnNbcHJvdmlkZXJOYW1lXSA9IG5ldyBJbmplY3RlZFByb3ZpZGVyKHdlYjNjb25uZWN0LCB7CiAgICAgICAgICBzdXBwb3J0ZWRDaGFpbklkczogW3dlYjNjb25uZWN0Ll93ZWIzQ2hhaW5JZF0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gX2NhY2hlZFByb3ZpZGVyc1twcm92aWRlck5hbWVdOwoKICAgICAgY2FzZSBTVVBQT1JURURfUFJPVklERVJTLldBTExFVENPTk5FQ1Q6CiAgICAgICAgdmFyIHJwYyA9IHt9OwogICAgICAgIHJwY1t3ZWIzY29ubmVjdC5fd2ViM0NoYWluSWRdID0gd2ViM2Nvbm5lY3QuX3dlYjNSUEM7CiAgICAgICAgX2NhY2hlZFByb3ZpZGVyc1twcm92aWRlck5hbWVdID0gbmV3IFdhbGxldENvbm5lY3RQcm92aWRlcih3ZWIzY29ubmVjdCwgewogICAgICAgICAgcnBjOiBycGMsCiAgICAgICAgICBicmlkZ2U6ICJodHRwczovL2JyaWRnZS53YWxsZXRjb25uZWN0Lm9yZyIsCiAgICAgICAgICBxcmNvZGU6IHRydWUsCiAgICAgICAgICBwb2xsaW5nSW50ZXJ2YWw6IDEyMDAwCiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIF9jYWNoZWRQcm92aWRlcnNbcHJvdmlkZXJOYW1lXTsKCiAgICAgIGRlZmF1bHQ6CiAgICAgICAgY29uc29sZS5lcnJvcignd2ViM2Nvbm5lY3QgLSBub3Qgc3VwcG9ydGVkIHByb3ZpZGVyJywgcHJvdmlkZXJOYW1lKTsKICAgIH0KICB9IGVsc2UgewogICAgcmV0dXJuIF9jYWNoZWRQcm92aWRlcnNbcHJvdmlkZXJOYW1lXTsKICB9Cn07CgpleHBvcnQgZGVmYXVsdCBnZXRQcm92aWRlckJ5TmFtZTs="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/web3connect/providers/index.ts"],"names":["InjectedProvider","WalletConnectProvider","SUPPORTED_PROVIDERS","isInjectedEnabled","window","ethereum","_cachedProviders","getProviderByName","web3connect","providerName","newInstance","INJECTED","supportedChainIds","_web3ChainId","WALLETCONNECT","rpc","_web3RPC","bridge","qrcode","pollingInterval","console","error"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,mBAAP,MAAgC,aAAhC;AAIA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AACrC,SAAQC,MAAM,IAAIA,MAAM,CAACC,QAAzB;AACD,CAFM;AAIP,IAAMC,gBAAgB,GAAG,EAAzB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAAcC,YAAd,EAA4BC,WAA5B,EAA4C;AACpE,MAAI,CAACJ,gBAAgB,CAACG,YAAD,CAAjB,IAAmCC,WAAvC,EAAoD;AAClD,YAAQD,YAAR;AACE,WAAKP,mBAAmB,CAACS,QAAzB;AACEL,QAAAA,gBAAgB,CAACG,YAAD,CAAhB,GAAkC,IAAIT,gBAAJ,CAAqBQ,WAArB,EAAkC;AAClEI,UAAAA,iBAAiB,EAAE,CACjBJ,WAAW,CAACK,YADK;AAD+C,SAAlC,CAAlC;AAKA,eAAOP,gBAAgB,CAACG,YAAD,CAAvB;;AACF,WAAKP,mBAAmB,CAACY,aAAzB;AACE,YAAMC,GAAG,GAAG,EAAZ;AACAA,QAAAA,GAAG,CAACP,WAAW,CAACK,YAAb,CAAH,GAAgCL,WAAW,CAACQ,QAA5C;AAEAV,QAAAA,gBAAgB,CAACG,YAAD,CAAhB,GAAiC,IAAIR,qBAAJ,CAA0BO,WAA1B,EAAuC;AACtEO,UAAAA,GAAG,EAAHA,GADsE;AAEtEE,UAAAA,MAAM,oCAFgE;AAGtEC,UAAAA,MAAM,EAAE,IAH8D;AAItEC,UAAAA,eAAe,EAAE;AAJqD,SAAvC,CAAjC;AAMA,eAAOb,gBAAgB,CAACG,YAAD,CAAvB;;AACF;AACEW,QAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd,EAAsDZ,YAAtD;AApBJ;AAsBD,GAvBD,MAuBO;AACL,WAAOH,gBAAgB,CAACG,YAAD,CAAvB;AACD;AACF,CA3BD;;AA6BA,eAAeF,iBAAf","sourcesContent":["import InjectedProvider from './InjectedProvider'\r\nimport WalletConnectProvider from './WalletConnectProvider'\r\nimport SUPPORTED_PROVIDERS from './supported'\r\n\r\n\r\n\r\nexport const isInjectedEnabled = () => {\r\n  return (window && window.ethereum)\r\n}\r\n\r\nconst _cachedProviders = {}\r\n\r\nconst getProviderByName = (web3connect, providerName, newInstance) => {\r\n  if (!_cachedProviders[providerName] || newInstance) {\r\n    switch (providerName) {\r\n      case SUPPORTED_PROVIDERS.INJECTED:\r\n        _cachedProviders[providerName ] = new InjectedProvider(web3connect, {\r\n          supportedChainIds: [\r\n            web3connect._web3ChainId,\r\n          ],\r\n        })\r\n        return _cachedProviders[providerName]\r\n      case SUPPORTED_PROVIDERS.WALLETCONNECT:\r\n        const rpc = {}\r\n        rpc[web3connect._web3ChainId] = web3connect._web3RPC\r\n\r\n        _cachedProviders[providerName] = new WalletConnectProvider(web3connect, {\r\n          rpc,\r\n          bridge: `https://bridge.walletconnect.org`,\r\n          qrcode: true,\r\n          pollingInterval: 12000,\r\n        })\r\n        return _cachedProviders[providerName]\r\n      default:\r\n        console.error('web3connect - not supported provider', providerName)\r\n    }\r\n  } else {\r\n    return _cachedProviders[providerName]\r\n  }\r\n}\r\n\r\nexport default getProviderByName"]}]}