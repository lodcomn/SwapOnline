{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\GHOST2ETHTOKEN.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\GHOST2ETHTOKEN.ts","mtime":1614842913759},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/GHOST2ETHTOKEN.ts"],"names":["debug","constants","util","AtomicAB2UTXO","BigNumber","tokenName","GHOST2ETHTOKEN","swap","ghostSwap","getRefundHexTransaction","scriptValues","state","utxoScriptValues","secret","then","txHex","setState","refundTxHex","utxoCoin","_flowName","getName","stepNumbers","ethTokenSwap","ownerSwap","participantSwap","abBlockchain","utxoBlockchain","isUTXOSide","Error","step","isStoppedSwap","signTransactionHash","isSignFetching","isParticipantSigned","ethSwapCreationTransactionHash","secretHash","isBalanceFetching","isBalanceEnough","balance","isEthContractFunded","ghostSwapWithdrawTransactionHash","ethSwapWithdrawTransactionHash","canCreateEthTransaction","isEthWithdrawn","refundTransactionHash","isRefunded","withdrawFee","isFinished","isSwapExist","_persistState","flow","signUTXOSide","syncBalance","onTransactionHash","txID","utxoScriptCreatingTransactionHash","room","once","sendMessage","event","data","sellAmount","fundScript","amount","checkGHOSTScriptBalance","createScript","scriptAddress","fetchUnspents","unspents","length","txid","getBalance","isEnoughMoney","isGreaterThanOrEqualTo","times","scriptBalance","div","dp","helpers","repeatAsyncUntilResult","stopRepeat","finishStep","isGhostScriptFunded","waitAB2UTXOContract","withdrawFromAB2UTXO","refund","hash","error","test","console","warn","checkTX","_secret","_secretHash","app","env","bitcoin","crypto","ripemd160","Buffer","from","toString","ownerAddress","getParticipantEthAddress","withdraw","getFromName","getToName","COINS","ghost","toUpperCase"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAkBC,SAAlB,EAA6BC,IAA7B,QAAyC,UAAzC;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SAASC,SAAT,QAA0B,cAA1B;AAGA,gBAAe,UAACC,SAAD,EAAe;AAAA,MAEtBC,cAFsB;AAAA;;AAAA;;AAkB1B,4BAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB,gCAAMA,IAAN;;AADgB;;AAAA;;AAAA;;AAAA;;AAAA,uEAoOD,YAAM;AACrB,cAAKC,SAAL,CAAeC,uBAAf,CAAuC;AACrCC,UAAAA,YAAY,EAAE,MAAKC,KAAL,CAAWC,gBADY;AAErCC,UAAAA,MAAM,EAAE,MAAKF,KAAL,CAAWE;AAFkB,SAAvC,EAIGC,IAJH,CAIQ,UAACC,KAAD,EAAW;AACf,gBAAKC,QAAL,CAAc;AACZC,YAAAA,WAAW,EAAEF;AADD,WAAd;AAGD,SARH;AASD,OA9OiB;;AAEhB,YAAKG,QAAL;AAEA,YAAKC,SAAL,GAAiBb,cAAc,CAACc,OAAf,EAAjB;AAEA,YAAKC,WAAL,GAAmB;AACjB,gBAAQ,CADS;AAEjB,yBAAiB,CAFA;AAGjB,wBAAgB,CAHC;AAIjB,qBAAa,CAJI;AAKjB,yBAAiB,CALA;AAMjB,wBAAgB,CANC;AAOjB,kBAAU,CAPO;AAQjB,eAAO;AARU,OAAnB;AAWA,YAAKC,YAAL,GAAoBf,IAAI,CAACgB,SAAzB;AACA,YAAKf,SAAL,GAAsBD,IAAI,CAACiB,eAA3B;AAEA,YAAKC,YAAL,GAAoB,MAAKH,YAAzB;AACA,YAAKI,cAAL,GAAsB,MAAKlB,SAA3B;AACA,YAAKmB,UAAL,GAAkB,IAAlB;;AAEA,UAAI,CAAC,MAAKL,YAAV,EAAwB;AACtB,cAAM,IAAIM,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,UAAI,CAAC,MAAKpB,SAAV,EAAqB;AACnB,cAAM,IAAIoB,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,YAAKjB,KAAL,GAAa;AACXkB,QAAAA,IAAI,EAAE,CADK;AAGXC,QAAAA,aAAa,EAAE,KAHJ;AAKXC,QAAAA,mBAAmB,EAAE,IALV;AAMXC,QAAAA,cAAc,EAAE,KANL;AAOXC,QAAAA,mBAAmB,EAAE,KAPV;AASXC,QAAAA,8BAA8B,EAAE,IATrB;AAWXC,QAAAA,UAAU,EAAE,IAXD;AAaXC,QAAAA,iBAAiB,EAAE,KAbR;AAcXC,QAAAA,eAAe,EAAE,IAdN;AAeXC,QAAAA,OAAO,EAAE,IAfE;AAiBXC,QAAAA,mBAAmB,EAAE,KAjBV;AAmBXC,QAAAA,gCAAgC,EAAE,IAnBvB;AAoBXC,QAAAA,8BAA8B,EAAE,IApBrB;AAsBX5B,QAAAA,MAAM,EAAE,IAtBG;AAwBX6B,QAAAA,uBAAuB,EAAE,IAxBd;AAyBXC,QAAAA,cAAc,EAAE,KAzBL;AA2BXC,QAAAA,qBAAqB,EAAE,IA3BZ;AA4BXC,QAAAA,UAAU,EAAE,KA5BD;AA8BXC,QAAAA,WAAW,EAAE,IA9BF;AA+BX7B,QAAAA,WAAW,EAAE,IA/BF;AAgCX8B,QAAAA,UAAU,EAAE,KAhCD;AAiCXC,QAAAA,WAAW,EAAE;AAjCF,OAAb;;AAoCA,YAAKC,aAAL;;AACA;;AApEgB;AAqEjB;;AAvFyB;AAAA;AAAA,aAyF1B,yBAAgB;AACd;AACD;AA3FyB;AAAA;AAAA,aA6F1B,qBAAY;AAAA;;AACV,YAAMC,IAAI,GAAG,IAAb;AAEA,eAAO;AAAA;AAEL;AAFK,iEAIL;AAAA;AAAA;AAAA;AAAA;AACE,kBAAA,MAAI,CAACC,YAAL;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJK,IAQL;AAEA,oBAAM,CACJ;AACD,SAZI,EAcL;AAEA,oBAAM;AACJ,UAAA,MAAI,CAACC,WAAL;AACD,SAlBI;AAAA;AAoBL;AApBK,iEAsBL;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQC,kBAAAA,iBADR,GAC4B,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAAA,sCAC8BJ,IAAI,CAACvC,KADnC;AAAA,wBAC1B4C,iCAD0B,eAC1BA,iCAD0B;AAAA,wBACS3C,gBADT,eACSA,gBADT;;AAGlC,wBAAI2C,iCAAJ,EAAuC;AACrC;AACD;;AAEDL,oBAAAA,IAAI,CAAClC,QAAL,CAAc;AACZuC,sBAAAA,iCAAiC,EAAED;AADvB,qBAAd;AAIAJ,oBAAAA,IAAI,CAAC3C,IAAL,CAAUiD,IAAV,CAAeC,IAAf,CAAoB,qBAApB,EAA2C,YAAM;AAC/CP,sBAAAA,IAAI,CAAC3C,IAAL,CAAUiD,IAAV,CAAeE,WAAf,CAA2B;AACzBC,wBAAAA,KAAK,EAAG,oBADiB;AAEzBC,wBAAAA,IAAI,EAAE;AACJlD,0BAAAA,YAAY,EAAEE,gBADV;AAEJ2C,0BAAAA,iCAAiC,EAAED;AAF/B;AAFmB,uBAA3B;AAOD,qBARD;AAUAJ,oBAAAA,IAAI,CAAC3C,IAAL,CAAUiD,IAAV,CAAeE,WAAf,CAA2B;AACzBC,sBAAAA,KAAK,EAAE,oBADkB;AAEzBC,sBAAAA,IAAI,EAAE;AACJlD,wBAAAA,YAAY,EAAGE,gBADX;AAEJ2C,wBAAAA,iCAAiC,EAAGD;AAFhC;AAFmB,qBAA3B;AAOD,mBA7BH;;AA+BUO,kBAAAA,UA/BV,GA+ByBX,IAAI,CAAC3C,IA/B9B,CA+BUsD,UA/BV;AAAA,iCAgCgDX,IAAI,CAACvC,KAhCrD,EAgCU0B,eAhCV,gBAgCUA,eAhCV,EAgC2BzB,gBAhC3B,gBAgC2BA,gBAhC3B;;AAAA,uBAkCMyB,eAlCN;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAmCUa,IAAI,CAAC1C,SAAL,CAAesD,UAAf,CAA0B;AAC9BpD,oBAAAA,YAAY,EAAEE,gBADgB;AAE9BmD,oBAAAA,MAAM,EAAEF;AAFsB,mBAA1B,CAnCV;;AAAA;AAyCQG,kBAAAA,uBAzCR;AAAA,yFAyCkC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sDACJ,MAAI,CAACxD,SAAL,CAAeyD,YAAf,CAA4BrD,gBAA5B,CADI,EACtBsD,aADsB,yBACtBA,aADsB;AAAA;AAAA,qCAEP,MAAI,CAAC1D,SAAL,CAAe2D,aAAf,CAA6BD,aAA7B,CAFO;;AAAA;AAExBE,8BAAAA,QAFwB;;AAAA,oCAI1BA,QAAQ,CAACC,MAAT,KAAoB,CAJM;AAAA;AAAA;AAAA;;AAAA,gEAKrB,KALqB;;AAAA;AAQxBf,8BAAAA,IARwB,GAQjBc,QAAQ,CAAC,CAAD,CAAR,CAAYE,IARK;AAAA;AAAA,qCAUR,MAAI,CAAC9D,SAAL,CAAe+D,UAAf,CAA0B3D,gBAA1B,CAVQ;;AAAA;AAUxB0B,8BAAAA,OAVwB;AAYxBkC,8BAAAA,aAZwB,GAYR,IAAIpE,SAAJ,CAAckC,OAAd,EAAuBmC,sBAAvB,CAA8CZ,UAAU,CAACa,KAAX,CAAiB,GAAjB,CAA9C,CAZQ;;AAc9B,kCAAIF,aAAJ,EAAmB;AACjBtB,gCAAAA,IAAI,CAAClC,QAAL,CAAc;AACZ2D,kCAAAA,aAAa,EAAE,IAAIvE,SAAJ,CAAckC,OAAd,EAAuBsC,GAAvB,CAA2B,GAA3B,EAAgCC,EAAhC,CAAmC,CAAnC;AADH,iCAAd;AAIAxB,gCAAAA,iBAAiB,CAACC,IAAD,CAAjB;AACD;;AApB6B,gEAsBvBkB,aAtBuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAzClC;;AAAA,oCAyCQR,uBAzCR;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAkEQ9D,IAAI,CAAC4E,OAAL,CAAaC,sBAAb;AAAA,yFAAoC,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChClD,8BAAAA,aADgC,GACdoB,IAAI,CAACvC,KADS,CAChCmB,aADgC;;AAAA,kCAGnCA,aAHmC;AAAA;AAAA;AAAA;;AAAA;AAAA,qCAIzBkC,uBAAuB,EAJE;;AAAA;AAAA;;AAAA;AAMtCgB,8BAAAA,UAAU;;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAApC;;AAAA;AAAA;AAAA;AAAA,sBAlER;;AAAA;AA4EUlD,kBAAAA,aA5EV,GA4E4BoB,IAAI,CAACvC,KA5EjC,CA4EUmB,aA5EV;;AA8EE,sBAAI,CAACA,aAAL,EAAoB;AAClBoB,oBAAAA,IAAI,CAAC+B,UAAL,CAAgB;AACdC,sBAAAA,mBAAmB,EAAE;AADP,qBAAhB,EAEG;AAAErD,sBAAAA,IAAI,EAAE;AAAR,qBAFH;AAGD;;AAlFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtBK;AAAA;AA2GL;AA3GK,iEA6GL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACQ,MAAI,CAACP,YAAL,CAAkB6D,mBAAlB,CAAsC;AAC1CjC,oBAAAA,IAAI,EAAJA,IAD0C;AAE1ChC,oBAAAA,QAAQ;AAFkC,mBAAtC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA7GK;AAAA;AAoHL;AApHK,iEAsHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACQgC,IAAI,CAAC5B,YAAL,CAAkB8D,mBAAlB,CAAsC;AAAElC,oBAAAA,IAAI,EAAJA;AAAF,mBAAtC,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAtHK,IA0HL;AAEA,oBAAM;AACJA,UAAAA,IAAI,CAAC3C,IAAL,CAAUiD,IAAV,CAAeC,IAAf,CAAoB,eAApB,EAAqC,iBAAwC;AAAA,gBAAtCjB,gCAAsC,SAAtCA,gCAAsC;AAC3EU,YAAAA,IAAI,CAAClC,QAAL,CAAc;AACZwB,cAAAA,gCAAgC,EAAhCA;AADY,aAAd;AAGD,WAJD;AAMAU,UAAAA,IAAI,CAAC3C,IAAL,CAAUiD,IAAV,CAAeE,WAAf,CAA2B;AACzBC,YAAAA,KAAK,EAAE;AADkB,WAA3B;AAIAT,UAAAA,IAAI,CAAC+B,UAAL,CAAgB;AACdlC,YAAAA,UAAU,EAAE;AADE,WAAhB,EAEG,QAFH;AAGD,SA1II,EA4IL;AAEA,oBAAM,CAAE,CA9IH,CAAP;AAgJD;AAhPyB;AAAA;AAAA;AAAA,wFAkP1B;AAAA;AAAA;AAAA;AAAA;AACE,uBAAKkC,UAAL,CAAgB,EAAhB,EAAoB;AAAEpD,oBAAAA,IAAI,EAAE;AAAR,mBAApB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAlP0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,aAkQ1B,qBAAY;AAAA;;AACV,YAAMqB,IAAI,GAAG,IAAb;AADU,2BAE2BA,IAAI,CAACvC,KAFhC;AAAA,YAEFC,gBAFE,gBAEFA,gBAFE;AAAA,YAEgBC,MAFhB,gBAEgBA,MAFhB;AAIV,eAAOqC,IAAI,CAAC1C,SAAL,CAAe6E,MAAf,CAAsB;AAC3B3E,UAAAA,YAAY,EAAEE,gBADa;AAE3BC,UAAAA,MAAM,EAAEA;AAFmB,SAAtB,EAIJC,IAJI,CAIC,UAACwE,IAAD,EAAU;AACd,cAAI,CAACA,IAAL,EAAW;AACT,mBAAO,KAAP;AACD;;AAED,UAAA,MAAI,CAAC/E,IAAL,CAAUiD,IAAV,CAAeE,WAAf,CAA2B;AACzBC,YAAAA,KAAK,EAAE;AADkB,WAA3B;;AAIAT,UAAAA,IAAI,CAAClC,QAAL,CAAc;AACZ4B,YAAAA,qBAAqB,EAAE0C,IADX;AAEZzC,YAAAA,UAAU,EAAE,IAFA;AAGZG,YAAAA,WAAW,EAAE;AAHD,WAAd,EAIG,IAJH;AAMA,iBAAO,IAAP;AACD,SApBI,WAqBE,UAACuC,KAAD,EAAW;AAChB,cAAI,mBAAmBC,IAAnB,CAAwBD,KAAxB,CAAJ,EAAoC;AAClC;AACArC,YAAAA,IAAI,CAAClC,QAAL,CAAc;AACZ6B,cAAAA,UAAU,EAAE,IADA;AAEZG,cAAAA,WAAW,EAAE;AAFD,aAAd,EAGG,IAHH;AAIA,mBAAO,IAAP;AACD,WAPD,MAOO;AACLyC,YAAAA,OAAO,CAACC,IAAR,CAAa,eAAb,EAA8BH,KAA9B;AAEA,mBAAO,KAAP;AACD;AACF,SAlCI,CAAP;AAmCD;AAzSyB;AAAA;AAAA;AAAA,wFA2S1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACgD,KAAK5E,KADrD,EACUiC,qBADV,eACUA,qBADV,EACiCC,UADjC,eACiCA,UADjC;;AAAA,wBAEMD,qBAAqB,IAAIC,UAF/B;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAGc,KAAKrC,SAAL,CAAemF,OAAf,CAAuB/C,qBAAvB,CAHd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oDAIa,IAJb;;AAAA;AAMM6C,kBAAAA,OAAO,CAACC,IAAR,CAAa,6CAAb;AACA,uBAAK1E,QAAL,CAAe;AACb4B,oBAAAA,qBAAqB,EAAE,IADV;AAEbC,oBAAAA,UAAU,EAAE;AAFC,mBAAf;AAPN,oDAWa,KAXb;;AAAA;AAAA,oDAcS,KAdT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA3S0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFA4T1B,kBAAkB+C,OAAlB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iCACiD,KAAKjF,KADtD,EACUE,MADV,gBACUA,MADV,EACkBsB,UADlB,gBACkBA,UADlB,EAC8BQ,cAD9B,gBAC8BA,cAD9B;;AAAA,sBAGOiD,OAHP;AAAA;AAAA;AAAA;;AAAA,wBAIU,IAAIhE,KAAJ,oEAJV;;AAAA;AAME,sBAAIf,MAAM,IAAIA,MAAM,IAAI+E,OAAxB,EACEH,OAAO,CAACC,IAAR;AAEF,sBAAI/C,cAAJ,EACE8C,OAAO,CAACC,IAAR;AAEF1F,kBAAAA,KAAK,CAAC,gBAAD,CAAL,mCAAmD4F,OAAnD;AAEMC,kBAAAA,WAdR,GAcsB,KAAKC,GAAL,CAASC,GAAT,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,SAA5B,CAAsCC,MAAM,CAACC,IAAP,CAAYR,OAAZ,EAAqB,KAArB,CAAtC,EAAmES,QAAnE,CAA4E,KAA5E,CAdtB;AAgBE,sBAAIlE,UAAU,IAAI0D,WAAlB,EACEJ,OAAO,CAACC,IAAR,uCAA4CvD,UAA5C,sBAAkE0D,WAAlE;AAEIjC,kBAAAA,IAnBR,GAmBe;AACX0C,oBAAAA,YAAY,EAAE,KAAKR,GAAL,CAASS,wBAAT,CAAkC,KAAKhG,IAAvC,CADH;AAEXM,oBAAAA,MAAM,EAAE+E;AAFG,mBAnBf;AAAA;AAAA,yBAwBQ,KAAKtE,YAAL,CAAkBkF,QAAlB,CAA2B5C,IAA3B,EAAiC,UAAC0B,IAAD,EAAU;AAC/CtF,oBAAAA,KAAK,CAAC,gBAAD,CAAL,mBAAmCsF,IAAnC;;AACA,oBAAA,MAAI,CAACtE,QAAL,CAAc;AACZyB,sBAAAA,8BAA8B,EAAE6C,IADpB;AAEZ5C,sBAAAA,uBAAuB,EAAE;AAFb,qBAAd;AAID,mBANK,EAMH5B,IANG,CAME,YAAM;AAEZ,oBAAA,MAAI,CAACmE,UAAL,CAAgB;AACdtC,sBAAAA,cAAc,EAAE;AADF,qBAAhB,EAEG,cAFH;AAGD,mBAXK,CAxBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA5T0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,aAS1B,mBAAiB;AACf,yBAAU,KAAK8D,WAAL,EAAV,cAAgC,KAAKC,SAAL,EAAhC;AACD;AAXyB;AAAA;AAAA,aAY1B,uBAAqB;AACnB,eAAOzG,SAAS,CAAC0G,KAAV,CAAgBC,KAAvB;AACD;AAdyB;AAAA;AAAA,aAe1B,qBAAmB;AACjB,eAAOvG,SAAS,CAACwG,WAAV,EAAP;AACD;AAjByB;;AAAA;AAAA,IAEC1G,aAFD;;AAmW5B,SAAOG,cAAP;AACD,CApWD","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\n\r\nexport default (tokenName) => {\r\n\r\n  class GHOST2ETHTOKEN extends AtomicAB2UTXO {\r\n\r\n    _flowName: string\r\n    ethTokenSwap: any\r\n    ghostSwap: any\r\n    state: any\r\n\r\n    static getName() {\r\n      return `${this.getFromName()}2${this.getToName()}`\r\n    }\r\n    static getFromName() {\r\n      return constants.COINS.ghost\r\n    }\r\n    static getToName() {\r\n      return tokenName.toUpperCase()\r\n    }\r\n    constructor(swap) {\r\n      super(swap)\r\n      this.utxoCoin = `ghost`\r\n\r\n      this._flowName = GHOST2ETHTOKEN.getName()\r\n\r\n      this.stepNumbers = {\r\n        'sign': 1,\r\n        'submit-secret': 2,\r\n        'sync-balance': 3,\r\n        'lock-utxo': 4,\r\n        'wait-lock-eth': 5,\r\n        'withdraw-eth': 6,\r\n        'finish': 7,\r\n        'end': 8\r\n      }\r\n\r\n      this.ethTokenSwap = swap.ownerSwap\r\n      this.ghostSwap      = swap.participantSwap\r\n\r\n      this.abBlockchain = this.ethTokenSwap\r\n      this.utxoBlockchain = this.ghostSwap\r\n      this.isUTXOSide = true\r\n\r\n      if (!this.ethTokenSwap) {\r\n        throw new Error('GHOST2ETH: \"ethTokenSwap\" of type object required')\r\n      }\r\n      if (!this.ghostSwap) {\r\n        throw new Error('GHOST2ETH: \"ghostSwap\" of type object required')\r\n      }\r\n\r\n      this.state = {\r\n        step: 0,\r\n\r\n        isStoppedSwap: false,\r\n\r\n        signTransactionHash: null,\r\n        isSignFetching: false,\r\n        isParticipantSigned: false,\r\n\r\n        ethSwapCreationTransactionHash: null,\r\n\r\n        secretHash: null,\r\n\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: true,\r\n        balance: null,\r\n\r\n        isEthContractFunded: false,\r\n\r\n        ghostSwapWithdrawTransactionHash: null,\r\n        ethSwapWithdrawTransactionHash: null,\r\n\r\n        secret: null,\r\n\r\n        canCreateEthTransaction: true,\r\n        isEthWithdrawn: false,\r\n\r\n        refundTransactionHash: null,\r\n        isRefunded: false,\r\n\r\n        withdrawFee: null,\r\n        refundTxHex: null,\r\n        isFinished: false,\r\n        isSwapExist: false,\r\n      }\r\n\r\n      this._persistState()\r\n      super._persistSteps()\r\n    }\r\n\r\n    _persistState() {\r\n      super._persistState()\r\n    }\r\n\r\n    _getSteps() {\r\n      const flow = this\r\n\r\n      return [\r\n\r\n        // 1. Signs\r\n\r\n        async () => {\r\n          this.signUTXOSide()\r\n        },\r\n\r\n        // 2. Create secret, secret hash and GHOST script\r\n\r\n        () => {\r\n          // this.submitSecret()\r\n        },\r\n\r\n        // 3. Check system wallet balance\r\n\r\n        () => {\r\n          this.syncBalance()\r\n        },\r\n\r\n        // 4. Create GHOSt Script, fund, notify participant\r\n\r\n        async () => {\r\n          const onTransactionHash = (txID) => {\r\n            const { utxoScriptCreatingTransactionHash, utxoScriptValues } = flow.state\r\n\r\n            if (utxoScriptCreatingTransactionHash) {\r\n              return\r\n            }\r\n\r\n            flow.setState({\r\n              utxoScriptCreatingTransactionHash: txID,\r\n            })\r\n\r\n            flow.swap.room.once('request utxo script', () => {\r\n              flow.swap.room.sendMessage({\r\n                event:  'create utxo script',\r\n                data: {\r\n                  scriptValues: utxoScriptValues,\r\n                  utxoScriptCreatingTransactionHash: txID,\r\n                }\r\n              })\r\n            })\r\n\r\n            flow.swap.room.sendMessage({\r\n              event: 'create utxo script',\r\n              data: {\r\n                scriptValues : utxoScriptValues,\r\n                utxoScriptCreatingTransactionHash : txID,\r\n              }\r\n            })\r\n          }\r\n\r\n          const { sellAmount } = flow.swap\r\n          const { isBalanceEnough, utxoScriptValues } = flow.state\r\n\r\n          if (isBalanceEnough) {\r\n            await flow.ghostSwap.fundScript({\r\n              scriptValues: utxoScriptValues,\r\n              amount: sellAmount,\r\n            })\r\n          }\r\n\r\n          const checkGHOSTScriptBalance = async () => {\r\n            const { scriptAddress } = this.ghostSwap.createScript(utxoScriptValues)\r\n            const unspents = await this.ghostSwap.fetchUnspents(scriptAddress)\r\n\r\n            if (unspents.length === 0) {\r\n              return false\r\n            }\r\n\r\n            const txID = unspents[0].txid\r\n\r\n            const balance = await this.ghostSwap.getBalance(utxoScriptValues)\r\n\r\n            const isEnoughMoney = new BigNumber(balance).isGreaterThanOrEqualTo(sellAmount.times(1e8))\r\n\r\n            if (isEnoughMoney) {\r\n              flow.setState({\r\n                scriptBalance: new BigNumber(balance).div(1e8).dp(8),\r\n              })\r\n\r\n              onTransactionHash(txID)\r\n            }\r\n\r\n            return isEnoughMoney\r\n          }\r\n\r\n          await util.helpers.repeatAsyncUntilResult(async (stopRepeat) => {\r\n            const { isStoppedSwap } = flow.state\r\n\r\n            if (!isStoppedSwap) {\r\n              return await checkGHOSTScriptBalance()\r\n            } else {\r\n              stopRepeat()\r\n            }\r\n          })\r\n\r\n          const { isStoppedSwap } = flow.state\r\n\r\n          if (!isStoppedSwap) {\r\n            flow.finishStep({\r\n              isGhostScriptFunded: true,\r\n            }, { step: 'lock-utxo' })\r\n          }\r\n        },\r\n\r\n        // 5. Wait participant creates ETH Contract\r\n\r\n        async () => {\r\n          await this.ethTokenSwap.waitAB2UTXOContract({\r\n            flow,\r\n            utxoCoin: `ghost`,\r\n          })\r\n        },\r\n\r\n        // 6. Withdraw\r\n\r\n        async () => {\r\n          await flow.ethTokenSwap.withdrawFromAB2UTXO({ flow })\r\n        },\r\n\r\n        // 7. Finish\r\n\r\n        () => {\r\n          flow.swap.room.once('swap finished', ({ghostSwapWithdrawTransactionHash}) => {\r\n            flow.setState({\r\n              ghostSwapWithdrawTransactionHash,\r\n            })\r\n          })\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'request swap finished',\r\n          })\r\n\r\n          flow.finishStep({\r\n            isFinished: true,\r\n          }, 'finish')\r\n        },\r\n\r\n        // 8. Finished!\r\n\r\n        () => {}\r\n      ]\r\n    }\r\n\r\n    async skipSyncBalance() {\r\n      this.finishStep({}, { step: 'sync-balance' })\r\n    }\r\n\r\n    getRefundTxHex = () => {\r\n      this.ghostSwap.getRefundHexTransaction({\r\n        scriptValues: this.state.utxoScriptValues,\r\n        secret: this.state.secret,\r\n      })\r\n        .then((txHex) => {\r\n          this.setState({\r\n            refundTxHex: txHex,\r\n          })\r\n        })\r\n    }\r\n\r\n    tryRefund() {\r\n      const flow = this\r\n      const { utxoScriptValues, secret } = flow.state\r\n\r\n      return flow.ghostSwap.refund({\r\n        scriptValues: utxoScriptValues,\r\n        secret: secret,\r\n      })\r\n        .then((hash) => {\r\n          if (!hash) {\r\n            return false\r\n          }\r\n\r\n          this.swap.room.sendMessage({\r\n            event: 'utxo refund completed',\r\n          })\r\n\r\n          flow.setState({\r\n            refundTransactionHash: hash,\r\n            isRefunded: true,\r\n            isSwapExist: false,\r\n          }, true)\r\n\r\n          return true\r\n        })\r\n        .catch((error) => {\r\n          if (/Address is empty/.test(error)) {\r\n            // TODO - fetch TX list to script for refund TX\r\n            flow.setState({\r\n              isRefunded: true,\r\n              isSwapExist: false,\r\n            }, true)\r\n            return true\r\n          } else {\r\n            console.warn('Ghost refund:', error)\r\n\r\n            return false\r\n          }\r\n        })\r\n    }\r\n\r\n    async isRefundSuccess() {\r\n      const { refundTransactionHash, isRefunded } = this.state\r\n      if (refundTransactionHash && isRefunded) {\r\n        if (await this.ghostSwap.checkTX(refundTransactionHash)) {\r\n          return true\r\n        } else {\r\n          console.warn('GHOST2ETHTOKEN - unknown refund transaction')\r\n          this.setState( {\r\n            refundTransactionHash: null,\r\n            isRefunded: false,\r\n          } )\r\n          return false\r\n        }\r\n      }\r\n      return false\r\n    }\r\n\r\n    async tryWithdraw(_secret) {\r\n      const { secret, secretHash, isEthWithdrawn } = this.state\r\n\r\n      if (!_secret)\r\n        throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n      if (secret && secret != _secret)\r\n        console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n      if (isEthWithdrawn)\r\n        console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n      debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n      const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n      if (secretHash != _secretHash)\r\n        console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n      const data = {\r\n        ownerAddress: this.app.getParticipantEthAddress(this.swap),\r\n        secret: _secret,\r\n      }\r\n\r\n      await this.ethTokenSwap.withdraw(data, (hash) => {\r\n        debug('swap.core:flow')(`TX hash=${hash}`)\r\n        this.setState({\r\n          ethSwapWithdrawTransactionHash: hash,\r\n          canCreateEthTransaction: true,\r\n        })\r\n      }).then(() => {\r\n\r\n        this.finishStep({\r\n          isEthWithdrawn: true,\r\n        }, 'withdraw-eth')\r\n      })\r\n    }\r\n  }\r\n\r\n  return GHOST2ETHTOKEN\r\n}\r\n"]}]}