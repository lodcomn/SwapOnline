{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\btc.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\btc.ts","mtime":1614842913752},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFN3YXBBcHAgZnJvbSAnc3dhcC5hcHAnOwppbXBvcnQgKiBhcyBtbmVtb25pY1V0aWxzIGZyb20gJy4uLy4uL2NvbW1vbi91dGlscy9tbmVtb25pYyc7Cgp2YXIgbG9naW5NbmVtb25pYyA9IGZ1bmN0aW9uIGxvZ2luTW5lbW9uaWMobW5lbW9uaWMpIHsKICB2YXIgd2FsbGV0TnVtYmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwOwogIHZhciBwYXRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgdmFyIGFwcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwogIHZhciBuZXR3b3JrID0gYXBwLmlzTWFpbk5ldCgpID8gYXBwLmVudi5iaXRjb2luLm5ldHdvcmtzLmJpdGNvaW4gOiBhcHAuZW52LmJpdGNvaW4ubmV0d29ya3MudGVzdG5ldDsKICB2YXIgd2FsbGV0ID0gbW5lbW9uaWNVdGlscy5nZXRCdGNXYWxsZXQobmV0d29yaywgbW5lbW9uaWMsIHdhbGxldE51bWJlciwgcGF0aCk7CiAgcmV0dXJuIGxvZ2luKHdhbGxldC5XSUYsIGFwcCk7Cn07Cgp2YXIgbG9naW4gPSBmdW5jdGlvbiBsb2dpbihfcHJpdmF0ZUtleSwgYXBwKSB7CiAgU3dhcEFwcC5yZXF1aXJlZChhcHApOwogIHZhciBzdG9yYWdlS2V5ID0gIiIuY29uY2F0KGFwcC5uZXR3b3JrLCAiOmJ0Yzpwcml2YXRlS2V5Iik7CgogIHZhciBwcml2YXRlS2V5ID0gX3ByaXZhdGVLZXkgfHwgYXBwLmVudi5zdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSk7CgogIHZhciBhY2NvdW50OwogIHZhciBuZXR3b3JrID0gYXBwLmlzTWFpbk5ldCgpID8gYXBwLmVudi5iaXRjb2luLm5ldHdvcmtzLmJpdGNvaW4gOiBhcHAuZW52LmJpdGNvaW4ubmV0d29ya3MudGVzdG5ldDsKCiAgaWYgKCFwcml2YXRlS2V5KSB7CiAgICBwcml2YXRlS2V5ID0gYXBwLmVudi5iaXRjb2luLkVDUGFpci5tYWtlUmFuZG9tKHsKICAgICAgbmV0d29yazogbmV0d29yawogICAgfSkudG9XSUYoKTsKICB9CgogIGFjY291bnQgPSBuZXcgYXBwLmVudi5iaXRjb2luLkVDUGFpci5mcm9tV0lGKHByaXZhdGVLZXksIG5ldHdvcmspOwoKICB2YXIgX2FwcCRlbnYkYml0Y29pbiRwYXltID0gYXBwLmVudi5iaXRjb2luLnBheW1lbnRzLnAycGtoKHsKICAgIHB1YmtleTogYWNjb3VudC5wdWJsaWNLZXksCiAgICBuZXR3b3JrOiBuZXR3b3JrCiAgfSksCiAgICAgIGFkZHJlc3MgPSBfYXBwJGVudiRiaXRjb2luJHBheW0uYWRkcmVzczsKCiAgdmFyIF9hY2NvdW50ID0gYWNjb3VudCwKICAgICAgcHVibGljS2V5ID0gX2FjY291bnQucHVibGljS2V5OwoKICBhY2NvdW50LmdldFB1YmxpY0tleSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBwdWJsaWNLZXkudG9TdHJpbmcoJ2hleCcpOwogIH07CgogIGFjY291bnQuZ2V0UHVibGljS2V5QnVmZmVyID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHB1YmxpY0tleTsKICB9OwoKICBhY2NvdW50LmdldFByaXZhdGVLZXkgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gcHJpdmF0ZUtleTsKICB9OwoKICBhY2NvdW50LmdldEFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gYWRkcmVzczsKICB9OwoKICBpZiAoIV9wcml2YXRlS2V5KSB7CiAgICBhcHAuZW52LnN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5LCBwcml2YXRlS2V5KTsKICB9CgogIHJldHVybiBhY2NvdW50Owp9OwoKdmFyIGdldFB1YmxpY0RhdGEgPSBmdW5jdGlvbiBnZXRQdWJsaWNEYXRhKGFjY291bnQpIHsKICByZXR1cm4gewogICAgYWRkcmVzczogYWNjb3VudC5nZXRBZGRyZXNzKCksCiAgICBwdWJsaWNLZXk6IGFjY291bnQuZ2V0UHVibGljS2V5KCkKICB9Owp9OwoKZXhwb3J0IGRlZmF1bHQgewogIGxvZ2luOiBsb2dpbiwKICBsb2dpbk1uZW1vbmljOiBsb2dpbk1uZW1vbmljLAogIGdldFB1YmxpY0RhdGE6IGdldFB1YmxpY0RhdGEKfTs="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.auth/btc.ts"],"names":["SwapApp","mnemonicUtils","loginMnemonic","mnemonic","walletNumber","path","app","network","isMainNet","env","bitcoin","networks","testnet","wallet","getBtcWallet","login","WIF","_privateKey","required","storageKey","privateKey","storage","getItem","account","ECPair","makeRandom","toWIF","fromWIF","payments","p2pkh","pubkey","publicKey","address","getPublicKey","toString","getPublicKeyBuffer","getPrivateKey","getAddress","setItem","getPublicData"],"mappings":"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","sourcesContent":["import SwapApp from 'swap.app'\r\nimport * as mnemonicUtils from '../../common/utils/mnemonic'\r\n\r\n\r\nconst loginMnemonic = (mnemonic, walletNumber=0, path, app) => {\r\n  const network = (\r\n    app.isMainNet()\r\n      ? app.env.bitcoin.networks.bitcoin\r\n      : app.env.bitcoin.networks.testnet\r\n  )\r\n\r\n  const wallet = mnemonicUtils.getBtcWallet(network, mnemonic, walletNumber, path)\r\n\r\n  return login(wallet.WIF, app)\r\n}\r\n\r\nconst login = (_privateKey, app) => {\r\n  SwapApp.required(app)\r\n\r\n  const storageKey = `${app.network}:btc:privateKey`\r\n  let privateKey = _privateKey || app.env.storage.getItem(storageKey)\r\n\r\n  let account\r\n\r\n  const network = (\r\n    app.isMainNet()\r\n      ? app.env.bitcoin.networks.bitcoin\r\n      : app.env.bitcoin.networks.testnet\r\n  )\r\n\r\n  if (!privateKey) {\r\n    privateKey = app.env.bitcoin.ECPair.makeRandom({ network }).toWIF()\r\n  }\r\n\r\n  account = new app.env.bitcoin.ECPair.fromWIF(privateKey, network)\r\n\r\n  const { address } = app.env.bitcoin.payments.p2pkh({ pubkey: account.publicKey, network })\r\n  const { publicKey } = account\r\n\r\n  account.getPublicKey = () => publicKey.toString('hex')\r\n  account.getPublicKeyBuffer = () => publicKey\r\n  account.getPrivateKey = () => privateKey\r\n  account.getAddress = () => address\r\n\r\n  if (!_privateKey) {\r\n    app.env.storage.setItem(storageKey, privateKey)\r\n  }\r\n\r\n  return account\r\n}\r\n\r\n\r\nconst getPublicData = (account) => ({\r\n  address: account.getAddress(),\r\n  publicKey: account.getPublicKey(),\r\n})\r\n\r\n\r\nexport default {\r\n  login,\r\n  loginMnemonic,\r\n  getPublicData,\r\n}\r\n"]}]}