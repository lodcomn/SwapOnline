{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\utils\\coin\\btc.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\utils\\coin\\btc.ts","mtime":1614851479509},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/utils/coin/btc.ts"],"names":["apiLooper","BigNumber","bitcoin","typeforce","default","TESTNET","MAINNET","DUST","getBitpay","network","name","servers","bitpay","getCore","getBlockcypher","blockcypher","fetchBalance","options","address","withUnconfirmed","apiBitpay","cacheResponse","NETWORK","get","checkStatus","answer","balance","undefined","error","console","inQuery","delay","then","unconfirmed","dividedBy","toNumber","fetchTx","hash","fee","e","rest","fees","fetchTxInfo","hasAdminFee","Promise","callback","txinfoReject","baseTxInfo","txCoins","receiverAddress","afterBalance","inputs","value","adminOutput","adminFee","afterOutput","outputs","senderAddress","amount","filter","out","eq","length","txInfo","txid","confirmed","confirmations","minerFee","minerFeeCurrency","map","output","input","size","fetchUnspents","resolve","reject","index","height","mintHeight","satoshis","scriptPubKey","script","mintTxid","vout","mintIndex","spentTxid","prepareUnspents","processUnspents","unspents","needAmount","multipliedBy","plus","sortedUnspents","sort","a","b","isEqualTo","isGreaterThan","oneUnspent","forEach","unspent","isGreaterThanOrEqualTo","calcedAmount","usedUnspents","broadcastTx","txRaw","apiBlocyper","onBroadcastError","post","body","rawTx","reportErrors","log","Function","tx","res","statusMessage","bcAnswer","checkWithdraw","scriptAddress","url","txs","spendTxInfo","fetchTxRaw","txId","hex","getTransactionBlocyper","ownAddress","ownType","myWallets","type","checkAddress","transactions","item","hasOurInputs","addresses","direction","isSelf","currentAddress","canEdit","indexOf","date","Date","parse","received","getTransactionBitcore","myAllWallets","getAllMyAddresses","getState","userAddress","user","btcData","isCoinAddress","BTC","blockInfo","vin","addr","voutAddrBuf","Buffer","from","fromOutputScript","time","estimateFeeRateBLOCKCYPHER","speed","_speed","cacheOnFail","info","Number","estimateFeeRateEARNCOM","estimateFeeRate","message","calculateTxSize","_unspents","txOut","txIn","txSize","estimateFeeValue","_feeRate","feeRate","inSatoshis","_txSize","calculatedFeeValue","maximum","div","dp","ROUND_HALF_EVEN","finalFeeValue","toString"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport apiLooper from '../apiLooper'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport typeforce from 'swap.app/util/typeforce'\r\n\r\n// Use front API config\r\nimport { default as TESTNET } from '../../../front/config/testnet/api'\r\nimport { default as MAINNET } from '../../../front/config/mainnet/api'\r\n\r\nconst DUST = 546\r\n\r\nconst getBitpay = (network) => {\r\n  return {\r\n    name: `apiBitpay`,\r\n    servers: (network === `MAINNET`)\r\n      ? MAINNET.bitpay\r\n      : TESTNET.bitpay\r\n  }\r\n}\r\n\r\nconst getCore = () => {\r\n  return bitcoin\r\n}\r\n\r\n\r\nconst getBlockcypher = (network) => {\r\n  return {\r\n    name: `apiBlockcypher`,\r\n    servers: (network === `MAINNET`)\r\n      ? MAINNET.blockcypher\r\n      : TESTNET.blockcypher\r\n  }\r\n}\r\n\r\nconst fetchBalance = (options) => {\r\n  const {\r\n    address,\r\n    withUnconfirmed,\r\n    apiBitpay,\r\n    cacheResponse,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return apiLooper.get(apiBitpay || getBitpay(NETWORK), `/address/${address}/balance/`, {\r\n    cacheResponse,\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.balance !== undefined) return true\r\n      } catch (error) {\r\n        console.error('Utils - btc - fetch balance: ', error)\r\n      }\r\n      return false\r\n    },\r\n    inQuery: {\r\n      delay: 500,\r\n      name: `bitpay`,\r\n    },\r\n  }).then((answer: any) => {\r\n    const {\r\n      balance,\r\n      unconfirmed,\r\n    } = answer\r\n    if (withUnconfirmed) {\r\n      return {\r\n        balance: new BigNumber(balance).dividedBy(1e8).toNumber(),\r\n        unconfirmed: new BigNumber(unconfirmed).dividedBy(1e8).toNumber(),\r\n      }\r\n    } else {\r\n      return new BigNumber(balance).dividedBy(1e8).toNumber()\r\n    }\r\n  })\r\n}\r\n\r\nconst fetchTx = (options) => {\r\n  const {\r\n    hash,\r\n    apiBitpay,\r\n    cacheResponse,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return apiLooper.get(apiBitpay || getBitpay(NETWORK), `/tx/${hash}`, {\r\n    cacheResponse,\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.fee !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n    inQuery: {\r\n      delay: 500,\r\n      name: `bitpay`,\r\n    },\r\n  }).then(({ fee, ...rest }) => ({\r\n      fees: new BigNumber(fee).dividedBy(1e8).toNumber(),\r\n      ...rest,\r\n    }\r\n  ))\r\n}\r\n\r\n\r\n// @ToDo - Make interface - fetchTxInfo общая для всех блокчейнов - она возврашет сведенные данные определенного типа\r\nconst fetchTxInfo = (options) : any => {\r\n  const {\r\n    hash,\r\n    apiBitpay,\r\n    cacheResponse,\r\n    hasAdminFee,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return new Promise(async (callback, txinfoReject) => {\r\n    let baseTxInfo: any | boolean = false // @ToDo - make interface for baseTxInfo api answer\r\n    let txCoins: any | boolean = false // @ToDo - make interface for txCoins api answer\r\n\r\n    try {\r\n      baseTxInfo = await fetchTx({\r\n        hash,\r\n        apiBitpay,\r\n        cacheResponse,\r\n        NETWORK,\r\n      })\r\n    } catch (error) {\r\n      console.error('Fail fetch tx info', error)\r\n      txinfoReject(error)\r\n      return\r\n    }\r\n    try {\r\n      txCoins = await apiLooper.get(apiBitpay || getBitpay(NETWORK), `/tx/${hash}/coins`, {\r\n        cacheResponse,\r\n        /* checkStatus */\r\n        inQuery: {\r\n          delay: 500,\r\n          name: `bitpay`,\r\n        },\r\n      })\r\n    } catch (error) {\r\n      console.error('Failt fetch tx coin info', error)\r\n      txinfoReject(error)\r\n    }\r\n\r\n    let receiverAddress = null\r\n    let afterBalance = txCoins && txCoins.inputs && txCoins.inputs[1] \r\n      ? new BigNumber(txCoins.inputs[1].value).dividedBy(1e8).toNumber() \r\n      : null\r\n    let adminOutput = []\r\n    let adminFee : number | boolean = false\r\n    let afterOutput = []\r\n\r\n    if (!txCoins || !txCoins.inputs || !txCoins.outputs) {\r\n      console.error('tx coin info empty')\r\n      txinfoReject('tx coin info empty')\r\n    }\r\n\r\n    const senderAddress = txCoins && txCoins.inputs ? txCoins.inputs[0].address : null\r\n    const amount = new BigNumber(txCoins.outputs[0].value).dividedBy(1e8).toNumber()\r\n\r\n    if (hasAdminFee) {\r\n      adminOutput = txCoins.outputs.filter((out) => {\r\n        return (\r\n          out.address === hasAdminFee.address\r\n          && !(new BigNumber(out.value).eq(amount))\r\n        )\r\n      })\r\n    }\r\n\r\n\r\n    /*\r\n    // @ToDo - need fix\r\n    if (txCoins && txCoins.outputs) {\r\n      afterOutput = txCoins.outputs.filter(({ address }) => {\r\n        return (\r\n          address !== hasAdminFee.address\r\n        )\r\n      })\r\n    }\r\n    */\r\n\r\n    if (afterOutput.length) {\r\n      afterBalance = new BigNumber(afterOutput[0].value).dividedBy(1e8).toNumber()\r\n    }\r\n\r\n    if (adminOutput.length) {\r\n      adminFee = new BigNumber(adminOutput[0].value).dividedBy(1e8).toNumber()\r\n    }\r\n\r\n    \r\n    if (txCoins && txCoins.outputs && txCoins.outputs[0]) {\r\n      receiverAddress = txCoins.outputs[0].address\r\n    }\r\n\r\n    // @ToDo - Интерфейс этой функции\r\n    const txInfo = {\r\n      txid: baseTxInfo.txid,\r\n      amount,\r\n      afterBalance,\r\n      senderAddress,\r\n      confirmed: !!(baseTxInfo.confirmations),\r\n      confirmations: baseTxInfo.confirmations,\r\n      receiverAddress,\r\n      \r\n      minerFee: baseTxInfo.fees,\r\n      adminFee,\r\n      minerFeeCurrency: 'BTC',\r\n\r\n      outputs: txCoins.outputs.map((output) => ({\r\n        ...output,\r\n        amount: new BigNumber(output.value).dividedBy(1e8).toNumber(),\r\n      })),\r\n      inputs: txCoins.inputs.map((input) => ({\r\n        ...input,\r\n        amount: new BigNumber(input.value).dividedBy(1e8).toNumber(),\r\n      })),\r\n      fees: baseTxInfo.fees,\r\n      size: baseTxInfo.size,\r\n    }\r\n\r\n    callback( txInfo )\r\n  })\r\n}\r\n\r\nexport interface IBtcUnspent {\r\n  address: string,\r\n  amount: number,\r\n  confirmations: number,\r\n  height: number,\r\n  satoshis: number,\r\n  scriptPubKey: string,\r\n  txid: string,\r\n  vout: number,\r\n  spentTxid: string,\r\n}\r\n// @To-do - make interface - ответ этой функции общий для все блокчейнов\r\nconst fetchUnspents = (options): Promise<IBtcUnspent[]> => {\r\n  const {\r\n    address,\r\n    apiBitpay,\r\n    cacheResponse,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return new Promise((resolve, reject) => {\r\n    apiLooper.get(\r\n      apiBitpay || getBitpay(NETWORK),\r\n      `/address/${address}?unspent=true&limit=1000000`,\r\n      {\r\n        cacheResponse: (cacheResponse || 5000),\r\n        inQuery: {\r\n          delay: 500,\r\n          name: `bitpay`,\r\n        },\r\n      }\r\n    ).then((answer: any) => {\r\n      resolve(answer.map((txInfo, index) => {\r\n        return {\r\n          address,\r\n          amount: new BigNumber(txInfo.value).dividedBy(1e8).toNumber(),\r\n          confirmations: txInfo.confirmations,\r\n          height: txInfo.mintHeight,\r\n          satoshis: txInfo.value,\r\n          scriptPubKey: txInfo.script,\r\n          txid: txInfo.mintTxid,\r\n          vout: txInfo.mintIndex,\r\n          spentTxid: txInfo.spentTxid,\r\n        }\r\n      }))\r\n    }).catch((error) => {\r\n      console.error('btc fetchUnspents error', error)\r\n      reject(error)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * Подберает подходящие unspents для указанной суммы в сатоши\r\n **/\r\ninterface IprepareUnspentsOptions {\r\n  NETWORK: any,\r\n  address?: string,\r\n  amount: number,\r\n  apiBitpay?: any,\r\n  cacheResponse?: any,\r\n  unspents?: IBtcUnspent[],\r\n}\r\n\r\nconst prepareUnspents = (options: IprepareUnspentsOptions): Promise<IBtcUnspent[]> => {\r\n  const {\r\n    NETWORK,\r\n    apiBitpay,\r\n    cacheResponse,\r\n    address,\r\n    amount,\r\n  } = options\r\n  return new Promise((resolve, reject) => {\r\n    const processUnspents = (unspents: IBtcUnspent[]) => {\r\n      const needAmount = new BigNumber(amount).multipliedBy(1e8).plus(DUST)\r\n      // Сначала отсортируем unspents по возрастанию не потраченной сдачи\r\n      const sortedUnspents: IBtcUnspent[] = unspents.sort((a: IBtcUnspent, b: IBtcUnspent) => {\r\n        return (new BigNumber(a.satoshis).isEqualTo(b.satoshis))\r\n          ? 0\r\n          : (new BigNumber(a.satoshis).isGreaterThan(b.satoshis))\r\n            ? 1\r\n            : -1\r\n      })\r\n      // Попробуем найти один выход сдачи, который покроет транзакцию\r\n      let oneUnspent: IBtcUnspent = null\r\n      sortedUnspents.forEach((unspent: IBtcUnspent) => {\r\n        if (oneUnspent === null\r\n          && new BigNumber(unspent.satoshis).isGreaterThanOrEqualTo(needAmount)\r\n        ) {\r\n          oneUnspent = unspent\r\n          return false\r\n        }\r\n      })\r\n      if (oneUnspent === null) {\r\n        // Если один выход не нашли - используем подсчитанные usedUnspents\r\n        // Подберем здачу, суммы которой хватает для транзакции (от меньшего к большему)\r\n        let calcedAmount = new BigNumber(0)\r\n        const usedUnspents: IBtcUnspent[] = sortedUnspents.filter((unspent: IBtcUnspent) => {\r\n          if (calcedAmount.isGreaterThanOrEqualTo(needAmount)) {\r\n            return false\r\n          } else {\r\n            calcedAmount = calcedAmount.plus(unspent.satoshis)\r\n            return true\r\n          }\r\n        })\r\n        resolve(usedUnspents)\r\n      } else {\r\n        resolve([oneUnspent])\r\n      }\r\n    }\r\n\r\n    if (options.unspents) {\r\n      processUnspents(options.unspents)\r\n    } else {\r\n      fetchUnspents({\r\n        NETWORK,\r\n        address,\r\n        apiBitpay,\r\n        cacheResponse,\r\n      }).then(processUnspents).catch((error) => {\r\n        reject(error)\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n// @ToDo - интерфейс - возврашет объект { txid }\r\nconst broadcastTx = (options): any => {\r\n  const {\r\n    txRaw,\r\n    apiBitpay,\r\n    apiBlocyper,\r\n    onBroadcastError,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    let answer : any | boolean = false // @ToDo - make interface for api answer \r\n    try {\r\n      answer = await apiLooper.post(apiBitpay || getBitpay(NETWORK), `/tx/send`, {\r\n        body: {\r\n          rawTx: txRaw,\r\n        },\r\n        reportErrors: (error) => {\r\n          console.log('BitPay broadcastTx error', error)\r\n          return true\r\n        },\r\n        inQuery: {\r\n          delay: 500,\r\n          name: `bitpay`,\r\n        },\r\n      })\r\n    } catch (bitpayError) {\r\n      console.log('BitPay broadcastTx error', bitpayError)\r\n      if (onBroadcastError instanceof Function) {\r\n        if (onBroadcastError(bitpayError)) reject()\r\n      }\r\n    }\r\n    if (answer && answer.txid) {\r\n      resolve({ txid: answer.txid })\r\n      return\r\n    }\r\n    if (!answer || !answer.txid) {\r\n      // use blockcryper\r\n      try {\r\n        const bcAnswer : any | boolean = await apiLooper.post(apiBlocyper || getBlockcypher(NETWORK), `/txs/push`, {\r\n          body: {\r\n            tx: txRaw,\r\n          },\r\n          reportErrors: (error) => {\r\n            if (error\r\n              && error.res\r\n              && error.res.res\r\n              && error.res.res.statusMessage\r\n              && error.res.res.statusMessage === `Conflict`\r\n            ) {\r\n              reject(`Conflict`)\r\n              return false\r\n            } else {\r\n              if (error\r\n                && error.res\r\n                && error.res.body\r\n                && error.res.body.error\r\n              ) {\r\n                reject(error.res.body.error)\r\n                return false\r\n              }\r\n            }\r\n            return true\r\n          },\r\n          inQuery: {\r\n            delay: 500,\r\n            name: `blocyper`,\r\n          },\r\n        })\r\n        if (bcAnswer\r\n          && bcAnswer.tx\r\n          && bcAnswer.tx.hash) {\r\n          resolve({\r\n            txid: bcAnswer.tx.hash,\r\n          })\r\n        } else {\r\n          reject(`Cant decode answer`)\r\n        }\r\n      } catch (blocyperError) {\r\n        if (onBroadcastError instanceof Function) {\r\n          if (onBroadcastError(blocyperError)) reject(``)\r\n        } else {\r\n          reject(``)\r\n        }\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\n/*\r\n  Проверяет списание со скрипта - последняя транзакция выхода\r\n  Возвращает txId, адресс и сумму\r\n*/\r\nconst checkWithdraw = (options) => {\r\n  const {\r\n    scriptAddress,\r\n    apiBitpay,\r\n    NETWORK,\r\n  } = options\r\n\r\n  const url = `/address/${scriptAddress}/txs/`\r\n\r\n  return apiLooper.get(apiBitpay || getBitpay(NETWORK), url, {\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.length !== undefined) return true\r\n      } catch (e) { /* */ }\r\n      return false\r\n    },\r\n    inQuery: {\r\n      delay: 500,\r\n      name: `bitpay`,\r\n    },\r\n  }).then(async (txs: any) => {\r\n    // has two or more txs on script\r\n    if ((txs.length > 1)\r\n      && txs[0].mintTxid\r\n      && txs[0].spentTxid\r\n    ) {\r\n      try {\r\n        const spendTxInfo = await fetchTxInfo({\r\n          hash: txs[0].spentTxid,\r\n          apiBitpay\r\n        })\r\n        return {\r\n          address: spendTxInfo.receiverAddress,\r\n          txid: txs[0].spentTxid,\r\n          amount: new BigNumber(txs[0].value).dividedBy(1e8).toNumber(),\r\n        }\r\n      } catch (e) {\r\n        console.error('Fail check Withdraw for ', scriptAddress, e)\r\n      }\r\n    }\r\n    return false\r\n  })\r\n}\r\n\r\nconst fetchTxRaw = (options) => {\r\n  const {\r\n    txId,\r\n    cacheResponse,\r\n    apiBlocyper,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return apiLooper.get(apiBlocyper || getBlockcypher(NETWORK), `/txs/${txId}?includeHex=true`, {\r\n    cacheResponse,\r\n    checkStatus: (answer) => {\r\n      try {\r\n        if (answer && answer.hex !== undefined) return true\r\n      } catch (e) {}\r\n      return false\r\n    },\r\n    inQuery: {\r\n      delay: 500,\r\n      name: `blocyper`,\r\n    },\r\n  }).then(({ hex }) => hex)\r\n}\r\n\r\n\r\nconst getTransactionBlocyper = (options) => {\r\n  const {\r\n    address,\r\n    ownAddress,\r\n    ownType,\r\n    myWallets,\r\n    network,\r\n    apiBlocyper,\r\n    NETWORK,\r\n  } = options\r\n\r\n  return new Promise((resolve) => {\r\n    const type = (ownType) || 'btc'\r\n\r\n    const checkAddress = (address || ownAddress)\r\n    const url = `/addrs/${checkAddress}/full?txlimit=1000000`\r\n\r\n    apiLooper.get(\r\n      apiBlocyper || getBlockcypher(NETWORK),\r\n      url,\r\n      {\r\n        cacheResponse: 10*1000,\r\n        inQuery: {\r\n          delay: 500,\r\n          name: `blocyper`,\r\n        },\r\n      }\r\n    ).then((answer: any) => {\r\n      if (answer\r\n        && answer.txs\r\n      ) {\r\n        const transactions = answer.txs.map((item) => {\r\n          const hasOurInputs = item.inputs.filter((input) => {\r\n            return (input.addresses[0] === checkAddress)\r\n          })\r\n          const direction = hasOurInputs.length ? `out` : `in`\r\n\r\n          const isSelf = direction === 'out'\r\n            && item.outputs.filter((output) => {\r\n                const currentAddress = output.addresses[0]\r\n\r\n                return currentAddress === checkAddress\r\n            }).length === item.outputs.length\r\n\r\n          let value = isSelf\r\n            ? item.fees\r\n            : item.outputs.filter((output) => {\r\n              \r\n              const currentAddress = output.addresses[0]\r\n\r\n              return direction === 'in'\r\n                ? (currentAddress === checkAddress)\r\n                : (currentAddress !== checkAddress)\r\n            })[0].value\r\n\r\n          return({\r\n            type,\r\n            hash: item.hash,\r\n            canEdit: (myWallets.indexOf(checkAddress) !== -1),\r\n            confirmations: item.confirmations,\r\n            value: new BigNumber(value).dividedBy(1e8).toNumber(),\r\n            date: Date.parse(\r\n              (item.confirmations)\r\n                ? item.confirmed\r\n                : item.received\r\n            ),\r\n            direction: isSelf ? 'self' : direction,\r\n          })\r\n        })\r\n\r\n        resolve(transactions)\r\n      } else {\r\n        resolve([])\r\n      }\r\n    })\r\n    .catch((e) => {\r\n      console.error('Get btc txs Error', e)\r\n      resolve([])\r\n    })\r\n  })\r\n}\r\n\r\n/** \r\n  Draft - взято из фронта, там не используется\r\n  Но нужно реализовать\r\n  игноры - явные ошибки - есть зависимости от фронта shared/actions/btc\r\n  Ситауация такая - когда insight обновил свое апи, в быстром режиме нужно было\r\n  восстанавливать фронт - эта функция должна использоваться для получения списка\r\n  все транзакций на странице \"История\", но из-за изменений в их апи, быстрее было\r\n  использовать блокрипер - в этой функции есть проблемы с получением адресов получателя-отправителя\r\n**/\r\nconst getTransactionBitcore = (options) => {\r\n  const {\r\n    address,\r\n    ownType,\r\n    myWallets,\r\n    network,\r\n    apiBitpay,\r\n    NETWORK,\r\n  } = options\r\n  \r\n  return new Promise(async (resolve) => {\r\n    // @\r\n    const myAllWallets = getAllMyAddresses()\r\n    // @\r\n    let { user: { btcData: { address: userAddress } } } = getState()\r\n    // @\r\n    address = address || userAddress\r\n\r\n    const type = (ownType) || 'btc'\r\n    // @\r\n    if (!typeforce.isCoinAddress.BTC(address)) {\r\n      resolve([])\r\n    }\r\n\r\n    const blockInfo = await apiLooper.get(apiBitpay || getBitpay(NETWORK), `/block/tip`, {\r\n      /* cache */\r\n      /* query */\r\n    })\r\n    console.log('blockInfo', blockInfo)\r\n\r\n    const url = `/address/${address}/txs`\r\n\r\n    return apiLooper.get(apiBitpay, url, {\r\n      checkStatus: (answer) => {\r\n        try {\r\n          if (answer && answer.txs !== undefined) return true\r\n        } catch (e) { /* */ }\r\n        return false\r\n      },\r\n      inQuery: {\r\n        delay: 500,\r\n        name: `bitpay`,\r\n      },\r\n    }).then((res: any) => {\r\n      const transactions = res.txs.map((item) => {\r\n        const direction = item.vin[0].addr !== address ? 'in' : 'out'\r\n\r\n        const isSelf = direction === 'out'\r\n          && item.vout.filter((item) => {\r\n              const voutAddrBuf = Buffer.from(item.scriptPubKey.hex, 'hex')\r\n              const currentAddress = bitcoin.address.fromOutputScript(voutAddrBuf, network)\r\n              return currentAddress === address\r\n          }).length === item.vout.length\r\n\r\n        return({\r\n          type,\r\n          hash: item.txid,\r\n          canEdit: (myWallets.indexOf(address) !== -1),\r\n          confirmations: item.confirmations,\r\n          value: isSelf\r\n            ? item.fees\r\n            : item.vout.filter((item) => {\r\n              const voutAddrBuf = Buffer.from(item.scriptPubKey.hex, 'hex')\r\n              const currentAddress = bitcoin.address.fromOutputScript(voutAddrBuf, network)\r\n\r\n              return direction === 'in'\r\n                ? (currentAddress === address)\r\n                : (currentAddress !== address)\r\n            })[0].value,\r\n          date: item.time * 1000,\r\n          direction: isSelf ? 'self' : direction,\r\n        })\r\n      })\r\n      resolve(transactions)\r\n    }).catch((error) => {\r\n      console.error(error)\r\n      resolve([])\r\n    })\r\n  })\r\n}\r\n\r\nconst estimateFeeRateBLOCKCYPHER = (options) => {\r\n  const {\r\n    speed = 'fast',\r\n    NETWORK,\r\n  } = options\r\n\r\n  const _speed = (() => {\r\n    switch (speed) {\r\n      case 'fast':    return 'high_fee_per_kb'\r\n      case 'normal':  return 'medium_fee_per_kb'\r\n      case 'slow':    return 'low_fee_per_kb'\r\n      default:      return 'medium_fee_per_kb'\r\n    }\r\n  })()\r\n\r\n  // 10 minuts cache\r\n  // query request\r\n  return apiLooper\r\n    .get(getBlockcypher(NETWORK), ``, {\r\n      cacheResponse: 10*60*1000,\r\n      cacheOnFail: true,\r\n      inQuery: {\r\n        delay: 500,\r\n        name: `blocyper`,\r\n      },\r\n    } )\r\n    .then(info => Number(info[_speed]))\r\n}\r\n\r\nconst estimateFeeRateEARNCOM = (options) => {\r\n  const { speed = 'fast'} = options\r\n  const _speed = (() => {\r\n    switch (speed) {\r\n      case 'fast':    return 'fastestFee'\r\n      case 'normal':  return 'halfHourFee'\r\n      case 'slow':    return 'hourFee'\r\n      default:      return 'halfHourFee'\r\n    }\r\n  })()\r\n\r\n  // 10 minuts cache\r\n  // query request\r\n  // use cache if fail\r\n  return apiLooper\r\n    .get({\r\n      name: 'EARN_COM',\r\n      servers: `https://bitcoinfees.earn.com/api/v1/fees/recommended`,\r\n    }, ``, {\r\n      cacheResponse: 10*60*1000,\r\n      cacheOnFail: true,\r\n      inQuery: {\r\n        delay: 500,\r\n        name: `blocyper`,\r\n      },\r\n    } )\r\n    .then(fees => Number(fees[_speed]) * 1024)\r\n}\r\n\r\nconst estimateFeeRate = async (options) => {\r\n  try {\r\n    return await estimateFeeRateBLOCKCYPHER(options)\r\n  } catch (err) {\r\n    console.error(`EstimateFeeError: BLOCKCYPHER_API ${err.message}, trying EARN.COM...`)\r\n    return await estimateFeeRateEARNCOM(options)\r\n  }\r\n}\r\n\r\nconst calculateTxSize = async (options) => {\r\n  const {\r\n    speed,\r\n    unspents: _unspents,\r\n    address,\r\n    txOut = 2,\r\n    NETWORK,\r\n  } = options\r\n\r\n  const unspents = _unspents || await fetchUnspents({\r\n    address,\r\n    NETWORK,\r\n  })\r\n\r\n  const txIn = unspents.length\r\n\r\n  const txSize = txIn > 0\r\n    ? txIn * 146 + txOut * 33 + (15 + txIn - txOut)\r\n    : 226 // default tx size for 1 txIn and 2 txOut\r\n\r\n  return txSize\r\n}\r\n\r\nconst estimateFeeValue = async (options) => {\r\n  const {\r\n    feeRate: _feeRate,\r\n    inSatoshis,\r\n    speed,\r\n    address,\r\n    txSize: _txSize,\r\n    NETWORK,\r\n  } = options\r\n\r\n  let calculatedFeeValue\r\n\r\n  if (!_txSize && !address) {\r\n    calculatedFeeValue = new BigNumber(DUST).multipliedBy(1e-8)\r\n  } else {\r\n    const txSize = _txSize || await calculateTxSize({ address, speed })\r\n    const feeRate = _feeRate || await estimateFeeRate({ speed, NETWORK })\r\n\r\n    calculatedFeeValue = BigNumber.maximum(\r\n      DUST,\r\n      new BigNumber(feeRate)\r\n        .multipliedBy(txSize)\r\n        .div(1024)\r\n        .dp(0, BigNumber.ROUND_HALF_EVEN),\r\n    )\r\n  }\r\n\r\n  const finalFeeValue = inSatoshis\r\n    ? calculatedFeeValue.toString()\r\n    : calculatedFeeValue.multipliedBy(1e-8).toString()\r\n\r\n  return finalFeeValue\r\n}\r\n\r\nexport default {\r\n  fetchBalance,\r\n  fetchTx,\r\n  fetchTxInfo,\r\n  fetchUnspents,\r\n  broadcastTx,\r\n  checkWithdraw,\r\n  fetchTxRaw,\r\n  getTransactionBlocyper,\r\n\r\n  estimateFeeValue,\r\n  getCore,\r\n\r\n  prepareUnspents,\r\n}"]}]}