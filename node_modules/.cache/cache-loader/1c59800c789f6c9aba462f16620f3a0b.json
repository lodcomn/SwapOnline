{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\eth.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\eth.ts","mtime":1614852140903},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CgpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH0KCi8vIEB0cy1ub2NoZWNrCmltcG9ydCBoZWxwZXJzLCB7IGFwaUxvb3BlciwgY29uc3RhbnRzLCBjYWNoZVN0b3JhZ2VHZXQsIGNhY2hlU3RvcmFnZVNldCB9IGZyb20gJ2hlbHBlcnMnOwppbXBvcnQgeyBnZXRTdGF0ZSB9IGZyb20gJ3JlZHV4L2NvcmUnOwppbXBvcnQgYWN0aW9ucyBmcm9tICdyZWR1eC9hY3Rpb25zJzsKaW1wb3J0IHsgd2ViMywgZ2V0V2ViMyB9IGZyb20gJ2hlbHBlcnMvd2ViMyc7IC8vQAoKaW1wb3J0IHsgdXRpbHMgYXMgd2ViM3V0aWxzIH0gZnJvbSAnd2ViMyc7CmltcG9ydCByZWR1Y2VycyBmcm9tICdyZWR1eC9jb3JlL3JlZHVjZXJzJzsKaW1wb3J0IGNvbmZpZyBmcm9tICdoZWxwZXJzL2V4dGVybmFsQ29uZmlnJzsKaW1wb3J0IHJlZmVycmFsIGZyb20gJy4vcmVmZXJyYWwnOwppbXBvcnQgKiBhcyBiaXAzOSBmcm9tICdiaXAzOSc7CmltcG9ydCB0eXBlZm9yY2UgZnJvbSAnc3dhcC5hcHAvdXRpbC90eXBlZm9yY2UnOwppbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdiaWdudW1iZXIuanMnOwppbXBvcnQgKiBhcyBtbmVtb25pY1V0aWxzIGZyb20gJy4uLy4uLy4uLy4uL2NvbW1vbi91dGlscy9tbmVtb25pYyc7CmltcG9ydCBtZXRhbWFzayBmcm9tICdoZWxwZXJzL21ldGFtYXNrJzsKdmFyIGhhc0FkbWluRmVlID0gY29uZmlnICYmIGNvbmZpZy5vcHRzICYmIGNvbmZpZy5vcHRzLmZlZSAmJiBjb25maWcub3B0cy5mZWUuZXRoICYmIGNvbmZpZy5vcHRzLmZlZS5ldGguZmVlICYmIGNvbmZpZy5vcHRzLmZlZS5ldGguYWRkcmVzcyAmJiBjb25maWcub3B0cy5mZWUuZXRoLm1pbiA/IGNvbmZpZy5vcHRzLmZlZS5ldGggOiBmYWxzZTsKCnZhciBnZXRSYW5kb21NbmVtb25pY1dvcmRzID0gZnVuY3Rpb24gZ2V0UmFuZG9tTW5lbW9uaWNXb3JkcygpIHsKICByZXR1cm4gYmlwMzkuZ2VuZXJhdGVNbmVtb25pYygpOwp9OwoKdmFyIHZhbGlkYXRlTW5lbW9uaWNXb3JkcyA9IGZ1bmN0aW9uIHZhbGlkYXRlTW5lbW9uaWNXb3JkcyhtbmVtb25pYykgewogIHJldHVybiBiaXAzOS52YWxpZGF0ZU1uZW1vbmljKG1uZW1vbmljVXRpbHMuY29udmVydE1uZW1vbmljVG9WYWxpZChtbmVtb25pYykpOwp9OwoKdmFyIHN3ZWVwVG9NbmVtb25pYyA9IGZ1bmN0aW9uIHN3ZWVwVG9NbmVtb25pYyhtbmVtb25pYywgcGF0aCkgewogIHZhciB3YWxsZXQgPSBnZXRXYWxsZXRCeVdvcmRzKG1uZW1vbmljLCBwYXRoKTsKICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShjb25zdGFudHMucHJpdmF0ZUtleU5hbWVzLmV0aE1uZW1vbmljLCB3YWxsZXQucHJpdmF0ZUtleSk7CiAgcmV0dXJuIHdhbGxldC5wcml2YXRlS2V5Owp9OwoKdmFyIGlzU3dlZXBlZCA9IGZ1bmN0aW9uIGlzU3dlZXBlZCgpIHsKICB2YXIgX2dldFN0YXRlID0gZ2V0U3RhdGUoKSwKICAgICAgX2dldFN0YXRlJHVzZXIgPSBfZ2V0U3RhdGUudXNlciwKICAgICAgZXRoRGF0YSA9IF9nZXRTdGF0ZSR1c2VyLmV0aERhdGEsCiAgICAgIGV0aE1uZW1vbmljRGF0YSA9IF9nZXRTdGF0ZSR1c2VyLmV0aE1uZW1vbmljRGF0YTsKCiAgaWYgKGV0aE1uZW1vbmljRGF0YSAmJiBldGhNbmVtb25pY0RhdGEuYWRkcmVzcyAmJiBldGhEYXRhICYmIGV0aERhdGEuYWRkcmVzcyAmJiBldGhEYXRhLmFkZHJlc3MudG9Mb3dlckNhc2UoKSAhPT0gZXRoTW5lbW9uaWNEYXRhLmFkZHJlc3MudG9Mb3dlckNhc2UoKSkgcmV0dXJuIGZhbHNlOwogIHJldHVybiB0cnVlOwp9OwoKdmFyIGdldEFsbE15QWRkcmVzc2VzID0gZnVuY3Rpb24gZ2V0QWxsTXlBZGRyZXNzZXMoKSB7CiAgdmFyIF9nZXRTdGF0ZTIgPSBnZXRTdGF0ZSgpLAogICAgICBfZ2V0U3RhdGUyJHVzZXIgPSBfZ2V0U3RhdGUyLnVzZXIsCiAgICAgIGV0aERhdGEgPSBfZ2V0U3RhdGUyJHVzZXIuZXRoRGF0YSwKICAgICAgZXRoTW5lbW9uaWNEYXRhID0gX2dldFN0YXRlMiR1c2VyLmV0aE1uZW1vbmljRGF0YTsKCiAgdmFyIHJldERhdGEgPSBbZXRoRGF0YS5hZGRyZXNzLnRvTG93ZXJDYXNlKCldOwogIGlmIChldGhNbmVtb25pY0RhdGEgJiYgZXRoTW5lbW9uaWNEYXRhLmFkZHJlc3MgJiYgZXRoTW5lbW9uaWNEYXRhLmFkZHJlc3MudG9Mb3dlckNhc2UoKSAhPT0gZXRoRGF0YS5hZGRyZXNzLnRvTG93ZXJDYXNlKCkpIHJldERhdGEucHVzaChldGhNbmVtb25pY0RhdGEuYWRkcmVzcy50b0xvd2VyQ2FzZSgpKTsKICByZXR1cm4gcmV0RGF0YTsKfTsKCnZhciBnZXRTd2VlcEFkZHJlc3MgPSBmdW5jdGlvbiBnZXRTd2VlcEFkZHJlc3MoKSB7CiAgdmFyIF9nZXRTdGF0ZTMgPSBnZXRTdGF0ZSgpLAogICAgICBldGhNbmVtb25pY0RhdGEgPSBfZ2V0U3RhdGUzLnVzZXIuZXRoTW5lbW9uaWNEYXRhOwoKICBpZiAoZXRoTW5lbW9uaWNEYXRhICYmIGV0aE1uZW1vbmljRGF0YS5hZGRyZXNzKSByZXR1cm4gZXRoTW5lbW9uaWNEYXRhLmFkZHJlc3M7CiAgcmV0dXJuIGZhbHNlOwp9OwoKdmFyIGdldFByaXZhdGVLZXlCeUFkZHJlc3MgPSBmdW5jdGlvbiBnZXRQcml2YXRlS2V5QnlBZGRyZXNzKGFkZHJlc3MpIHsKICB2YXIgX2dldFN0YXRlNCA9IGdldFN0YXRlKCksCiAgICAgIF9nZXRTdGF0ZTQkdXNlciA9IF9nZXRTdGF0ZTQudXNlciwKICAgICAgX2dldFN0YXRlNCR1c2VyJGV0aERhID0gX2dldFN0YXRlNCR1c2VyLmV0aERhdGEsCiAgICAgIG9sZEFkZHJlc3MgPSBfZ2V0U3RhdGU0JHVzZXIkZXRoRGEuYWRkcmVzcywKICAgICAgcHJpdmF0ZUtleSA9IF9nZXRTdGF0ZTQkdXNlciRldGhEYS5wcml2YXRlS2V5LAogICAgICBfZ2V0U3RhdGU0JHVzZXIkZXRoTW4gPSBfZ2V0U3RhdGU0JHVzZXIuZXRoTW5lbW9uaWNEYXRhLAogICAgICBtbmVtb25pY0FkZHJlc3MgPSBfZ2V0U3RhdGU0JHVzZXIkZXRoTW4uYWRkcmVzcywKICAgICAgbW5lbW9uaWNLZXkgPSBfZ2V0U3RhdGU0JHVzZXIkZXRoTW4ucHJpdmF0ZUtleTsKCiAgaWYgKG9sZEFkZHJlc3MgPT09IGFkZHJlc3MpIHJldHVybiBwcml2YXRlS2V5OwogIGlmIChtbmVtb25pY0FkZHJlc3MgPT09IGFkZHJlc3MpIHJldHVybiBtbmVtb25pY0tleTsKfTsKCnZhciBnZXRXYWxsZXRCeVdvcmRzID0gZnVuY3Rpb24gZ2V0V2FsbGV0QnlXb3JkcyhtbmVtb25pYykgewogIHZhciB3YWxsZXROdW1iZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CiAgdmFyIHBhdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnOwogIC8vIGluIGV0aCBhZGRyZXNzIGFyZSBlcXVhbHMgaW4gYWxsIG5ldHdvcmRzCiAgcmV0dXJuIG1uZW1vbmljVXRpbHMuZ2V0RXRoV2FsbGV0KCdub3RoaW5nJywgbW5lbW9uaWMsIHdhbGxldE51bWJlciwgcGF0aCk7Cn07Cgp2YXIgbG9naW4gPSBmdW5jdGlvbiBsb2dpbihwcml2YXRlS2V5KSB7CiAgdmFyIG1uZW1vbmljID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsOwogIHZhciBtbmVtb25pY0tleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7CiAgdmFyIHN3ZWVwVG9NbmVtb25pY1JlYWR5ID0gZmFsc2U7CgogIGlmIChwcml2YXRlS2V5ICYmIG1uZW1vbmljICYmIG1uZW1vbmljS2V5cyAmJiBtbmVtb25pY0tleXMuZXRoID09PSBwcml2YXRlS2V5KSB7CiAgICBzd2VlcFRvTW5lbW9uaWNSZWFkeSA9IHRydWU7CiAgfQoKICBpZiAoIXByaXZhdGVLZXkgJiYgbW5lbW9uaWMpIHsKICAgIHN3ZWVwVG9NbmVtb25pY1JlYWR5ID0gdHJ1ZTsKICB9CgogIHZhciBkYXRhOwoKICBpZiAocHJpdmF0ZUtleSkgewogICAgZGF0YSA9IHdlYjMuZXRoLmFjY291bnRzLnByaXZhdGVLZXlUb0FjY291bnQocHJpdmF0ZUtleSk7CiAgfSBlbHNlIHsKICAgIGNvbnNvbGUuaW5mbygnQ3JlYXRlZCBhY2NvdW50IEV0aGVyZXVtIC4uLicpOyAvLyBkYXRhID0gd2ViMy5ldGguYWNjb3VudHMuY3JlYXRlKCkKCiAgICBpZiAoIW1uZW1vbmljKSB7CiAgICAgIG1uZW1vbmljID0gYmlwMzkuZ2VuZXJhdGVNbmVtb25pYygpOwogICAgfQoKICAgIHZhciBhY2NEYXRhID0gZ2V0V2FsbGV0QnlXb3JkcyhtbmVtb25pYyk7CiAgICBjb25zb2xlLmxvZygnRXRoLiBHZW5lcmF0ZWQgd2FsbGV0IGZyb20gcmFuZG9tIDEyIHdvcmRzJyk7CiAgICBjb25zb2xlLmxvZyhhY2NEYXRhKTsKICAgIHByaXZhdGVLZXkgPSBhY2NEYXRhLnByaXZhdGVLZXk7CiAgICBkYXRhID0gd2ViMy5ldGguYWNjb3VudHMucHJpdmF0ZUtleVRvQWNjb3VudChwcml2YXRlS2V5KTsKICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGNvbnN0YW50cy5wcml2YXRlS2V5TmFtZXMuZXRoTW5lbW9uaWMsIHByaXZhdGVLZXkpOwogIH0KCiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY29uc3RhbnRzLnByaXZhdGVLZXlOYW1lcy5ldGgsIGRhdGEucHJpdmF0ZUtleSk7CiAgd2ViMy5ldGguYWNjb3VudHMud2FsbGV0LmFkZChkYXRhLnByaXZhdGVLZXkpOwogIGRhdGEuaXNNbmVtb25pYyA9IHN3ZWVwVG9NbmVtb25pY1JlYWR5OwogIHJlZHVjZXJzLnVzZXIuc2V0QXV0aERhdGEoewogICAgbmFtZTogJ2V0aERhdGEnLAogICAgZGF0YTogZGF0YQogIH0pOwoKICB3aW5kb3cuZ2V0RXRoQWRkcmVzcyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBkYXRhLmFkZHJlc3M7CiAgfTsKCiAgcmVmZXJyYWwubmV3UmVmZXJyYWwoZGF0YS5hZGRyZXNzKTsKICBjb25zb2xlLmluZm8oJ0xvZ2dlZCBpbiB3aXRoIEV0aGVyZXVtJywgZGF0YSk7CgogIGlmICghc3dlZXBUb01uZW1vbmljUmVhZHkpIHsKICAgIC8vIEF1dGggd2l0aCBvdXIgbW5lbW9uaWMgYWNjb3VudAogICAgaWYgKG1uZW1vbmljID09PSAiLSIpIHsKICAgICAgY29uc29sZS5lcnJvcignU3dlZXAuIENhbnQgYXV0aC4gTmVlZCBuZXcgbW5lbW9uaWMgb3IgZW50ZXIgb3duIGZvciByZS1sb2dpbicpOwogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKCFtbmVtb25pY0tleXMgfHwgIW1uZW1vbmljS2V5cy5ldGgpIHsKICAgICAgY29uc29sZS5lcnJvcignU3dlZXAuIENhbnQgYXV0aC4gTG9naW4ga2V5IHVuZGVmaW5lZCcpOwogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIG1uZW1vbmljRGF0YSA9IHdlYjMuZXRoLmFjY291bnRzLnByaXZhdGVLZXlUb0FjY291bnQobW5lbW9uaWNLZXlzLmV0aCk7CiAgICB3ZWIzLmV0aC5hY2NvdW50cy53YWxsZXQuYWRkKG1uZW1vbmljS2V5cy5ldGgpOyAvL0AKCiAgICBtbmVtb25pY0RhdGEuaXNNbmVtb25pYyA9IHN3ZWVwVG9NbmVtb25pY1JlYWR5OwogICAgY29uc29sZS5pbmZvKCdMb2dnZWQgaW4gd2l0aCBFdGhlcmV1bSBNbmVtb25pYycsIG1uZW1vbmljRGF0YSk7CiAgICByZWR1Y2Vycy51c2VyLmFkZFdhbGxldCh7CiAgICAgIG5hbWU6ICdldGhNbmVtb25pY0RhdGEnLAogICAgICBkYXRhOiBfb2JqZWN0U3ByZWFkKHsKICAgICAgICBjdXJyZW5jeTogJ0VUSCcsCiAgICAgICAgZnVsbE5hbWU6ICdFdGhlcmV1bSAoTmV3KScsCiAgICAgICAgYmFsYW5jZTogMCwKICAgICAgICBpc0JhbGFuY2VGZXRjaGVkOiBmYWxzZSwKICAgICAgICBiYWxhbmNlRXJyb3I6IG51bGwsCiAgICAgICAgaW5mb0Fib3V0Q3VycmVuY3k6IG51bGwKICAgICAgfSwgbW5lbW9uaWNEYXRhKQogICAgfSk7CiAgICBuZXcgUHJvbWlzZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlc29sdmUpIHsKICAgICAgICB2YXIgYmFsYW5jZTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hCYWxhbmNlKG1uZW1vbmljRGF0YS5hZGRyZXNzKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgYmFsYW5jZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICByZWR1Y2Vycy51c2VyLnNldEF1dGhEYXRhKHsKICAgICAgICAgICAgICAgICAgbmFtZTogJ2V0aE1uZW1vbmljRGF0YScsCiAgICAgICAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICAgICAgICBiYWxhbmNlOiBiYWxhbmNlLAogICAgICAgICAgICAgICAgICAgIGlzQmFsYW5jZUZldGNoZWQ6IHRydWUKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCkpOwogIH0KCiAgcmV0dXJuIGRhdGEucHJpdmF0ZUtleTsKfTsKCnZhciBpc0VUSEFkZHJlc3MgPSBmdW5jdGlvbiBpc0VUSEFkZHJlc3MoYWRkcmVzcykgewogIHZhciBfZ2V0U3RhdGU1ID0gZ2V0U3RhdGUoKSwKICAgICAgZXRoRGF0YSA9IF9nZXRTdGF0ZTUudXNlci5ldGhEYXRhOwoKICBpZiAoZXRoRGF0YSAmJiBldGhEYXRhLmFkZHJlc3MgJiYgZXRoRGF0YS5hZGRyZXNzLnRvTG93ZXJDYXNlKCkgPT09IGFkZHJlc3MudG9Mb3dlckNhc2UoKSkgcmV0dXJuIGV0aERhdGE7Cn07Cgp2YXIgZ2V0QmFsYW5jZSA9IGZ1bmN0aW9uIGdldEJhbGFuY2UoKSB7CiAgdmFyIF9nZXRTdGF0ZTYgPSBnZXRTdGF0ZSgpLAogICAgICBldGhBZGRyZXNzID0gX2dldFN0YXRlNi51c2VyLmV0aERhdGEuYWRkcmVzczsKCiAgdmFyIGFkZHJlc3MgPSBtZXRhbWFzay5pc0VuYWJsZWQoKSAmJiBtZXRhbWFzay5pc0Nvbm5lY3RlZCgpID8gbWV0YW1hc2suZ2V0QWRkcmVzcygpIDogZXRoQWRkcmVzczsKICB2YXIgYmFsYW5jZUluQ2FjaGUgPSBjYWNoZVN0b3JhZ2VHZXQoJ2N1cnJlbmN5QmFsYW5jZXMnLCAiZXRoXyIuY29uY2F0KGFkZHJlc3MpKTsKCiAgaWYgKGJhbGFuY2VJbkNhY2hlICE9PSBmYWxzZSkgewogICAgcmVkdWNlcnMudXNlci5zZXRCYWxhbmNlKHsKICAgICAgbmFtZTogJ2V0aERhdGEnLAogICAgICBhbW91bnQ6IGJhbGFuY2VJbkNhY2hlCiAgICB9KTsKICAgIHJldHVybiBiYWxhbmNlSW5DYWNoZTsKICB9CgogIHJldHVybiB3ZWIzLmV0aC5nZXRCYWxhbmNlKGFkZHJlc3MpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgdmFyIGFtb3VudCA9IHdlYjMudXRpbHMuZnJvbVdlaShyZXN1bHQpOwogICAgY2FjaGVTdG9yYWdlU2V0KCdjdXJyZW5jeUJhbGFuY2VzJywgImV0aF8iLmNvbmNhdChhZGRyZXNzKSwgYW1vdW50LCAzMCk7CiAgICByZWR1Y2Vycy51c2VyLnNldEJhbGFuY2UoewogICAgICBuYW1lOiAnZXRoRGF0YScsCiAgICAgIGFtb3VudDogYW1vdW50CiAgICB9KTsKICAgIHJldHVybiBhbW91bnQ7CiAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGUpIHsKICAgIHJlZHVjZXJzLnVzZXIuc2V0QmFsYW5jZUVycm9yKHsKICAgICAgbmFtZTogJ2V0aERhdGEnCiAgICB9KTsKICB9KTsKfTsKCnZhciBnZXRSZXB1dGF0aW9uID0gZnVuY3Rpb24gZ2V0UmVwdXRhdGlvbigpIHsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKDApOwp9OwoKdmFyIGZldGNoQmFsYW5jZSA9IGZ1bmN0aW9uIGZldGNoQmFsYW5jZShhZGRyZXNzKSB7CiAgcmV0dXJuIHdlYjMuZXRoLmdldEJhbGFuY2UoYWRkcmVzcykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICByZXR1cm4gTnVtYmVyKHdlYjMudXRpbHMuZnJvbVdlaShyZXN1bHQpKTsKICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZSkgewogICAgY29uc29sZS5sb2coJ1dlYjMgZG9lc25cJ3Qgd29yayBwbGVhc2UgYWdhaW4gbGF0ZXIgJywgZS5lcnJvcik7CiAgfSk7Cn07Cgp2YXIgZ2V0SW52b2ljZXMgPSBmdW5jdGlvbiBnZXRJbnZvaWNlcyhhZGRyZXNzKSB7CiAgdmFyIF9nZXRTdGF0ZTcgPSBnZXRTdGF0ZSgpLAogICAgICB1c2VyQWRkcmVzcyA9IF9nZXRTdGF0ZTcudXNlci5ldGhEYXRhLnVzZXJBZGRyZXNzOwoKICBhZGRyZXNzID0gYWRkcmVzcyB8fCB1c2VyQWRkcmVzczsKICByZXR1cm4gYWN0aW9ucy5pbnZvaWNlcy5nZXRJbnZvaWNlcyh7CiAgICBjdXJyZW5jeTogJ0VUSCcsCiAgICBhZGRyZXNzOiBhZGRyZXNzCiAgfSk7Cn07Cgp2YXIgZ2V0VHggPSBmdW5jdGlvbiBnZXRUeCh0eFJhdykgewogIHJldHVybiB0eFJhdy50cmFuc2FjdGlvbkhhc2g7Cn07Cgp2YXIgZ2V0VHhSb3V0ZXIgPSBmdW5jdGlvbiBnZXRUeFJvdXRlcih0eElkKSB7CiAgcmV0dXJuICIvZXRoL3R4LyIuY29uY2F0KHR4SWQpOwp9OwoKdmFyIGdldExpbmtUb0luZm8gPSBmdW5jdGlvbiBnZXRMaW5rVG9JbmZvKHR4KSB7CiAgaWYgKCF0eCkgewogICAgcmV0dXJuOwogIH0KCiAgcmV0dXJuICIiLmNvbmNhdChjb25maWcubGluay5ldGhlcnNjYW4sICIvdHgvIikuY29uY2F0KHR4KTsKfTsKCnZhciBnZXRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uIGdldFRyYW5zYWN0aW9uKCkgewogIHZhciBhZGRyZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAiIjsKICB2YXIgb3duVHlwZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogIiI7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICB2YXIgX2dldFN0YXRlOCA9IGdldFN0YXRlKCksCiAgICAgICAgdXNlckFkZHJlc3MgPSBfZ2V0U3RhdGU4LnVzZXIuZXRoRGF0YS5hZGRyZXNzOwoKICAgIGFkZHJlc3MgPSBhZGRyZXNzIHx8IHVzZXJBZGRyZXNzOwoKICAgIGlmICghdHlwZWZvcmNlLmlzQ29pbkFkZHJlc3MuRVRIKGFkZHJlc3MpKSB7CiAgICAgIHJlc29sdmUoW10pOwogICAgfQoKICAgIHZhciB0eXBlID0gb3duVHlwZSB8fCAnZXRoJzsgLy8gRmlyc3QgLSBnZXQgaW50ZXJuYWwgdHhzCgogICAgdmFyIGludGVybmFsVXJsID0gIj9tb2R1bGU9YWNjb3VudCZhY3Rpb249dHhsaXN0aW50ZXJuYWwmYWRkcmVzcz0iLmNvbmNhdChhZGRyZXNzLCAiJnN0YXJ0YmxvY2s9MCZlbmRibG9jaz05OTk5OTk5OSZzb3J0PWFzYyZhcGlrZXk9IikuY29uY2F0KGNvbmZpZy5hcGkuZXRoZXJzY2FuX0FwaUtleSk7CiAgICB2YXIgdXJsID0gIj9tb2R1bGU9YWNjb3VudCZhY3Rpb249dHhsaXN0JmFkZHJlc3M9Ii5jb25jYXQoYWRkcmVzcywgIiZzdGFydGJsb2NrPTAmZW5kYmxvY2s9OTk5OTk5OTkmc29ydD1hc2MmYXBpa2V5PSIpLmNvbmNhdChjb25maWcuYXBpLmV0aGVyc2Nhbl9BcGlLZXkpOwogICAgYXBpTG9vcGVyLmdldCgnZXRoZXJzY2FuJywgaW50ZXJuYWxVcmwpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICB2YXIgaW50ZXJuYWxzID0gW107CiAgICAgIHJlcy5yZXN1bHQubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIHZhbHVlID0gaXRlbS52YWx1ZSwKICAgICAgICAgICAgdG8gPSBpdGVtLnRvOwogICAgICAgIGludGVybmFsc1tpdGVtLmhhc2hdID0gewogICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgdG86IHRvCiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIGFwaUxvb3Blci5nZXQoJ2V0aGVyc2NhbicsIHVybCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgdmFyIHRyYW5zYWN0aW9ucyA9IHJlcy5yZXN1bHQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gaXRlbS52YWx1ZSA+IDAgfHwgaW50ZXJuYWxzW2l0ZW0uaGFzaF0gIT09IHVuZGVmaW5lZCAmJiBpbnRlcm5hbHNbaXRlbS5oYXNoXS52YWx1ZSA+IDA7CiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgICAgICBjb25maXJtYXRpb25zOiBpdGVtLmNvbmZpcm1hdGlvbnMsCiAgICAgICAgICAgIGhhc2g6IGl0ZW0uaGFzaCwKICAgICAgICAgICAgc3RhdHVzOiBpdGVtLmJsb2NrSGFzaCAhPSBudWxsID8gMSA6IDAsCiAgICAgICAgICAgIHZhbHVlOiB3ZWIzLnV0aWxzLmZyb21XZWkoaW50ZXJuYWxzW2l0ZW0uaGFzaF0gIT09IHVuZGVmaW5lZCAmJiBpbnRlcm5hbHNbaXRlbS5oYXNoXS52YWx1ZSA+IDAgPyBpbnRlcm5hbHNbaXRlbS5oYXNoXS52YWx1ZSA6IGl0ZW0udmFsdWUpLAogICAgICAgICAgICBhZGRyZXNzOiBpdGVtLnRvLAogICAgICAgICAgICBjYW5FZGl0OiBhZGRyZXNzID09PSB1c2VyQWRkcmVzcywKICAgICAgICAgICAgZGF0ZTogaXRlbS50aW1lU3RhbXAgKiAxMDAwLAogICAgICAgICAgICBkaXJlY3Rpb246IGludGVybmFsc1tpdGVtLmhhc2hdICE9PSB1bmRlZmluZWQgJiYgaW50ZXJuYWxzW2l0ZW0uaGFzaF0udG8udG9Mb3dlckNhc2UoKSA9PSBhZGRyZXNzLnRvTG93ZXJDYXNlKCkgPyAnaW4nIDogYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSBpdGVtLnRvLnRvTG93ZXJDYXNlKCkgPyAnaW4nIDogJ291dCcKICAgICAgICAgIH07CiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBpZiAoaXRlbS5kaXJlY3Rpb24gPT09ICdpbicpIHJldHVybiB0cnVlOwogICAgICAgICAgaWYgKCFoYXNBZG1pbkZlZSkgcmV0dXJuIHRydWU7CiAgICAgICAgICBpZiAoYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSBoYXNBZG1pbkZlZS5hZGRyZXNzLnRvTG93ZXJDYXNlKCkpIHJldHVybiB0cnVlOwogICAgICAgICAgaWYgKGl0ZW0uYWRkcmVzcy50b0xvd2VyQ2FzZSgpID09PSBoYXNBZG1pbkZlZS5hZGRyZXNzLnRvTG93ZXJDYXNlKCkpIHJldHVybiBmYWxzZTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0pOwogICAgICAgIHJlc29sdmUodHJhbnNhY3Rpb25zKTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGUpIHsKICAgICAgICBjb25zb2xlLndhcm4oIkZhaWwgZ2V0IHR4cyBmb3IgRVRIICIuY29uY2F0KGFkZHJlc3MpLCBlKTsKICAgICAgICByZXNvbHZlKFtdKTsKICAgICAgfSk7CiAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZSkgewogICAgICBjb25zb2xlLndhcm4oIkZhaWwgZ2V0IHR4cyBmb3IgRVRIICIuY29uY2F0KGFkZHJlc3MpLCBlKTsKICAgICAgcmVzb2x2ZShbXSk7CiAgICB9KTsKICB9KTsKfTsKCnZhciBzZW5kID0gZnVuY3Rpb24gc2VuZChkYXRhKSB7CiAgdmFyIG1ldGFtYXNrRW5hYmxlID0gbWV0YW1hc2suaXNFbmFibGVkKCkgJiYgbWV0YW1hc2suaXNDb25uZWN0ZWQoKTsKICByZXR1cm4gaGFzQWRtaW5GZWUgJiYgIW1ldGFtYXNrRW5hYmxlID8gc2VuZFdpdGhBZG1pbkZlZShkYXRhKSA6IHNlbmREZWZhdWx0KGRhdGEpOwp9OwoKdmFyIHNlbmRXaXRoQWRtaW5GZWUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KF9yZWYyKSB7CiAgICB2YXIgZnJvbSwgdG8sIGFtb3VudCwgZ2FzUHJpY2UsIGdhc0xpbWl0LCBzcGVlZCwgd2ViM2pzLCBfY29uZmlnJG9wdHMkZmVlJGV0aCwgYWRtaW5GZWUsIGFkbWluRmVlQWRkcmVzcywgYWRtaW5GZWVNaW5WYWx1ZSwgYWRtaW5GZWVNaW4sIGZlZUZyb21BbW91bnQsIHdhbGxldERhdGEsIHByaXZhdGVLZXk7CgogICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGZyb20gPSBfcmVmMi5mcm9tLCB0byA9IF9yZWYyLnRvLCBhbW91bnQgPSBfcmVmMi5hbW91bnQsIGdhc1ByaWNlID0gX3JlZjIuZ2FzUHJpY2UsIGdhc0xpbWl0ID0gX3JlZjIuZ2FzTGltaXQsIHNwZWVkID0gX3JlZjIuc3BlZWQ7CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIGdldFdlYjMoKTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHdlYjNqcyA9IF9jb250ZXh0NC5zZW50OwogICAgICAgICAgICBfY29uZmlnJG9wdHMkZmVlJGV0aCA9IGNvbmZpZy5vcHRzLmZlZS5ldGgsIGFkbWluRmVlID0gX2NvbmZpZyRvcHRzJGZlZSRldGguZmVlLCBhZG1pbkZlZUFkZHJlc3MgPSBfY29uZmlnJG9wdHMkZmVlJGV0aC5hZGRyZXNzLCBhZG1pbkZlZU1pblZhbHVlID0gX2NvbmZpZyRvcHRzJGZlZSRldGgubWluOwogICAgICAgICAgICBhZG1pbkZlZU1pbiA9IG5ldyBCaWdOdW1iZXIoYWRtaW5GZWVNaW5WYWx1ZSk7IC8vIGZlZSAtIGZyb20gYW1vdW50IC0gcGVyY2VudAoKICAgICAgICAgICAgZmVlRnJvbUFtb3VudCA9IG5ldyBCaWdOdW1iZXIoYWRtaW5GZWUpLmRpdmlkZWRCeSgxMDApLm11bHRpcGxpZWRCeShhbW91bnQpOwogICAgICAgICAgICBpZiAoYWRtaW5GZWVNaW4uaXNHcmVhdGVyVGhhbihmZWVGcm9tQW1vdW50KSkgZmVlRnJvbUFtb3VudCA9IGFkbWluRmVlTWluOyAvL0AKCiAgICAgICAgICAgIGZlZUZyb21BbW91bnQgPSBmZWVGcm9tQW1vdW50LnRvTnVtYmVyKCk7IC8vIEFkbWluIGZlZQoKICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gZ2FzUHJpY2U7CgogICAgICAgICAgICBpZiAoX2NvbnRleHQ0LnQwKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNDsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMzsKICAgICAgICAgICAgcmV0dXJuIGhlbHBlcnMuZXRoLmVzdGltYXRlR2FzUHJpY2UoewogICAgICAgICAgICAgIHNwZWVkOiBzcGVlZAogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDQuc2VudDsKCiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBnYXNQcmljZSA9IF9jb250ZXh0NC50MDsKICAgICAgICAgICAgZ2FzTGltaXQgPSBnYXNMaW1pdCB8fCBjb25zdGFudHMuZGVmYXVsdEZlZVJhdGVzLmV0aC5saW1pdC5zZW5kOwogICAgICAgICAgICB3YWxsZXREYXRhID0gYWN0aW9ucy5jb3JlLmdldFdhbGxldCh7CiAgICAgICAgICAgICAgYWRkcmVzczogZnJvbSwKICAgICAgICAgICAgICBjdXJyZW5jeTogJ0VUSCcKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHByaXZhdGVLZXkgPSAhd2FsbGV0RGF0YS5pc01ldGFtYXNrID8gZ2V0UHJpdmF0ZUtleUJ5QWRkcmVzcyhmcm9tKSA6IGZhbHNlOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zLCByYXdUeCwgc2lnbmVkVHgsIHJlY2VpcHQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IGZyb20sCiAgICAgICAgICAgICAgICAgICAgICAgICAgdG86IFN0cmluZyh0bykudHJpbSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBnYXNQcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBnYXM6IGdhc0xpbWl0LAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB3ZWIzdXRpbHMudG9XZWkoU3RyaW5nKGFtb3VudCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FsbGV0RGF0YS5pc01ldGFtYXNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA2OwogICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWIzanMuZXRoLmFjY291bnRzLnNpZ25UcmFuc2FjdGlvbihwYXJhbXMsIHByaXZhdGVLZXkpOwoKICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmVkVHggPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgcmF3VHggPSBzaWduZWRUeC5yYXdUcmFuc2FjdGlvbjsKCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgICAgICAgIC8vQAogICAgICAgICAgICAgICAgICAgICAgICByZWNlaXB0ID0gd2ViM2pzLmV0aFt3YWxsZXREYXRhLmlzTWV0YW1hc2sgPyAnc2VuZFRyYW5zYWN0aW9uJyA6ICdzZW5kU2lnbmVkVHJhbnNhY3Rpb24nXSh3YWxsZXREYXRhLmlzTWV0YW1hc2sgPyBwYXJhbXMgOiByYXdUeCkub24oJ3RyYW5zYWN0aW9uSGFzaCcsIGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR4SWQgPSAiIi5jb25jYXQoY29uZmlnLmxpbmsuZXRoZXJzY2FuLCAiL3R4LyIpLmNvbmNhdChoYXNoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndHgnLCB0eElkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zLmxvYWRlci5zaG93KHRydWUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4SWQ6IHR4SWQKICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWlwdC50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlY2VpcHQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhbGxldERhdGEuaXNNZXRhbWFzaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2l0aGRyYXcgYWRtaW4gZmVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSggLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yZWY1ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkbWluRmVlUGFyYW1zLCByZXN1bHRBZG1pbkZlZSwgcmVjZWlwdEFkbWluRmVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRtaW5GZWVQYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBTdHJpbmcoYWRtaW5GZWVBZGRyZXNzKS50cmltKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBnYXNQcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzOiBnYXNMaW1pdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHdlYjN1dGlscy50b1dlaShTdHJpbmcoZmVlRnJvbUFtb3VudCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0QWRtaW5GZWUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhbGxldERhdGEuaXNNZXRhbWFzaykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWIzanMuZXRoLmFjY291bnRzLnNpZ25UcmFuc2FjdGlvbihhZG1pbkZlZVBhcmFtcyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEFkbWluRmVlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2ViM2pzLmV0aC5hY2NvdW50cy5zaWduVHJhbnNhY3Rpb24oYWRtaW5GZWVQYXJhbXMsIHByaXZhdGVLZXkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0QWRtaW5GZWUgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWlwdEFkbWluRmVlID0gd2ViM2pzLmV0aC5zZW5kU2lnbmVkVHJhbnNhY3Rpb24ocmVzdWx0QWRtaW5GZWUucmF3VHJhbnNhY3Rpb24pLm9uKCd0cmFuc2FjdGlvbkhhc2gnLCBmdW5jdGlvbiAoaGFzaCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXRoIGFkbWluIGZlZSB0eCcsIGhhc2gpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94NSwgX3g2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9yZWY1LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF94MywgX3g0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KCkpKTsKCiAgICAgICAgICBjYXNlIDE5OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNCk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gc2VuZFdpdGhBZG1pbkZlZShfeDIpIHsKICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBzZW5kRGVmYXVsdCA9IGZ1bmN0aW9uIHNlbmREZWZhdWx0KF9yZWY2KSB7CiAgdmFyIGZyb20gPSBfcmVmNi5mcm9tLAogICAgICB0byA9IF9yZWY2LnRvLAogICAgICBhbW91bnQgPSBfcmVmNi5hbW91bnQsCiAgICAgIF9yZWY2JGdhc1ByaWNlID0gX3JlZjYuZ2FzUHJpY2UsCiAgICAgIGdhc1ByaWNlID0gX3JlZjYkZ2FzUHJpY2UgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNiRnYXNQcmljZSwKICAgICAgX3JlZjYkZ2FzTGltaXQgPSBfcmVmNi5nYXNMaW1pdCwKICAgICAgZ2FzTGltaXQgPSBfcmVmNiRnYXNMaW1pdCA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY2JGdhc0xpbWl0LAogICAgICBfcmVmNiRzcGVlZCA9IF9yZWY2LnNwZWVkLAogICAgICBzcGVlZCA9IF9yZWY2JHNwZWVkID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjYkc3BlZWQ7CiAgcmV0dXJuIG5ldyBQcm9taXNlKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgdmFyIF9yZWY3ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgIHZhciB3ZWIzanMsIHBhcmFtcywgd2FsbGV0RGF0YSwgcHJpdmF0ZUtleSwgcmF3VHgsIHNpZ25lZFR4LCBldGhEaXNwYXRjaE1ldGhvZCwgcmVjZWlwdDsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgd2ViM2pzID0gZ2V0V2ViMygpOwogICAgICAgICAgICAgIF9jb250ZXh0NS50MCA9IGdhc1ByaWNlOwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQ1LnQwKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gaGVscGVycy5ldGguZXN0aW1hdGVHYXNQcmljZSh7CiAgICAgICAgICAgICAgICBzcGVlZDogc3BlZWQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBfY29udGV4dDUudDAgPSBfY29udGV4dDUuc2VudDsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBnYXNQcmljZSA9IF9jb250ZXh0NS50MDsKICAgICAgICAgICAgICBnYXNMaW1pdCA9IGdhc0xpbWl0IHx8IGNvbnN0YW50cy5kZWZhdWx0RmVlUmF0ZXMuZXRoLmxpbWl0LnNlbmQ7CiAgICAgICAgICAgICAgcGFyYW1zID0gewogICAgICAgICAgICAgICAgZnJvbTogZnJvbSwKICAgICAgICAgICAgICAgIHRvOiBTdHJpbmcodG8pLnRyaW0oKSwKICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBnYXNQcmljZSwKICAgICAgICAgICAgICAgIGdhczogZ2FzTGltaXQsCiAgICAgICAgICAgICAgICB2YWx1ZTogd2ViMy51dGlscy50b1dlaShTdHJpbmcoYW1vdW50KSkKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIHdhbGxldERhdGEgPSBhY3Rpb25zLmNvcmUuZ2V0V2FsbGV0KHsKICAgICAgICAgICAgICAgIGFkZHJlc3M6IGZyb20sCiAgICAgICAgICAgICAgICBjdXJyZW5jeTogJ0VUSCcKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBwcml2YXRlS2V5ID0gIXdhbGxldERhdGEuaXNNZXRhbWFzayA/IGdldFByaXZhdGVLZXlCeUFkZHJlc3MoZnJvbSkgOiBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKHdhbGxldERhdGEuaXNNZXRhbWFzaykgewogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAxNDsKICAgICAgICAgICAgICByZXR1cm4gd2ViM2pzLmV0aC5hY2NvdW50cy5zaWduVHJhbnNhY3Rpb24ocGFyYW1zLCBwcml2YXRlS2V5KTsKCiAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgc2lnbmVkVHggPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICByYXdUeCA9IHNpZ25lZFR4LnJhd1RyYW5zYWN0aW9uOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBldGhEaXNwYXRjaE1ldGhvZCA9IHdlYjNqcy5ldGhbd2FsbGV0RGF0YS5pc01ldGFtYXNrID8gJ3NlbmRUcmFuc2FjdGlvbicgOiAnc2VuZFNpZ25lZFRyYW5zYWN0aW9uJ107CiAgICAgICAgICAgICAgcmVjZWlwdCA9IGV0aERpc3BhdGNoTWV0aG9kKHdhbGxldERhdGEuaXNNZXRhbWFzayA/IHBhcmFtcyA6IHJhd1R4KS5vbigndHJhbnNhY3Rpb25IYXNoJywgZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgIHZhciB0eElkID0gIiIuY29uY2F0KGNvbmZpZy5saW5rLmV0aGVyc2NhbiwgIi90eC8iKS5jb25jYXQoaGFzaCk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndHgnLCB0eElkKTsKICAgICAgICAgICAgICAgIGFjdGlvbnMubG9hZGVyLnNob3codHJ1ZSwgewogICAgICAgICAgICAgICAgICB0eElkOiB0eElkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgcmVzb2x2ZShyZWNlaXB0KTsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIChfeDcsIF94OCkgewogICAgICByZXR1cm4gX3JlZjcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpKTsKfTsKCnZhciBzZW5kVHJhbnNhY3Rpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmOSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KF9yZWY4KSB7CiAgICB2YXIgdG8sIGFtb3VudCwgX2dldFN0YXRlOSwgYWRkcmVzcywgX3R4SGFzaCwgcmVjZWlwdCwgdHhIYXNoOwoKICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICB0byA9IF9yZWY4LnRvLCBhbW91bnQgPSBfcmVmOC5hbW91bnQ7CiAgICAgICAgICAgIC8vIGZyb20gbWFpbiBldGggd2FsbGV0CiAgICAgICAgICAgIF9nZXRTdGF0ZTkgPSBnZXRTdGF0ZSgpLCBhZGRyZXNzID0gX2dldFN0YXRlOS51c2VyLmV0aERhdGEuYWRkcmVzczsKCiAgICAgICAgICAgIGlmICghZmFsc2UpIHsKICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGZha2UgdHggLSB0dXJib3N3YXBzIGRlYnVnCiAgICAgICAgICAgIF90eEhhc2ggPSAnMHg1OGZhY2RiZjUwMjNhNDAxZjM5OTk4MTc5OTk1ZjBhZjFlNTRhNjQ0NTUxNDVkZjZlZDUwN2FiZGVjYzFiMGE0JzsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIF90eEhhc2gpOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA3OwogICAgICAgICAgICByZXR1cm4gc2VuZERlZmF1bHQoewogICAgICAgICAgICAgIGZyb206IGFkZHJlc3MsCiAgICAgICAgICAgICAgdG86IHRvLAogICAgICAgICAgICAgIGFtb3VudDogYW1vdW50CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgcmVjZWlwdCA9IF9jb250ZXh0Ni5zZW50OwogICAgICAgICAgICAvLyBACiAgICAgICAgICAgIC8vIHRvZG86IElSZWNlaXB0ICg/KQogICAgICAgICAgICB0eEhhc2ggPSByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaDsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHR4SGFzaCk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTYpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHNlbmRUcmFuc2FjdGlvbihfeDkpIHsKICAgIHJldHVybiBfcmVmOS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCnZhciBmZXRjaFR4SW5mbyA9IGZ1bmN0aW9uIGZldGNoVHhJbmZvKGhhc2gsIGNhY2hlUmVzcG9uc2UpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgIHZhciB1cmwgPSAiP21vZHVsZT1wcm94eSZhY3Rpb249ZXRoX2dldFRyYW5zYWN0aW9uQnlIYXNoJnR4aGFzaD0iLmNvbmNhdChoYXNoLCAiJmFwaWtleT0iKS5jb25jYXQoY29uZmlnLmFwaS5ldGhlcnNjYW5fQXBpS2V5KTsKICAgIHJldHVybiBhcGlMb29wZXIuZ2V0KCdldGhlcnNjYW4nLCB1cmwsIHsKICAgICAgY2FjaGVSZXNwb25zZTogY2FjaGVSZXNwb25zZQogICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIGlmIChyZXMgJiYgcmVzLnJlc3VsdCkgewogICAgICAgIHZhciBfcmVzJHJlc3VsdCA9IHJlcy5yZXN1bHQsCiAgICAgICAgICAgIGZyb20gPSBfcmVzJHJlc3VsdC5mcm9tLAogICAgICAgICAgICB0byA9IF9yZXMkcmVzdWx0LnRvLAogICAgICAgICAgICB2YWx1ZSA9IF9yZXMkcmVzdWx0LnZhbHVlLAogICAgICAgICAgICBnYXMgPSBfcmVzJHJlc3VsdC5nYXMsCiAgICAgICAgICAgIGdhc1ByaWNlID0gX3JlcyRyZXN1bHQuZ2FzUHJpY2UsCiAgICAgICAgICAgIGJsb2NrSGFzaCA9IF9yZXMkcmVzdWx0LmJsb2NrSGFzaDsKICAgICAgICB2YXIgYW1vdW50ID0gd2ViMy51dGlscy5mcm9tV2VpKHZhbHVlKTsgLy8gQ2FsYyBtaW5lciBmZWUsIHVzZWQgZm9yIHRoaXMgdHgKCiAgICAgICAgdmFyIG1pbmVyRmVlID0gbmV3IEJpZ051bWJlcih3ZWIzLnV0aWxzLnRvQk4oZ2FzKS50b051bWJlcigpKS5tdWx0aXBsaWVkQnkod2ViMy51dGlscy50b0JOKGdhc1ByaWNlKS50b051bWJlcigpKS5kaXZpZGVkQnkoMWUxOCkudG9OdW1iZXIoKTsKICAgICAgICB2YXIgYWRtaW5GZWUgPSBmYWxzZTsKCiAgICAgICAgaWYgKGhhc0FkbWluRmVlICYmIHRvICE9IGhhc0FkbWluRmVlLmFkZHJlc3MpIHsKICAgICAgICAgIGFkbWluRmVlID0gbmV3IEJpZ051bWJlcihoYXNBZG1pbkZlZS5mZWUpLmRpdmlkZWRCeSgxMDApLm11bHRpcGxpZWRCeShhbW91bnQpOwogICAgICAgICAgaWYgKG5ldyBCaWdOdW1iZXIoaGFzQWRtaW5GZWUubWluKS5pc0dyZWF0ZXJUaGFuKGFkbWluRmVlKSkgYWRtaW5GZWUgPSBuZXcgQmlnTnVtYmVyKGhhc0FkbWluRmVlLm1pbik7CiAgICAgICAgICBhZG1pbkZlZSA9IGFkbWluRmVlLnRvTnVtYmVyKCk7CiAgICAgICAgfQoKICAgICAgICByZXNvbHZlKHsKICAgICAgICAgIGFtb3VudDogYW1vdW50LAogICAgICAgICAgYWZ0ZXJCYWxhbmNlOiBudWxsLAogICAgICAgICAgcmVjZWl2ZXJBZGRyZXNzOiB0bywKICAgICAgICAgIHNlbmRlckFkZHJlc3M6IGZyb20sCiAgICAgICAgICBtaW5lckZlZTogbWluZXJGZWUsCiAgICAgICAgICBtaW5lckZlZUN1cnJlbmN5OiAnRVRIJywKICAgICAgICAgIGFkbWluRmVlOiBhZG1pbkZlZSwKICAgICAgICAgIGNvbmZpcm1lZDogYmxvY2tIYXNoICE9IG51bGwKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXNvbHZlKGZhbHNlKTsKICAgICAgfQogICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKCkgewogICAgICByZXNvbHZlKGZhbHNlKTsKICAgIH0pOwogIH0pOwp9OwoKZXhwb3J0IGRlZmF1bHQgewogIHNlbmQ6IHNlbmQsCiAgbG9naW46IGxvZ2luLAogIGdldEJhbGFuY2U6IGdldEJhbGFuY2UsCiAgZmV0Y2hCYWxhbmNlOiBmZXRjaEJhbGFuY2UsCiAgZ2V0VHJhbnNhY3Rpb246IGdldFRyYW5zYWN0aW9uLAogIGdldFJlcHV0YXRpb246IGdldFJlcHV0YXRpb24sCiAgZ2V0SW52b2ljZXM6IGdldEludm9pY2VzLAogIGdldFR4OiBnZXRUeCwKICBnZXRMaW5rVG9JbmZvOiBnZXRMaW5rVG9JbmZvLAogIGlzRVRIQWRkcmVzczogaXNFVEhBZGRyZXNzLAogIGdldFdhbGxldEJ5V29yZHM6IGdldFdhbGxldEJ5V29yZHMsCiAgZ2V0UmFuZG9tTW5lbW9uaWNXb3JkczogZ2V0UmFuZG9tTW5lbW9uaWNXb3JkcywKICB2YWxpZGF0ZU1uZW1vbmljV29yZHM6IHZhbGlkYXRlTW5lbW9uaWNXb3JkcywKICBzd2VlcFRvTW5lbW9uaWM6IHN3ZWVwVG9NbmVtb25pYywKICBpc1N3ZWVwZWQ6IGlzU3dlZXBlZCwKICBnZXRTd2VlcEFkZHJlc3M6IGdldFN3ZWVwQWRkcmVzcywKICBnZXRBbGxNeUFkZHJlc3NlczogZ2V0QWxsTXlBZGRyZXNzZXMsCiAgZmV0Y2hUeEluZm86IGZldGNoVHhJbmZvLAogIHNlbmRUcmFuc2FjdGlvbjogc2VuZFRyYW5zYWN0aW9uLAogIGdldFR4Um91dGVyOiBnZXRUeFJvdXRlcgp9Ow=="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/eth.ts"],"names":["helpers","apiLooper","constants","cacheStorageGet","cacheStorageSet","getState","actions","web3","getWeb3","utils","web3utils","reducers","config","referral","bip39","typeforce","BigNumber","mnemonicUtils","metamask","hasAdminFee","opts","fee","eth","address","min","getRandomMnemonicWords","generateMnemonic","validateMnemonicWords","mnemonic","validateMnemonic","convertMnemonicToValid","sweepToMnemonic","path","wallet","getWalletByWords","localStorage","setItem","privateKeyNames","ethMnemonic","privateKey","isSweeped","user","ethData","ethMnemonicData","toLowerCase","getAllMyAddresses","retData","push","getSweepAddress","getPrivateKeyByAddress","oldAddress","mnemonicAddress","mnemonicKey","walletNumber","getEthWallet","login","mnemonicKeys","sweepToMnemonicReady","data","accounts","privateKeyToAccount","console","info","accData","log","add","isMnemonic","setAuthData","name","window","getEthAddress","newReferral","error","mnemonicData","addWallet","currency","fullName","balance","isBalanceFetched","balanceError","infoAboutCurrency","Promise","resolve","fetchBalance","isETHAddress","getBalance","ethAddress","isEnabled","isConnected","getAddress","balanceInCache","setBalance","amount","then","result","fromWei","e","setBalanceError","getReputation","Number","getInvoices","userAddress","invoices","getTx","txRaw","transactionHash","getTxRouter","txId","getLinkToInfo","tx","link","etherscan","getTransaction","ownType","isCoinAddress","ETH","type","internalUrl","api","etherscan_ApiKey","url","get","res","internals","map","item","value","to","hash","transactions","filter","undefined","confirmations","status","blockHash","canEdit","date","timeStamp","direction","warn","send","metamaskEnable","sendWithAdminFee","sendDefault","from","gasPrice","gasLimit","speed","web3js","adminFee","adminFeeAddress","adminFeeMinValue","adminFeeMin","feeFromAmount","dividedBy","multipliedBy","isGreaterThan","toNumber","estimateGasPrice","defaultFeeRates","limit","walletData","core","getWallet","isMetamask","reject","params","String","trim","gas","toWei","signTransaction","signedTx","rawTx","rawTransaction","receipt","on","loader","show","err","adminFeeParams","resultAdminFee","receiptAdminFee","sendSignedTransaction","ethDispatchMethod","sendTransaction","txHash","fetchTxInfo","cacheResponse","minerFee","toBN","afterBalance","receiverAddress","senderAddress","minerFeeCurrency","confirmed"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport helpers, { apiLooper, constants, api, cacheStorageGet, cacheStorageSet } from 'helpers'\r\nimport { getState } from 'redux/core'\r\nimport actions from 'redux/actions'\r\nimport { web3, getWeb3 } from 'helpers/web3'\r\n//@\r\nimport { utils as web3utils } from 'web3'\r\nimport reducers from 'redux/core/reducers'\r\nimport config from 'helpers/externalConfig'\r\nimport referral from './referral'\r\nimport { pubToAddress } from 'ethereumjs-util'\r\nimport { hdkey } from 'ethereumjs-wallet'\r\nimport * as bip39 from 'bip39'\r\nimport typeforce from 'swap.app/util/typeforce'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport * as mnemonicUtils from '../../../../common/utils/mnemonic'\r\n\r\nimport metamask from 'helpers/metamask'\r\n\r\n\r\nconst hasAdminFee = (\r\n  config\r\n    && config.opts\r\n    && config.opts.fee\r\n    && config.opts.fee.eth\r\n    && config.opts.fee.eth.fee\r\n    && config.opts.fee.eth.address\r\n    && config.opts.fee.eth.min\r\n) ? config.opts.fee.eth : false\r\n\r\nconst getRandomMnemonicWords = () => bip39.generateMnemonic()\r\nconst validateMnemonicWords = (mnemonic) => bip39.validateMnemonic(mnemonicUtils.convertMnemonicToValid(mnemonic))\r\n\r\nconst sweepToMnemonic = (mnemonic, path) => {\r\n  const wallet = getWalletByWords(mnemonic, path)\r\n  localStorage.setItem(constants.privateKeyNames.ethMnemonic, wallet.privateKey)\r\n  return wallet.privateKey\r\n}\r\n\r\nconst isSweeped = () => {\r\n  const {\r\n    user: {\r\n      ethData,\r\n      ethMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (ethMnemonicData\r\n    && ethMnemonicData.address\r\n    && ethData\r\n    && ethData.address\r\n    && ethData.address.toLowerCase() !== ethMnemonicData.address.toLowerCase()\r\n  ) return false\r\n\r\n  return true\r\n}\r\n\r\nconst getAllMyAddresses = () => {\r\n  const {\r\n    user: {\r\n      ethData,\r\n      ethMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  const retData = [ethData.address.toLowerCase()]\r\n\r\n  if (ethMnemonicData\r\n    && ethMnemonicData.address\r\n    && ethMnemonicData.address.toLowerCase() !== ethData.address.toLowerCase()\r\n  ) retData.push(ethMnemonicData.address.toLowerCase())\r\n\r\n  return retData\r\n}\r\n\r\nconst getSweepAddress = () => {\r\n  const {\r\n    user: {\r\n      ethMnemonicData,\r\n    },\r\n  } = getState()\r\n\r\n  if (ethMnemonicData && ethMnemonicData.address) return ethMnemonicData.address\r\n  return false\r\n}\r\n\r\nconst getPrivateKeyByAddress = (address) => {\r\n  const {\r\n    user: {\r\n      ethData: {\r\n        address: oldAddress,\r\n        privateKey,\r\n      },\r\n      ethMnemonicData: {\r\n        address: mnemonicAddress,\r\n        privateKey: mnemonicKey,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  if (oldAddress === address) return privateKey\r\n  if (mnemonicAddress === address) return mnemonicKey\r\n}\r\n\r\nconst getWalletByWords = (mnemonic: string, walletNumber: number = 0, path: string = '') => {\r\n  // in eth address are equals in all networds\r\n  return mnemonicUtils.getEthWallet('nothing', mnemonic, walletNumber, path)\r\n}\r\n\r\n\r\nconst login = (privateKey, mnemonic = null, mnemonicKeys = null) => {\r\n  let sweepToMnemonicReady = false\r\n\r\n  if (privateKey\r\n    && mnemonic\r\n    && mnemonicKeys\r\n    && mnemonicKeys.eth === privateKey\r\n  ) {\r\n    sweepToMnemonicReady = true\r\n  }\r\n\r\n  if (!privateKey && mnemonic) {\r\n    sweepToMnemonicReady = true\r\n  }\r\n\r\n  let data\r\n\r\n  if (privateKey) {\r\n    data = web3.eth.accounts.privateKeyToAccount(privateKey)\r\n  } else {\r\n    console.info('Created account Ethereum ...')\r\n    // data = web3.eth.accounts.create()\r\n    if (!mnemonic) {\r\n      mnemonic = bip39.generateMnemonic()\r\n    }\r\n\r\n    const accData = getWalletByWords(mnemonic)\r\n    console.log('Eth. Generated wallet from random 12 words')\r\n    console.log(accData)\r\n    privateKey = accData.privateKey\r\n    data = web3.eth.accounts.privateKeyToAccount(privateKey)\r\n    localStorage.setItem(constants.privateKeyNames.ethMnemonic, privateKey)\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.eth, data.privateKey)\r\n\r\n  web3.eth.accounts.wallet.add(data.privateKey)\r\n  data.isMnemonic = sweepToMnemonicReady\r\n\r\n  reducers.user.setAuthData({ name: 'ethData', data })\r\n  window.getEthAddress = () => data.address\r\n  referral.newReferral(data.address)\r\n\r\n  console.info('Logged in with Ethereum', data)\r\n\r\n  if (!sweepToMnemonicReady) {\r\n    // Auth with our mnemonic account\r\n    if (mnemonic === `-`) {\r\n      console.error('Sweep. Cant auth. Need new mnemonic or enter own for re-login')\r\n      return\r\n    }\r\n\r\n    if (!mnemonicKeys\r\n      || !mnemonicKeys.eth\r\n    ) {\r\n      console.error('Sweep. Cant auth. Login key undefined')\r\n      return\r\n    }\r\n\r\n    const mnemonicData = web3.eth.accounts.privateKeyToAccount(mnemonicKeys.eth)\r\n    web3.eth.accounts.wallet.add(mnemonicKeys.eth)\r\n    //@\r\n    mnemonicData.isMnemonic = sweepToMnemonicReady\r\n\r\n    console.info('Logged in with Ethereum Mnemonic', mnemonicData)\r\n    reducers.user.addWallet({\r\n      name: 'ethMnemonicData',\r\n      data: {\r\n        currency: 'ETH',\r\n        fullName: 'Ethereum (New)',\r\n        balance: 0,\r\n        isBalanceFetched: false,\r\n        balanceError: null,\r\n        infoAboutCurrency: null,\r\n        ...mnemonicData,\r\n      },\r\n    })\r\n    new Promise(async (resolve) => {\r\n      const balance = await fetchBalance(mnemonicData.address)\r\n      reducers.user.setAuthData({\r\n        name: 'ethMnemonicData',\r\n        data: {\r\n          balance,\r\n          isBalanceFetched: true,\r\n        },\r\n      })\r\n      resolve(true)\r\n    })\r\n  }\r\n\r\n  return data.privateKey\r\n}\r\n\r\nconst isETHAddress = (address) => {\r\n  const { user: { ethData } } = getState()\r\n  if (ethData && ethData.address && ethData.address.toLowerCase() === address.toLowerCase()) return ethData\r\n}\r\n\r\nconst getBalance = () => {\r\n  const {\r\n    user: {\r\n      ethData: {\r\n        address: ethAddress,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const address = (metamask.isEnabled() && metamask.isConnected()) ? metamask.getAddress() : ethAddress\r\n\r\n  const balanceInCache = cacheStorageGet('currencyBalances', `eth_${address}`)\r\n  if (balanceInCache !== false) {\r\n    reducers.user.setBalance({\r\n      name: 'ethData',\r\n      amount: balanceInCache,\r\n    })\r\n    return balanceInCache\r\n  }\r\n\r\n  return web3.eth.getBalance(address)\r\n    .then(result => {\r\n      const amount = web3.utils.fromWei(result)\r\n\r\n      cacheStorageSet('currencyBalances', `eth_${address}`, amount, 30)\r\n      reducers.user.setBalance({ name: 'ethData', amount })\r\n      return amount\r\n    })\r\n    .catch((e) => {\r\n      reducers.user.setBalanceError({ name: 'ethData' })\r\n    })\r\n}\r\n\r\nconst getReputation = () => Promise.resolve(0)\r\n\r\nconst fetchBalance = (address) => \r\n  web3.eth.getBalance(address)\r\n    .then(result => Number(web3.utils.fromWei(result)))\r\n    .catch((e) => {\r\n      console.log('Web3 doesn\\'t work please again later ', e.error)\r\n    })\r\n\r\nconst getInvoices = (address) => {\r\n  const { user: { ethData: { userAddress } } } = getState()\r\n\r\n  address = address || userAddress\r\n\r\n  return actions.invoices.getInvoices({\r\n    currency: 'ETH',\r\n    address,\r\n  })\r\n}\r\n\r\nconst getTx = (txRaw) => txRaw.transactionHash\r\n\r\nconst getTxRouter = (txId) => `/eth/tx/${txId}`\r\n\r\nconst getLinkToInfo = (tx) => {\r\n  if (!tx) {\r\n    return\r\n  }\r\n\r\n  return `${config.link.etherscan}/tx/${tx}`\r\n}\r\n\r\nconst getTransaction = (address: string = ``, ownType: string = ``) =>\r\n  new Promise((resolve) => {\r\n    const { user: { ethData: { address: userAddress } } } = getState()\r\n    address = address || userAddress\r\n\r\n    if (!typeforce.isCoinAddress.ETH(address)) {\r\n      resolve([])\r\n    }\r\n\r\n    const type = (ownType) || 'eth'\r\n    // First - get internal txs\r\n    const internalUrl = `?module=account&action=txlistinternal&address=${address}&startblock=0&endblock=99999999&sort=asc&apikey=${config.api.etherscan_ApiKey}`\r\n    const url = `?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=asc&apikey=${config.api.etherscan_ApiKey}`\r\n\r\n    apiLooper.get('etherscan', internalUrl)\r\n      .then((res:any) => {\r\n        const internals : Array<any> = []\r\n        res.result\r\n          .map((item) => {\r\n            const { value, to } = item\r\n            internals[item.hash] = {\r\n              value,\r\n              to,\r\n            }\r\n          })\r\n        apiLooper.get('etherscan', url)\r\n          .then((res:any) => {\r\n            const transactions = res.result\r\n              .filter((item) => {\r\n                return (item.value > 0) || (internals[item.hash] !== undefined && internals[item.hash].value > 0)\r\n              })\r\n              .map((item) => ({\r\n                type,\r\n                confirmations: item.confirmations,\r\n                hash: item.hash,\r\n                status: item.blockHash != null ? 1 : 0,\r\n                value: web3.utils.fromWei(\r\n                  (internals[item.hash] !== undefined && internals[item.hash].value > 0)\r\n                    ? internals[item.hash].value\r\n                    : item.value\r\n                ),\r\n                address: item.to,\r\n                canEdit: address === userAddress,\r\n                date: item.timeStamp * 1000,\r\n                direction: (\r\n                  (\r\n                    internals[item.hash] !== undefined\r\n                    && internals[item.hash].to.toLowerCase() == address.toLowerCase()\r\n                  )\r\n                  ? 'in'\r\n                  : address.toLowerCase() === item.to.toLowerCase() ? 'in' : 'out'\r\n                ),\r\n              }))\r\n              .filter((item) => {\r\n                if (item.direction === 'in') return true\r\n                if (!hasAdminFee) return true\r\n                if (address.toLowerCase() === hasAdminFee.address.toLowerCase()) return true\r\n                if (item.address.toLowerCase() === hasAdminFee.address.toLowerCase()) return false\r\n\r\n                return true\r\n              })\r\n\r\n            resolve(transactions)\r\n          })\r\n          .catch((e) => {\r\n            console.warn(`Fail get txs for ETH ${address}`, e)\r\n            resolve([])\r\n          })\r\n      })\r\n      .catch((e) => {\r\n        console.warn(`Fail get txs for ETH ${address}`, e)\r\n        resolve([])\r\n      })\r\n  })\r\n\r\nconst send = (data) => {\r\n  const metamaskEnable = metamask.isEnabled() && metamask.isConnected()\r\n\r\n  return hasAdminFee && !metamaskEnable \r\n    ? sendWithAdminFee(data)\r\n    : sendDefault(data)\r\n}\r\n\r\nconst sendWithAdminFee = async ({ from, to, amount, gasPrice, gasLimit, speed }) => {\r\n  const web3js = await getWeb3()\r\n\r\n  const {\r\n    fee: adminFee,\r\n    address: adminFeeAddress,\r\n    min: adminFeeMinValue,\r\n  } = config.opts.fee.eth\r\n\r\n  const adminFeeMin = new BigNumber(adminFeeMinValue)\r\n\r\n  // fee - from amount - percent\r\n  let feeFromAmount = new BigNumber(adminFee).dividedBy(100).multipliedBy(amount)\r\n  if (adminFeeMin.isGreaterThan(feeFromAmount)) feeFromAmount = adminFeeMin\r\n\r\n  //@\r\n  feeFromAmount = feeFromAmount.toNumber() // Admin fee\r\n\r\n  gasPrice = gasPrice || await helpers.eth.estimateGasPrice({ speed })\r\n  gasLimit = gasLimit || constants.defaultFeeRates.eth.limit.send\r\n\r\n  const walletData = actions.core.getWallet({\r\n    address: from,\r\n    currency: 'ETH',\r\n  })\r\n\r\n  const privateKey = (!walletData.isMetamask) ? getPrivateKeyByAddress(from) : false\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    const params = {\r\n      from,\r\n      to: String(to).trim(),\r\n      gasPrice,\r\n      gas: gasLimit,\r\n      value: web3utils.toWei(String(amount)),\r\n    }\r\n\r\n    let rawTx\r\n    if (!walletData.isMetamask) {\r\n      const signedTx = await web3js.eth.accounts.signTransaction(params, privateKey)\r\n      rawTx = signedTx.rawTransaction\r\n    }\r\n    //@\r\n    const receipt = web3js.eth[\r\n      walletData.isMetamask\r\n        ? 'sendTransaction'\r\n        : 'sendSignedTransaction'\r\n    ](walletData.isMetamask ? params : rawTx)\r\n      .on('transactionHash', (hash) => {\r\n        const txId = `${config.link.etherscan}/tx/${hash}`\r\n        console.log('tx', txId)\r\n        actions.loader.show(true, { txId })\r\n      })\r\n      .on('error', (err) => {\r\n        reject(err)\r\n      })\r\n\r\n\r\n    receipt.then(() => {\r\n      resolve(receipt)\r\n      if (!walletData.isMetamask) {\r\n        // Withdraw admin fee\r\n        new Promise(async (resolve, reject) => {\r\n          const adminFeeParams = {\r\n            to: String(adminFeeAddress).trim(),\r\n            gasPrice,\r\n            gas: gasLimit,\r\n            value: web3utils.toWei(String(feeFromAmount)),\r\n          }\r\n\r\n          let resultAdminFee = false\r\n          if (walletData.isMetamask) {\r\n            //@\r\n            resultAdminFee = await web3js.eth.accounts.signTransaction(adminFeeParams)\r\n          } else {\r\n            //@\r\n            resultAdminFee = await web3js.eth.accounts.signTransaction(adminFeeParams, privateKey)\r\n          }\r\n          //@\r\n          const receiptAdminFee = web3js.eth.sendSignedTransaction(resultAdminFee.rawTransaction)\r\n            .on('transactionHash', (hash) => {\r\n              console.log('Eth admin fee tx', hash)\r\n            })\r\n        })\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nconst sendDefault = ({ from, to, amount, gasPrice = null, gasLimit = null, speed = null }) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const web3js = getWeb3()\r\n\r\n    gasPrice = gasPrice || await helpers.eth.estimateGasPrice({ speed })\r\n    gasLimit = gasLimit || constants.defaultFeeRates.eth.limit.send\r\n\r\n    const params = {\r\n      from,\r\n      to: String(to).trim(),\r\n      gasPrice,\r\n      gas: gasLimit,\r\n      value: web3.utils.toWei(String(amount)),\r\n    }\r\n\r\n    const walletData = actions.core.getWallet({\r\n      address: from,\r\n      currency: 'ETH',\r\n    })\r\n\r\n    const privateKey = (!walletData.isMetamask) ? getPrivateKeyByAddress(from) : false\r\n\r\n    let rawTx\r\n    if (!walletData.isMetamask) {\r\n      const signedTx = await web3js.eth.accounts.signTransaction(params, privateKey)\r\n      rawTx = signedTx.rawTransaction\r\n    }\r\n\r\n    const ethDispatchMethod = web3js.eth[\r\n      walletData.isMetamask\r\n        ? 'sendTransaction'\r\n        : 'sendSignedTransaction'\r\n    ]\r\n    const receipt = ethDispatchMethod(walletData.isMetamask ? params : rawTx)\r\n      .on('transactionHash', (hash) => {\r\n        const txId = `${config.link.etherscan}/tx/${hash}`\r\n        console.log('tx', txId)\r\n        actions.loader.show(true, { txId })\r\n      })\r\n      .on('error', (error) => {\r\n        reject(error)\r\n      })\r\n\r\n    resolve(receipt)\r\n  })\r\n}\r\n\r\nconst sendTransaction = async ({ to, amount }) => {\r\n  // from main eth wallet\r\n\r\n  const { user: { ethData: { address } } } = getState()\r\n\r\n  if (false) { // fake tx - turboswaps debug\r\n    const txHash = '0x58facdbf5023a401f39998179995f0af1e54a64455145df6ed507abdecc1b0a4'\r\n    return txHash\r\n  }\r\n\r\n  const receipt = await sendDefault({\r\n    from: address,\r\n    to,\r\n    amount,\r\n  })\r\n\r\n  // @\r\n  // todo: IReceipt (?)\r\n  const txHash = receipt.transactionHash\r\n\r\n  return txHash\r\n}\r\n\r\nconst fetchTxInfo = (hash, cacheResponse) => new Promise((resolve) => {\r\n  const url = `?module=proxy&action=eth_getTransactionByHash&txhash=${hash}&apikey=${config.api.etherscan_ApiKey}`\r\n\r\n  return apiLooper.get('etherscan', url, {\r\n    cacheResponse,\r\n  })\r\n    .then((res: any) => {\r\n      if (res && res.result) {\r\n        const {\r\n          from,\r\n          to,\r\n          value,\r\n          gas,\r\n          gasPrice,\r\n          blockHash,\r\n        } = res.result\r\n\r\n        const amount =  web3.utils.fromWei(value)\r\n\r\n        // Calc miner fee, used for this tx\r\n        const minerFee = new BigNumber(web3.utils.toBN(gas).toNumber())\r\n          .multipliedBy(web3.utils.toBN(gasPrice).toNumber())\r\n          .dividedBy(1e18).toNumber()\r\n\r\n        let adminFee: any = false\r\n\r\n        if (hasAdminFee && to != hasAdminFee.address) {\r\n          adminFee = new BigNumber(hasAdminFee.fee).dividedBy(100).multipliedBy(amount)\r\n\r\n          if (new BigNumber(hasAdminFee.min).isGreaterThan(adminFee)) adminFee = new BigNumber(hasAdminFee.min)\r\n\r\n          adminFee = adminFee.toNumber()\r\n        }\r\n\r\n        resolve({\r\n          amount,\r\n          afterBalance: null,\r\n          receiverAddress: to,\r\n          senderAddress: from,\r\n          minerFee,\r\n          minerFeeCurrency: 'ETH',\r\n          adminFee,\r\n          confirmed: (blockHash != null),\r\n        })\r\n\r\n      } else {\r\n        resolve(false)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      resolve(false)\r\n    })\r\n})\r\n\r\nexport default {\r\n  send,\r\n  login,\r\n  getBalance,\r\n  fetchBalance,\r\n  getTransaction,\r\n  getReputation,\r\n  getInvoices,\r\n  getTx,\r\n  getLinkToInfo,\r\n  isETHAddress,\r\n  getWalletByWords,\r\n  getRandomMnemonicWords,\r\n  validateMnemonicWords,\r\n  sweepToMnemonic,\r\n  isSweeped,\r\n  getSweepAddress,\r\n  getAllMyAddresses,\r\n  fetchTxInfo,\r\n  sendTransaction,\r\n  getTxRouter,\r\n}\r\n"]}]}