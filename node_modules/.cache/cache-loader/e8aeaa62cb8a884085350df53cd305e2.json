{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETH2BTC.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETH2BTC.ts","mtime":1614842913755},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI7CmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0IGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0IjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IiOwoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgppbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnOwppbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICdzd2FwLmFwcCc7CmltcG9ydCB7IEF0b21pY0FCMlVUWE8gfSBmcm9tICdzd2FwLnN3YXAnOwoKdmFyIEVUSDJCVEMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BdG9taWNBQjJVVFhPKSB7CiAgX2luaGVyaXRzKEVUSDJCVEMsIF9BdG9taWNBQjJVVFhPKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihFVEgyQlRDKTsKCiAgZnVuY3Rpb24gRVRIMkJUQyhzd2FwKSB7CiAgICB2YXIgX3RoaXNTdXBlciwgX3RoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEVUSDJCVEMpOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc3dhcCk7CgogICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAiX2Zsb3dOYW1lIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJldGhTd2FwIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJidGNTd2FwIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJzdGF0ZSIsIHZvaWQgMCk7CgogICAgX3RoaXMudXR4b0NvaW4gPSAiYnRjIjsKICAgIF90aGlzLl9mbG93TmFtZSA9IEVUSDJCVEMuZ2V0TmFtZSgpOwogICAgX3RoaXMuc3RlcE51bWJlcnMgPSB7CiAgICAgICdzaWduJzogMSwKICAgICAgJ3dhaXQtbG9jay11dHhvJzogMiwKICAgICAgJ3ZlcmlmeS1zY3JpcHQnOiAzLAogICAgICAnc3luYy1iYWxhbmNlJzogNCwKICAgICAgJ2xvY2stZXRoJzogNSwKICAgICAgJ3dhaXQtd2l0aGRyYXctZXRoJzogNiwKICAgICAgLy8gYWthIGdldFNlY3JldAogICAgICAnd2l0aGRyYXctdXR4byc6IDcsCiAgICAgICdmaW5pc2gnOiA4LAogICAgICAnZW5kJzogOQogICAgfTsKICAgIF90aGlzLmV0aFN3YXAgPSBzd2FwLnBhcnRpY2lwYW50U3dhcDsKICAgIF90aGlzLmJ0Y1N3YXAgPSBzd2FwLm93bmVyU3dhcDsKICAgIF90aGlzLmFiQmxvY2tjaGFpbiA9IF90aGlzLmV0aFN3YXA7CiAgICBfdGhpcy51dHhvQmxvY2tjaGFpbiA9IF90aGlzLmJ0Y1N3YXA7CgogICAgaWYgKCFfdGhpcy5ldGhTd2FwKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignQlRDMkVUSDogImV0aFN3YXAiIG9mIHR5cGUgb2JqZWN0IHJlcXVpcmVkJyk7CiAgICB9CgogICAgaWYgKCFfdGhpcy5idGNTd2FwKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignQlRDMkVUSDogImJ0Y1N3YXAiIG9mIHR5cGUgb2JqZWN0IHJlcXVpcmVkJyk7CiAgICB9CgogICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgIHN0ZXA6IDAsCiAgICAgIGlzU3RvcHBlZFN3YXA6IGZhbHNlLAogICAgICBzaWduVHJhbnNhY3Rpb25IYXNoOiBudWxsLAogICAgICBpc1NpZ25GZXRjaGluZzogZmFsc2UsCiAgICAgIGlzTWVTaWduZWQ6IGZhbHNlLAogICAgICB0YXJnZXRXYWxsZXQ6IG51bGwsCiAgICAgIHNlY3JldEhhc2g6IG51bGwsCiAgICAgIGlzQmFsYW5jZUZldGNoaW5nOiBmYWxzZSwKICAgICAgaXNCYWxhbmNlRW5vdWdoOiB0cnVlLAogICAgICBiYWxhbmNlOiBudWxsLAogICAgICBldGhTd2FwQ3JlYXRpb25UcmFuc2FjdGlvbkhhc2g6IG51bGwsCiAgICAgIGNhbkNyZWF0ZUV0aFRyYW5zYWN0aW9uOiB0cnVlLAogICAgICBpc0V0aENvbnRyYWN0RnVuZGVkOiBmYWxzZSwKICAgICAgc2VjcmV0OiBudWxsLAogICAgICBpc0V0aFdpdGhkcmF3bjogZmFsc2UsCiAgICAgIGlzYnRjV2l0aGRyYXduOiBmYWxzZSwKICAgICAgZXRoU3dhcFdpdGhkcmF3VHJhbnNhY3Rpb25IYXNoOiBudWxsLAogICAgICBidGNTd2FwV2l0aGRyYXdUcmFuc2FjdGlvbkhhc2g6IG51bGwsCiAgICAgIHJlZnVuZFRyYW5zYWN0aW9uSGFzaDogbnVsbCwKICAgICAgaXNSZWZ1bmRlZDogZmFsc2UsCiAgICAgIGlzRmluaXNoZWQ6IGZhbHNlLAogICAgICBpc1N3YXBFeGlzdDogZmFsc2UsCiAgICAgIHdpdGhkcmF3UmVxdWVzdEluY29taW5nOiBmYWxzZSwKICAgICAgd2l0aGRyYXdSZXF1ZXN0QWNjZXB0ZWQ6IGZhbHNlLAogICAgICBpc0ZhaWxlZFRyYW5zYWN0aW9uOiBmYWxzZSwKICAgICAgaXNGYWlsZWRUcmFuc2FjdGlvbkVycm9yOiBudWxsCiAgICB9OwoKICAgIF90aGlzLl9wZXJzaXN0U3RhdGUoKTsKCiAgICB2YXIgZmxvdyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpOwoKICAgIGZsb3cuc3dhcC5yb29tLm9uY2UoJ3JlcXVlc3Qgd2l0aGRyYXcnLCBmdW5jdGlvbiAoKSB7CiAgICAgIGZsb3cuc2V0U3RhdGUoewogICAgICAgIHdpdGhkcmF3UmVxdWVzdEluY29taW5nOiB0cnVlCiAgICAgIH0pOwogICAgfSk7CiAgICBmbG93LnN3YXAucm9vbS5vbignd2FpdCBidGMgY29uZmlybScsIGZ1bmN0aW9uICgpIHsKICAgICAgZmxvdy5zZXRTdGF0ZSh7CiAgICAgICAgd2FpdEJ0Y0NvbmZpcm06IHRydWUKICAgICAgfSk7CiAgICB9KTsKICAgIGZsb3cuc3dhcC5yb29tLm9uKCdyZXF1ZXN0IGV0aCBjb250cmFjdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgY29uc29sZS5sb2coJ1JlcXVlc3RpbmcgZXRoIGNvbnRyYWN0Jyk7CiAgICAgIHZhciBldGhTd2FwQ3JlYXRpb25UcmFuc2FjdGlvbkhhc2ggPSBmbG93LnN0YXRlLmV0aFN3YXBDcmVhdGlvblRyYW5zYWN0aW9uSGFzaDsKCiAgICAgIGlmIChldGhTd2FwQ3JlYXRpb25UcmFuc2FjdGlvbkhhc2gpIHsKICAgICAgICBjb25zb2xlLmxvZygnRXhpc3RzIC0gc2VuZCBoYXNoJyk7CiAgICAgICAgZmxvdy5zd2FwLnJvb20uc2VuZE1lc3NhZ2UoewogICAgICAgICAgZXZlbnQ6ICdjcmVhdGUgZXRoIGNvbnRyYWN0JywKICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgZXRoU3dhcENyZWF0aW9uVHJhbnNhY3Rpb25IYXNoOiBldGhTd2FwQ3JlYXRpb25UcmFuc2FjdGlvbkhhc2gKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CgogICAgX2dldCgoX3RoaXNTdXBlciA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBfZ2V0UHJvdG90eXBlT2YoRVRIMkJUQy5wcm90b3R5cGUpKSwgIl9wZXJzaXN0U3RlcHMiLCBfdGhpc1N1cGVyKS5jYWxsKF90aGlzU3VwZXIpOwoKICAgIHJldHVybiBfdGhpczsKICB9CgogIF9jcmVhdGVDbGFzcyhFVEgyQlRDLCBbewogICAga2V5OiAiX3BlcnNpc3RTdGF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3BlcnNpc3RTdGF0ZSgpIHsKICAgICAgX2dldChfZ2V0UHJvdG90eXBlT2YoRVRIMkJUQy5wcm90b3R5cGUpLCAiX3BlcnNpc3RTdGF0ZSIsIHRoaXMpLmNhbGwodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2dldFN0ZXBzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0U3RlcHMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIGZsb3cgPSB0aGlzOwogICAgICByZXR1cm4gWy8vIDEuIFNpZ24gc3dhcCB0byBzdGFydAogICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMyLnNpZ25BQlNpZGUoKTsKICAgICAgfSwgLy8gMi4gV2FpdCBwYXJ0aWNpcGFudCBjcmVhdGUsIGZ1bmQgQlRDIFNjcmlwdAogICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgZmxvdy53YWl0VVRYT1NjcmlwdENyZWF0ZWQoKTsKICAgICAgfSwgLy8gMy4gVmVyaWZ5IEJUQyBTY3JpcHQKICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgIGRlYnVnKCdzd2FwLmNvcmU6ZmxvdycpKCJ3YWl0aW5nIHZlcmlmeSBidGMgc2NyaXB0Iik7CiAgICAgIH0sIC8vIDQuIENoZWNrIGJhbGFuY2UKICAgICAgZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi5zeW5jQmFsYW5jZSgpOwogICAgICB9LAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIC8vIDUuIENyZWF0ZSBFVEggQ29udHJhY3QKICAgICAgX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgc2NyaXB0RnVuZGVkOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIud2FpdFVUWE9TY3JpcHRGdW5kZWQoKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgc2NyaXB0RnVuZGVkID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBpZiAoIXNjcmlwdEZ1bmRlZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gZmxvdy5ldGhTd2FwLmZ1bmRDb250cmFjdCh7CiAgICAgICAgICAgICAgICAgIGZsb3c6IGZsb3cKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpLAogICAgICAvKiNfX1BVUkVfXyovCiAgICAgIC8vIDYuIFdhaXQgcGFydGljaXBhbnQgd2l0aGRyYXcKICAgICAgX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gZmxvdy5ldGhTd2FwLmdldFNlY3JldEZyb21BQjJVVFhPKHsKICAgICAgICAgICAgICAgICAgZmxvdzogZmxvdwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSwKICAgICAgLyojX19QVVJFX18qLwogICAgICAvLyA3LiBXaXRoZHJhdwogICAgICBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuYnRjU3dhcC53aXRoZHJhd0Zyb21Td2FwKHsKICAgICAgICAgICAgICAgICAgZmxvdzogZmxvdwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKSwgLy8gOC4gRmluaXNoCiAgICAgIGZ1bmN0aW9uICgpIHsKICAgICAgICBmbG93LnN3YXAucm9vbS5vbmNlKCdyZXF1ZXN0IHN3YXAgZmluaXNoZWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgYnRjU3dhcFdpdGhkcmF3VHJhbnNhY3Rpb25IYXNoID0gZmxvdy5zdGF0ZS5idGNTd2FwV2l0aGRyYXdUcmFuc2FjdGlvbkhhc2g7CiAgICAgICAgICBmbG93LnN3YXAucm9vbS5zZW5kTWVzc2FnZSh7CiAgICAgICAgICAgIGV2ZW50OiAnc3dhcCBmaW5pc2hlZCcsCiAgICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgICBidGNTd2FwV2l0aGRyYXdUcmFuc2FjdGlvbkhhc2g6IGJ0Y1N3YXBXaXRoZHJhd1RyYW5zYWN0aW9uSGFzaAogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICBmbG93LmZpbmlzaFN0ZXAoewogICAgICAgICAgaXNGaW5pc2hlZDogdHJ1ZQogICAgICAgIH0sIHsKICAgICAgICAgIHN0ZXA6ICdmaW5pc2gnCiAgICAgICAgfSk7CiAgICAgIH0sIC8vIDkuIEZpbmlzaGVkIQogICAgICBmdW5jdGlvbiAoKSB7fV07CiAgICB9CiAgfSwgewogICAga2V5OiAiX2NoZWNrU3dhcEFscmVhZHlFeGlzdHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGVja1N3YXBBbHJlYWR5RXhpc3RzKCkgewogICAgICB2YXIgc3dhcERhdGEgPSB7CiAgICAgICAgb3duZXJBZGRyZXNzOiB0aGlzLmFwcC5nZXRNeUV0aEFkZHJlc3MoKSwKICAgICAgICBwYXJ0aWNpcGFudEFkZHJlc3M6IHRoaXMuYXBwLmdldFBhcnRpY2lwYW50RXRoQWRkcmVzcyh0aGlzLnN3YXApCiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLmV0aFN3YXAuY2hlY2tTd2FwRXhpc3RzKHN3YXBEYXRhKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cnlSZWZ1bmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF90cnlSZWZ1bmQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgICAgdmFyIHNlY3JldEhhc2gsIHJlZnVuZEhhbmRsZXIsIHdhc1JlZnVuZGVkOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc2VjcmV0SGFzaCA9IHRoaXMuc3RhdGUuc2VjcmV0SGFzaDsKCiAgICAgICAgICAgICAgICByZWZ1bmRIYW5kbGVyID0gZnVuY3Rpb24gcmVmdW5kSGFuZGxlcigpIHsKICAgICAgICAgICAgICAgICAgdmFyIGhhc2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7CgogICAgICAgICAgICAgICAgICBfdGhpczMuc3dhcC5yb29tLnNlbmRNZXNzYWdlKHsKICAgICAgICAgICAgICAgICAgICBldmVudDogJ2V0aCByZWZ1bmQgY29tcGxldGVkJwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIF90aGlzMy5zZXRTdGF0ZSh7CiAgICAgICAgICAgICAgICAgICAgcmVmdW5kVHJhbnNhY3Rpb25IYXNoOiBoYXNoLAogICAgICAgICAgICAgICAgICAgIGlzUmVmdW5kZWQ6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgaXNTd2FwRXhpc3Q6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0sIHRydWUpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ldGhTd2FwLndhc1JlZnVuZGVkKHsKICAgICAgICAgICAgICAgICAgc2VjcmV0SGFzaDogc2VjcmV0SGFzaAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHdhc1JlZnVuZGVkID0gX2NvbnRleHQ0LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCF3YXNSZWZ1bmRlZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBkZWJ1Zygnc3dhcC5jb3JlOmZsb3cnKSgnVGhpcyBzd2FwIHdhcyByZWZ1bmRlZCcpOwogICAgICAgICAgICAgICAgcmVmdW5kSGFuZGxlcigpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAxMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignd2FzUmVmdW5kZWQgZXJyb3I6JywgX2NvbnRleHQ0LnQwKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgdGhpcy5ldGhTd2FwLnJlZnVuZCh7CiAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50QWRkcmVzczogdGhpcy5hcHAuZ2V0UGFydGljaXBhbnRFdGhBZGRyZXNzKHRoaXMuc3dhcCkKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgICAgaWYgKCFoYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZWZ1bmRIYW5kbGVyKGhhc2gpOwogICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMsIFtbMiwgMTJdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHRyeVJlZnVuZCgpIHsKICAgICAgICByZXR1cm4gX3RyeVJlZnVuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gdHJ5UmVmdW5kOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiaXNSZWZ1bmRTdWNjZXNzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaXNSZWZ1bmRTdWNjZXNzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGlzUmVmdW5kU3VjY2VzcygpIHsKICAgICAgICByZXR1cm4gX2lzUmVmdW5kU3VjY2Vzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaXNSZWZ1bmRTdWNjZXNzOwogICAgfSgpCiAgfSwgewogICAga2V5OiAidHJ5V2l0aGRyYXciLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF90cnlXaXRoZHJhdyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KF9zZWNyZXQpIHsKICAgICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgICAgdmFyIF90aGlzJHN0YXRlLCBzZWNyZXQsIHNlY3JldEhhc2gsIGlzRXRoV2l0aGRyYXduLCBpc2J0Y1dpdGhkcmF3biwgdXR4b1NjcmlwdFZhbHVlcywgX3NlY3JldEhhc2gsIF90aGlzJGJ0Y1N3YXAkY3JlYXRlUywgc2NyaXB0QWRkcmVzcywgYmFsYW5jZTsKCiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsIHNlY3JldCA9IF90aGlzJHN0YXRlLnNlY3JldCwgc2VjcmV0SGFzaCA9IF90aGlzJHN0YXRlLnNlY3JldEhhc2gsIGlzRXRoV2l0aGRyYXduID0gX3RoaXMkc3RhdGUuaXNFdGhXaXRoZHJhd24sIGlzYnRjV2l0aGRyYXduID0gX3RoaXMkc3RhdGUuaXNidGNXaXRoZHJhd24sIHV0eG9TY3JpcHRWYWx1ZXMgPSBfdGhpcyRzdGF0ZS51dHhvU2NyaXB0VmFsdWVzOwoKICAgICAgICAgICAgICAgIGlmIChfc2VjcmV0KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJXaXRoZHJhd2FsIGlzIGF1dG9tYXRpYy4gRm9yIG1hbnVhbCB3aXRoZHJhd2FsLCBwcm92aWRlIGEgc2VjcmV0Iik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmICh1dHhvU2NyaXB0VmFsdWVzKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3Qgd2l0aGRyYXcgd2l0aG91dCBzY3JpcHQgdmFsdWVzIik7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIGlmIChzZWNyZXQgJiYgc2VjcmV0ICE9IF9zZWNyZXQpIGNvbnNvbGUud2FybigiU2VjcmV0IGFscmVhZHkga25vd24gYW5kIGlzIGRpZmZlcmVudC4gQXJlIHlvdSBzdXJlPyIpOwogICAgICAgICAgICAgICAgaWYgKGlzYnRjV2l0aGRyYXduKSBjb25zb2xlLndhcm4oIkxvb2tzIGxpa2UgbW9uZXkgd2VyZSBhbHJlYWR5IHdpdGhkcmF3biwgYXJlIHlvdSBzdXJlPyIpOwogICAgICAgICAgICAgICAgZGVidWcoJ3N3YXAuY29yZTpmbG93JykoIldJVEhEUkFXIHVzaW5nIHNlY3JldCA9ICIuY29uY2F0KF9zZWNyZXQpKTsKICAgICAgICAgICAgICAgIF9zZWNyZXRIYXNoID0gdGhpcy5hcHAuZW52LmJpdGNvaW4uY3J5cHRvLnJpcGVtZDE2MChCdWZmZXIuZnJvbShfc2VjcmV0LCAnaGV4JykpLnRvU3RyaW5nKCdoZXgnKTsKICAgICAgICAgICAgICAgIGlmIChzZWNyZXRIYXNoICE9IF9zZWNyZXRIYXNoKSBjb25zb2xlLndhcm4oIkhhc2ggZG9lcyBub3QgbWF0Y2ghIHN0YXRlOiAiLmNvbmNhdChzZWNyZXRIYXNoLCAiLCBnaXZlbjogIikuY29uY2F0KF9zZWNyZXRIYXNoKSk7CiAgICAgICAgICAgICAgICBfdGhpcyRidGNTd2FwJGNyZWF0ZVMgPSB0aGlzLmJ0Y1N3YXAuY3JlYXRlU2NyaXB0KHV0eG9TY3JpcHRWYWx1ZXMpLCBzY3JpcHRBZGRyZXNzID0gX3RoaXMkYnRjU3dhcCRjcmVhdGVTLnNjcmlwdEFkZHJlc3M7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnRjU3dhcC5nZXRCYWxhbmNlKHNjcmlwdEFkZHJlc3MpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgYmFsYW5jZSA9IF9jb250ZXh0Ni5zZW50OwogICAgICAgICAgICAgICAgZGVidWcoJ3N3YXAuY29yZTpmbG93JykoImFkZHJlc3M9Ii5jb25jYXQoc2NyaXB0QWRkcmVzcywgIiwgYmFsYW5jZT0iKS5jb25jYXQoYmFsYW5jZSkpOwoKICAgICAgICAgICAgICAgIGlmICghKGJhbGFuY2UgPT09IDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoU3RlcCh7CiAgICAgICAgICAgICAgICAgIGlzYnRjV2l0aGRyYXduOiB0cnVlCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgIHN0ZXA6ICd3aXRoZHJhdy11dHhvJwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkFscmVhZHkgd2l0aGRyYXduOiBhZGRyZXNzPSIuY29uY2F0KHNjcmlwdEFkZHJlc3MsICIsYmFsYW5jZT0iKS5jb25jYXQoYmFsYW5jZSkpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgdGhpcy5idGNTd2FwLndpdGhkcmF3KHsKICAgICAgICAgICAgICAgICAgc2NyaXB0VmFsdWVzOiB1dHhvU2NyaXB0VmFsdWVzLAogICAgICAgICAgICAgICAgICBzZWNyZXQ6IF9zZWNyZXQKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGhhc2gpIHsKICAgICAgICAgICAgICAgICAgZGVidWcoJ3N3YXAuY29yZTpmbG93JykoIlRYIGhhc2g9Ii5jb25jYXQoaGFzaCkpOwoKICAgICAgICAgICAgICAgICAgX3RoaXM0LnNldFN0YXRlKHsKICAgICAgICAgICAgICAgICAgICBidGNTd2FwV2l0aGRyYXdUcmFuc2FjdGlvbkhhc2g6IGhhc2gKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICBkZWJ1Zygnc3dhcC5jb3JlOmZsb3cnKSgiVFggd2l0aGRyYXcgc2VudDogIi5jb25jYXQoX3RoaXM0LnN0YXRlLmJ0Y1N3YXBXaXRoZHJhd1RyYW5zYWN0aW9uSGFzaCkpOwoKICAgICAgICAgICAgICAgICAgX3RoaXM0LmZpbmlzaFN0ZXAoewogICAgICAgICAgICAgICAgICAgIGlzYnRjV2l0aGRyYXduOiB0cnVlCiAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBzdGVwOiAnd2l0aGRyYXctdXR4bycKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHRyeVdpdGhkcmF3KF94KSB7CiAgICAgICAgcmV0dXJuIF90cnlXaXRoZHJhdy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gdHJ5V2l0aGRyYXc7CiAgICB9KCkKICB9XSwgW3sKICAgIGtleTogImdldE5hbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5hbWUoKSB7CiAgICAgIHJldHVybiAiIi5jb25jYXQodGhpcy5nZXRGcm9tTmFtZSgpLCAiMiIpLmNvbmNhdCh0aGlzLmdldFRvTmFtZSgpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRGcm9tTmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RnJvbU5hbWUoKSB7CiAgICAgIHJldHVybiBjb25zdGFudHMuQ09JTlMuZXRoOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFRvTmFtZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG9OYW1lKCkgewogICAgICByZXR1cm4gY29uc3RhbnRzLkNPSU5TLmJ0YzsKICAgIH0KICB9XSk7CgogIHJldHVybiBFVEgyQlRDOwp9KEF0b21pY0FCMlVUWE8pOwoKZXhwb3J0IGRlZmF1bHQgRVRIMkJUQzs="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/ETH2BTC.ts"],"names":["debug","constants","AtomicAB2UTXO","ETH2BTC","swap","utxoCoin","_flowName","getName","stepNumbers","ethSwap","participantSwap","btcSwap","ownerSwap","abBlockchain","utxoBlockchain","Error","state","step","isStoppedSwap","signTransactionHash","isSignFetching","isMeSigned","targetWallet","secretHash","isBalanceFetching","isBalanceEnough","balance","ethSwapCreationTransactionHash","canCreateEthTransaction","isEthContractFunded","secret","isEthWithdrawn","isbtcWithdrawn","ethSwapWithdrawTransactionHash","btcSwapWithdrawTransactionHash","refundTransactionHash","isRefunded","isFinished","isSwapExist","withdrawRequestIncoming","withdrawRequestAccepted","isFailedTransaction","isFailedTransactionError","_persistState","flow","room","once","setState","on","waitBtcConfirm","console","log","sendMessage","event","data","signABSide","waitUTXOScriptCreated","syncBalance","waitUTXOScriptFunded","scriptFunded","fundContract","getSecretFromAB2UTXO","withdrawFromSwap","finishStep","swapData","ownerAddress","app","getMyEthAddress","participantAddress","getParticipantEthAddress","checkSwapExists","refundHandler","hash","wasRefunded","warn","refund","then","error","_secret","utxoScriptValues","_secretHash","env","bitcoin","crypto","ripemd160","Buffer","from","toString","createScript","scriptAddress","getBalance","withdraw","scriptValues","getFromName","getToName","COINS","eth","btc"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport { EthSwap, BtcSwap } from 'swap.swaps'\r\n\r\n\r\nclass ETH2BTC extends AtomicAB2UTXO {\r\n\r\n  _flowName: string\r\n  ethSwap: EthSwap\r\n  btcSwap: BtcSwap\r\n  state: any\r\n\r\n  static getName() {\r\n    return `${this.getFromName()}2${this.getToName()}`\r\n  }\r\n  static getFromName() {\r\n    return constants.COINS.eth\r\n  }\r\n  static getToName() {\r\n    return constants.COINS.btc\r\n  }\r\n  constructor(swap) {\r\n    super(swap)\r\n    this.utxoCoin = `btc`\r\n    this._flowName = ETH2BTC.getName()\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'wait-lock-utxo': 2,\r\n      'verify-script': 3,\r\n      'sync-balance': 4,\r\n      'lock-eth': 5,\r\n      'wait-withdraw-eth': 6, // aka getSecret\r\n      'withdraw-utxo': 7,\r\n      'finish': 8,\r\n      'end': 9\r\n    }\r\n\r\n    this.ethSwap = swap.participantSwap\r\n    this.btcSwap = swap.ownerSwap\r\n\r\n    this.abBlockchain = this.ethSwap\r\n    this.utxoBlockchain = this.btcSwap\r\n\r\n    if (!this.ethSwap) {\r\n      throw new Error('BTC2ETH: \"ethSwap\" of type object required')\r\n    }\r\n    if (!this.btcSwap) {\r\n      throw new Error('BTC2ETH: \"btcSwap\" of type object required')\r\n    }\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isStoppedSwap: false,\r\n\r\n      signTransactionHash: null,\r\n      isSignFetching: false,\r\n      isMeSigned: false,\r\n\r\n      targetWallet : null,\r\n      secretHash: null,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n      balance: null,\r\n\r\n      ethSwapCreationTransactionHash: null,\r\n      canCreateEthTransaction: true,\r\n      isEthContractFunded: false,\r\n\r\n      secret: null,\r\n\r\n      isEthWithdrawn: false,\r\n      isbtcWithdrawn: false,\r\n\r\n      ethSwapWithdrawTransactionHash: null,\r\n      btcSwapWithdrawTransactionHash: null,\r\n\r\n      refundTransactionHash: null,\r\n      isRefunded: false,\r\n\r\n      isFinished: false,\r\n      isSwapExist: false,\r\n\r\n      withdrawRequestIncoming: false,\r\n      withdrawRequestAccepted: false,\r\n\r\n      isFailedTransaction: false,\r\n      isFailedTransactionError: null,\r\n    }\r\n\r\n    this._persistState()\r\n\r\n    const flow = this\r\n\r\n    flow.swap.room.once('request withdraw', () => {\r\n      flow.setState({\r\n        withdrawRequestIncoming: true,\r\n      })\r\n    })\r\n\r\n    flow.swap.room.on('wait btc confirm', () => {\r\n      flow.setState({\r\n        waitBtcConfirm: true,\r\n      })\r\n    })\r\n\r\n    flow.swap.room.on('request eth contract', () => {\r\n      console.log('Requesting eth contract')\r\n      const { ethSwapCreationTransactionHash } = flow.state\r\n\r\n      if (ethSwapCreationTransactionHash) {\r\n        console.log('Exists - send hash')\r\n        flow.swap.room.sendMessage({\r\n          event: 'create eth contract',\r\n          data: {\r\n            ethSwapCreationTransactionHash,\r\n          },\r\n        })\r\n      }\r\n    })\r\n\r\n    super._persistSteps()\r\n  }\r\n\r\n  _persistState() {\r\n    super._persistState()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n\r\n    return [\r\n\r\n      // 1. Sign swap to start\r\n\r\n      () => {\r\n        this.signABSide()\r\n      },\r\n\r\n      // 2. Wait participant create, fund BTC Script\r\n\r\n      () => {\r\n        flow.waitUTXOScriptCreated()\r\n      },\r\n\r\n      // 3. Verify BTC Script\r\n\r\n      () => {\r\n        debug('swap.core:flow')(`waiting verify btc script`)\r\n      },\r\n\r\n      // 4. Check balance\r\n\r\n      () => {\r\n        this.syncBalance()\r\n      },\r\n\r\n      // 5. Create ETH Contract\r\n\r\n      async () => {\r\n        const scriptFunded = await this.waitUTXOScriptFunded()\r\n        if (scriptFunded) {\r\n          await flow.ethSwap.fundContract({\r\n            flow,\r\n          })\r\n        }\r\n      },\r\n\r\n      // 6. Wait participant withdraw\r\n\r\n      async () => {\r\n        await flow.ethSwap.getSecretFromAB2UTXO({ flow })\r\n      },\r\n\r\n      // 7. Withdraw\r\n\r\n      async () => {\r\n        await this.btcSwap.withdrawFromSwap({\r\n          flow,\r\n        })\r\n      },\r\n\r\n      // 8. Finish\r\n\r\n      () => {\r\n        flow.swap.room.once('request swap finished', () => {\r\n          const { btcSwapWithdrawTransactionHash } = flow.state\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'swap finished',\r\n            data: {\r\n              btcSwapWithdrawTransactionHash,\r\n            },\r\n          })\r\n        })\r\n\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, { step: 'finish' })\r\n      },\r\n\r\n      // 9. Finished!\r\n\r\n      () => {}\r\n    ]\r\n  }\r\n\r\n  _checkSwapAlreadyExists() {\r\n    const swapData = {\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: this.app.getParticipantEthAddress(this.swap)\r\n    }\r\n\r\n    return this.ethSwap.checkSwapExists(swapData)\r\n  }\r\n\r\n  async tryRefund() {\r\n    const { secretHash } = this.state\r\n\r\n    const refundHandler = (hash = null) => {\r\n      this.swap.room.sendMessage({\r\n        event: 'eth refund completed',\r\n      })\r\n\r\n      this.setState({\r\n        refundTransactionHash: hash,\r\n        isRefunded: true,\r\n        isSwapExist: false,\r\n      }, true)\r\n    }\r\n\r\n    try {\r\n      const wasRefunded = await this.ethSwap.wasRefunded({ secretHash })\r\n\r\n      if (wasRefunded) {\r\n        debug('swap.core:flow')('This swap was refunded')\r\n\r\n        refundHandler()\r\n\r\n        return true\r\n      }\r\n    } catch (error) {\r\n      console.warn('wasRefunded error:', error)\r\n\r\n      return false\r\n    }\r\n\r\n    return this.ethSwap.refund({\r\n      participantAddress: this.app.getParticipantEthAddress(this.swap),\r\n    })\r\n      .then((hash) => {\r\n        if (!hash) {\r\n          return false\r\n        }\r\n\r\n        refundHandler(hash)\r\n\r\n        return true\r\n      })\r\n      .catch((error) => false)\r\n  }\r\n\r\n  async isRefundSuccess() {\r\n    return true\r\n  }\r\n\r\n  async tryWithdraw(_secret) {\r\n    const { secret, secretHash, isEthWithdrawn, isbtcWithdrawn, utxoScriptValues } = this.state\r\n\r\n    if (!_secret)\r\n      throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n    if (!utxoScriptValues)\r\n      throw new Error(`Cannot withdraw without script values`)\r\n\r\n    if (secret && secret != _secret)\r\n      console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n    if (isbtcWithdrawn)\r\n      console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n    debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n    const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n    if (secretHash != _secretHash)\r\n      console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n    const { scriptAddress } = this.btcSwap.createScript(utxoScriptValues)\r\n    const balance = await this.btcSwap.getBalance(scriptAddress)\r\n\r\n    debug('swap.core:flow')(`address=${scriptAddress}, balance=${balance}`)\r\n\r\n    if (balance === 0) {\r\n      this.finishStep({\r\n        isbtcWithdrawn: true,\r\n      }, { step: 'withdraw-utxo' })\r\n      throw new Error(`Already withdrawn: address=${scriptAddress},balance=${balance}`)\r\n    }\r\n\r\n    this.btcSwap.withdraw({\r\n      scriptValues: utxoScriptValues,\r\n      secret: _secret,\r\n    }).then((hash) => {\r\n      debug('swap.core:flow')(`TX hash=${hash}`)\r\n      this.setState({\r\n        btcSwapWithdrawTransactionHash: hash,\r\n      })\r\n    \r\n      debug('swap.core:flow')(`TX withdraw sent: ${this.state.btcSwapWithdrawTransactionHash}`)\r\n\r\n      this.finishStep({\r\n        isbtcWithdrawn: true,\r\n      }, { step: 'withdraw-utxo' })\r\n    })\r\n  }\r\n}\r\n\r\n\r\nexport default ETH2BTC\r\n"]}]}