{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.app\\util\\helpers.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.app\\util\\helpers.ts","mtime":1614847693992},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.app/util/helpers.ts"],"names":["repeatAsyncUntilResult","action","delay","Promise","resolve","isStoped","stop","iteration","result","setTimeout","waitDelay","inSeconds","reject","extractSecretFromContract","flow","swapFlow","participantAddress","ownerAddress","app","getSecret","secretFromContract","secretHash","state","hashFromContractSecret","env","bitcoin","crypto","ripemd160","Buffer","from","replace","toString","console","warn","swaps","ourSwap","hashFromContractSwap","secret","extractSecretFromTx","ethSwapWithdrawTransactionHash","getSecretFromTxhash","secretFromTx","hashFromTxSecret","secretFromTxhash"],"mappings":"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","sourcesContent":["/**\r\n * @param {function} action\r\n * @param {number} delay\r\n * @returns {Promise<any>}\r\n */\r\nconst repeatAsyncUntilResult = (action, delay = 10 * 1000): Promise<any> =>\r\n  new Promise(async (resolve) => {\r\n    let isStoped = false\r\n    const stop = () => {\r\n      isStoped = true\r\n    }\r\n    const iteration = async () => {\r\n      const result = await action(stop)\r\n\r\n      if (!isStoped && (!result\r\n        || result === 0\r\n        || typeof result === 'undefined'\r\n        || result === null\r\n        || result === '0x0000000000000000000000000000000000000000')\r\n      ) {\r\n        setTimeout(iteration, delay)\r\n      } else {\r\n        resolve(result)\r\n      }\r\n    }\r\n\r\n    iteration()\r\n  })\r\n\r\n/**\r\n * @param {number} inSeconds\r\n * @returns {Promise<any>}\r\n */\r\nconst waitDelay = async (inSeconds) => \r\n  new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(true)\r\n    }, inSeconds*1000)\r\n  })\r\n\r\nconst extractSecretFromContract = async ({\r\n  flow,\r\n  swapFlow,\r\n  participantAddress,\r\n  ownerAddress,\r\n  app,\r\n}) => {\r\n  try {\r\n    let secretFromContract = await swapFlow.getSecret({\r\n      participantAddress,\r\n    })\r\n\r\n    if (secretFromContract) {\r\n      const {\r\n        secretHash,\r\n      } = flow.state\r\n\r\n      const hashFromContractSecret = app.env.bitcoin.crypto.ripemd160(\r\n        Buffer.from(secretFromContract.replace(/^0x/, ''), 'hex')\r\n      ).toString('hex')\r\n\r\n      if (hashFromContractSecret !== secretHash) {\r\n        console.warn('Secret on contract dismatch with our hash. May be blockchain not updated. Try use swaps var')\r\n        const ourSwap = await swapFlow.swaps({\r\n          ownerAddress,\r\n          participantAddress,\r\n        })\r\n        if (ourSwap) {\r\n          const hashFromContractSwap = app.env.bitcoin.crypto.ripemd160(\r\n            Buffer.from(ourSwap.secret.replace(/^0x/, ''), 'hex')\r\n          ).toString('hex')\r\n\r\n          if (hashFromContractSwap !== secretHash) {\r\n            console.warn('Secret on contract dismatch with our hash. May be blockchain not updated')\r\n          } else {\r\n            console.warn('Use secret from contract swap variable. getSecret method stucked')\r\n            secretFromContract = hashFromContractSwap\r\n            return null\r\n          }\r\n        }\r\n        return null\r\n      }\r\n\r\n      secretFromContract = `0x${secretFromContract.replace(/^0x/, '')}`\r\n\r\n      return secretFromContract\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n  catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nconst extractSecretFromTx = async ({\r\n  flow,\r\n  swapFlow,\r\n  app,\r\n  ethSwapWithdrawTransactionHash,\r\n}) => {\r\n  let secretFromTxhash = await repeatAsyncUntilResult(async () => {\r\n    const {\r\n      secret,\r\n      secretHash,\r\n    } = flow.state\r\n\r\n    \r\n    if (secret) {\r\n      return secret\r\n    } else {\r\n     \r\n      const secretFromTx = await swapFlow.getSecretFromTxhash(ethSwapWithdrawTransactionHash)\r\n\r\n      const hashFromTxSecret = app.env.bitcoin.crypto.ripemd160(\r\n        Buffer.from(secretFromTx, 'hex')\r\n      ).toString('hex')\r\n\r\n      if (hashFromTxSecret === secretHash) {\r\n        return secretFromTx\r\n      } else {\r\n        console.warn('Secret from Tx dismatch with our hash. Wait contract')\r\n        return false\r\n      }\r\n    }\r\n  })\r\n  //@\r\n  secretFromTxhash = `0x${secretFromTxhash.replace(/^0x/, '')}`\r\n\r\n  return secretFromTxhash\r\n}\r\n\r\nexport default {\r\n  repeatAsyncUntilResult,\r\n  waitDelay,\r\n  extractSecretFromContract,\r\n  extractSecretFromTx,\r\n}\r\n"]}]}