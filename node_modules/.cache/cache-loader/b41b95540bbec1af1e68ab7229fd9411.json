{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\SwapAuth.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.auth\\SwapAuth.ts","mtime":1614851267284},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjsKaW1wb3J0IF9nZXRQcm90b3R5cGVPZiBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5IjsKCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKLy8gQHRzLW5vY2hlY2sKaW1wb3J0IFN3YXBBcHAsIHsgU2VydmljZUludGVyZmFjZSwgY29uc3RhbnRzIH0gZnJvbSAnc3dhcC5hcHAnOwoKdmFyIF9wcml2YXRlS2V5czsKCnZhciBfbW5lbW9uaWM7Cgp2YXIgZ2V0UHVibGljRGF0YU1ldGhvZHMgPSB7fTsKCnZhciBTd2FwQXV0aCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1NlcnZpY2VJbnRlcmZhY2UpIHsKICBfaW5oZXJpdHMoU3dhcEF1dGgsIF9TZXJ2aWNlSW50ZXJmYWNlKTsKCiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihTd2FwQXV0aCk7CgogIGZ1bmN0aW9uIFN3YXBBdXRoKHByaXZhdGVLZXlzLCB1c2VNbmVtb25pYykgewogICAgdmFyIF90aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2FwQXV0aCk7CgogICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJfc2VydmljZU5hbWUiLCB2b2lkIDApOwoKICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgImFjY291bnRzIiwgdm9pZCAwKTsKCiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICJhcHAiLCB2b2lkIDApOwoKICAgIF90aGlzLl9zZXJ2aWNlTmFtZSA9ICdhdXRoJzsKICAgIF90aGlzLmFjY291bnRzID0ge307CiAgICBfcHJpdmF0ZUtleXMgPSBwcml2YXRlS2V5czsKICAgIF9tbmVtb25pYyA9IHVzZU1uZW1vbmljOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFN3YXBBdXRoLCBbewogICAga2V5OiAiaW5pdFNlcnZpY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRTZXJ2aWNlKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBhcHAgPSB0aGlzLmFwcDsKICAgICAgU3dhcEFwcC5yZXF1aXJlZChhcHApOwogICAgICBPYmplY3Qua2V5cyhfcHJpdmF0ZUtleXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICBpZiAoT2JqZWN0LmtleXMoY29uc3RhbnRzLkNPSU5TKS5pbmRleE9mKG5hbWUpIDwgMCkgewogICAgICAgICAgdmFyIGVycm9yID0gIlN3YXBBdXRoLl9pbml0U2VydmljZSgpOiBUaGVyZSBpcyBubyBpbnN0YW5jZSB3aXRoIG5hbWUgXCIiLmNvbmNhdChuYW1lLCAiXCIuIik7CiAgICAgICAgICBlcnJvciArPSAiT25seSBbIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoT2JqZWN0LmtleXMoY29uc3RhbnRzLkNPSU5TKSkucmVwbGFjZSgvIi9nLCAnXCcnKSwgIl0gYXZhaWxhYmxlIik7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpOwogICAgICAgIH0KCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHJlcXVpcmUoIi4vIi5jb25jYXQobmFtZSkpOwoKICAgICAgICAgIGluc3RhbmNlID0gaW5zdGFuY2VbImRlZmF1bHQiXSB8fCBpbnN0YW5jZTsKICAgICAgICAgIHZhciBhY2NvdW50ID0gX21uZW1vbmljID8gaW5zdGFuY2UubG9naW5NbmVtb25pYyhfbW5lbW9uaWMsIDAsIGZhbHNlLCBhcHApIDogaW5zdGFuY2UubG9naW4oX3ByaXZhdGVLZXlzW25hbWVdLCBhcHApOwogICAgICAgICAgX3RoaXMyLmFjY291bnRzW25hbWVdID0gYWNjb3VudDsKCiAgICAgICAgICBnZXRQdWJsaWNEYXRhTWV0aG9kc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLmdldFB1YmxpY0RhdGEoYWNjb3VudCwgYXBwKTsKICAgICAgICAgIH07CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlN3YXBBdXRoLl9pbml0U2VydmljZSgpOiAiLmNvbmNhdChlcnIpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFB1YmxpY0RhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFB1YmxpY0RhdGEoKSB7CiAgICAgIHZhciBkYXRhID0gewogICAgICAgIHBlZXI6IHRoaXMuYXBwLnNlcnZpY2VzLnJvb20ucGVlcgogICAgICB9OwogICAgICBPYmplY3Qua2V5cyhnZXRQdWJsaWNEYXRhTWV0aG9kcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgIGRhdGFbbmFtZV0gPSBnZXRQdWJsaWNEYXRhTWV0aG9kc1tuYW1lXSgpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJuYW1lIiwKICAgIGdldDogLy9ACiAgICBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiAnYXV0aCc7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3dhcEF1dGg7Cn0oU2VydmljZUludGVyZmFjZSk7CgpleHBvcnQgZGVmYXVsdCBTd2FwQXV0aDs="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.auth/SwapAuth.ts"],"names":["SwapApp","ServiceInterface","constants","_privateKeys","_mnemonic","getPublicDataMethods","SwapAuth","privateKeys","useMnemonic","_serviceName","accounts","app","required","Object","keys","forEach","name","COINS","indexOf","error","JSON","stringify","replace","Error","instance","require","account","loginMnemonic","login","getPublicData","err","data","peer","services","room"],"mappings":";;;;;;;;;;;;AAAA;AACA,OAAOA,OAAP,IAAkBC,gBAAlB,EAAoCC,SAApC,QAAqD,UAArD;;AAGA,IAAIC,YAAJ;;AACA,IAAIC,SAAJ;;AACA,IAAMC,oBAAoB,GAAG,EAA7B;;IAEMC,Q;;;;;AAWJ,oBAAYC,WAAZ,EAAyBC,WAAzB,EAAsC;AAAA;;AAAA;;AACpC;;AADoC;;AAAA;;AAAA;;AAGpC,UAAKC,YAAL,GAA4B,MAA5B;AACA,UAAKC,QAAL,GAA4B,EAA5B;AAEAP,IAAAA,YAAY,GAAGI,WAAf;AACAH,IAAAA,SAAS,GAAGI,WAAZ;AAPoC;AAUrC;;;;WAED,uBAAc;AAAA;;AACZ,UAAMG,GAAG,GAAG,KAAKA,GAAjB;AAEAX,MAAAA,OAAO,CAACY,QAAR,CAAiBD,GAAjB;AAEAE,MAAAA,MAAM,CAACC,IAAP,CAAYX,YAAZ,EAA0BY,OAA1B,CAAkC,UAACC,IAAD,EAAU;AAC1C,YAAIH,MAAM,CAACC,IAAP,CAAYZ,SAAS,CAACe,KAAtB,EAA6BC,OAA7B,CAAqCF,IAArC,IAA6C,CAAjD,EAAoD;AAClD,cAAIG,KAAK,uEAA+DH,IAA/D,QAAT;AACAG,UAAAA,KAAK,oBAAaC,IAAI,CAACC,SAAL,CAAeR,MAAM,CAACC,IAAP,CAAYZ,SAAS,CAACe,KAAtB,CAAf,EAA6CK,OAA7C,CAAqD,IAArD,EAA2D,IAA3D,CAAb,gBAAL;AAEA,gBAAM,IAAIC,KAAJ,CAAUJ,KAAV,CAAN;AACD;;AAED,YAAI;AACF,cAAIK,QAAQ,GAAGC,OAAO,aAAMT,IAAN,EAAtB;;AACAQ,UAAAA,QAAQ,GAAGA,QAAQ,WAAR,IAAoBA,QAA/B;AACA,cAAME,OAAO,GAAItB,SAAD,GACZoB,QAAQ,CAACG,aAAT,CAAuBvB,SAAvB,EAAkC,CAAlC,EAAqC,KAArC,EAA4CO,GAA5C,CADY,GAEZa,QAAQ,CAACI,KAAT,CAAezB,YAAY,CAACa,IAAD,CAA3B,EAAmCL,GAAnC,CAFJ;AAIA,UAAA,MAAI,CAACD,QAAL,CAAcM,IAAd,IAAsBU,OAAtB;;AACArB,UAAAA,oBAAoB,CAACW,IAAD,CAApB,GAA6B;AAAA,mBAAMQ,QAAQ,CAACK,aAAT,CAAuBH,OAAvB,EAAgCf,GAAhC,CAAN;AAAA,WAA7B;AACD,SATD,CAUA,OAAOmB,GAAP,EAAY;AACV,gBAAM,IAAIP,KAAJ,oCAAsCO,GAAtC,EAAN;AACD;AACF,OArBD;AAsBD;;;WAED,yBAAgB;AACd,UAAMC,IAAI,GAAG;AACXC,QAAAA,IAAI,EAAE,KAAKrB,GAAL,CAASsB,QAAT,CAAkBC,IAAlB,CAAuBF;AADlB,OAAb;AAIAnB,MAAAA,MAAM,CAACC,IAAP,CAAYT,oBAAZ,EAAkCU,OAAlC,CAA0C,UAACC,IAAD,EAAU;AAClDe,QAAAA,IAAI,CAACf,IAAD,CAAJ,GAAaX,oBAAoB,CAACW,IAAD,CAApB,EAAb;AACD,OAFD;AAIA,aAAOe,IAAP;AACD;;;SAxDD;AACA,mBAAkB;AAChB,aAAO,MAAP;AACD;;;;EAToB9B,gB;;AAkEvB,eAAeK,QAAf","sourcesContent":["// @ts-nocheck\r\nimport SwapApp, { ServiceInterface, constants } from 'swap.app'\r\n\r\n\r\nlet _privateKeys\r\nlet _mnemonic\r\nconst getPublicDataMethods = {}\r\n\r\nclass SwapAuth extends ServiceInterface {\r\n\r\n  _serviceName: string\r\n  accounts: any\r\n  app: any\r\n\r\n  //@\r\n  static get name() {\r\n    return 'auth'\r\n  }\r\n\r\n  constructor(privateKeys, useMnemonic) {\r\n    super()\r\n\r\n    this._serviceName         = 'auth'\r\n    this.accounts             = {}\r\n\r\n    _privateKeys = privateKeys\r\n    _mnemonic = useMnemonic\r\n    \r\n\r\n  }\r\n\r\n  initService() {\r\n    const app = this.app\r\n\r\n    SwapApp.required(app)\r\n\r\n    Object.keys(_privateKeys).forEach((name) => {\r\n      if (Object.keys(constants.COINS).indexOf(name) < 0) {\r\n        let error = `SwapAuth._initService(): There is no instance with name \"${name}\".`\r\n        error += `Only [${JSON.stringify(Object.keys(constants.COINS)).replace(/\"/g, '\\'')}] available`\r\n\r\n        throw new Error(error)\r\n      }\r\n\r\n      try {\r\n        let instance = require(`./${name}`)\r\n        instance = instance.default || instance\r\n        const account = (_mnemonic)\r\n          ? instance.loginMnemonic(_mnemonic, 0, false, app)\r\n          : instance.login(_privateKeys[name], app)\r\n\r\n        this.accounts[name] = account\r\n        getPublicDataMethods[name] = () => instance.getPublicData(account, app)\r\n      }\r\n      catch (err) {\r\n        throw new Error(`SwapAuth._initService(): ${err}`)\r\n      }\r\n    })\r\n  }\r\n\r\n  getPublicData() {\r\n    const data = {\r\n      peer: this.app.services.room.peer,\r\n    }\r\n\r\n    Object.keys(getPublicDataMethods).forEach((name) => {\r\n      data[name] = getPublicDataMethods[name]()\r\n    })\r\n\r\n    return data\r\n  }\r\n}\r\n\r\n\r\nexport default SwapAuth\r\n"]}]}