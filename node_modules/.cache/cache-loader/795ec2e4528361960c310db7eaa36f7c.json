{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\turbo\\Maker.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\turbo\\Maker.ts","mtime":1614842913761},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/turbo/Maker.ts"],"names":["debug","Flow","TurboMaker","swap","console","log","stepNumbers","mySwap","ownerSwap","participantSwap","state","step","isParticipantSigned","isBalanceFetching","isBalanceEnough","takerTxHash","isTakerTxPended","makerTxHash","isMakerTxPended","isStoppedSwap","isFinished","flow","room","sendMessage","event","once","finishStep","txHash","amount","sellAmount","to","participant","sellCurrency","toLowerCase","address","_swapName","toUpperCase","usedSwap","Error","sendTransaction","data","setState"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,WAArB;;IAIqBC,U;;;;;AA0BnB,sBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB,8BAAMA,IAAN;;AADgB,gEAxBN,YAwBM;;AAAA;;AAAA;;AAAA;;AAEhBC,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CF,IAA/C;AAEA,UAAKG,WAAL,GAAmB;AACjB,cAAQ,CADS;AAEjB,uBAAiB,CAFA;AAGjB,uBAAiB,CAHA;AAIjB,uBAAiB,CAJA;AAKjB,gBAAU,CALO;AAMjB,aAAO;AANU,KAAnB;AASA,UAAKC,MAAL,GAAcJ,IAAI,CAACK,SAAnB;AACA,UAAKC,eAAL,GAAuBN,IAAI,CAACM,eAA5B;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,CADK;AAGXC,MAAAA,mBAAmB,EAAE,KAHV;AAKXC,MAAAA,iBAAiB,EAAE,KALR;AAMXC,MAAAA,eAAe,EAAE,IANN;AAQXC,MAAAA,WAAW,EAAE,IARF;AASXC,MAAAA,eAAe,EAAE,KATN;AAWXC,MAAAA,WAAW,EAAE,IAXF;AAYXC,MAAAA,eAAe,EAAE,KAZN;AAcXC,MAAAA,aAAa,EAAE,KAdJ;AAeXC,MAAAA,UAAU,EAAE;AAfD,KAAb;;AAkBA;;AACA;;AAnCgB;AAoCjB;;;;WAED,qBAAY;AAAA;;AACV,UAAMC,IAAI,GAAG,IAAb;AACA,UAAMlB,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMmB,IAAI,GAAG,KAAKnB,IAAL,CAAUmB,IAAvB;AAEA,UAAMf,MAAM,GAAG,KAAKA,MAApB;AACA,UAAME,eAAe,GAAG,KAAKA,eAA7B;AAEA,aAAO,uEAEL;AAAA;AAAA;AAAA;AAAA;AACEL,gBAAAA,OAAO,CAACC,GAAR;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,IAA3B,EAFF,CAIE;;AAEAmB,gBAAAA,IAAI,CAACC,WAAL,CAAiB;AACfC,kBAAAA,KAAK,EAAE;AADQ,iBAAjB;AAIAF,gBAAAA,IAAI,CAACG,IAAL,CAAU,WAAV,EAAuB,YAAM;AAAA,sBACnBd,IADmB,GACVU,IAAI,CAACX,KADK,CACnBC,IADmB;;AAG3B,sBAAIA,IAAI,IAAI,CAAZ,EAAe;AACb;AACD;;AAEDU,kBAAAA,IAAI,CAACK,UAAL,CAAgB;AACdd,oBAAAA,mBAAmB,EAAE;AADP,mBAAhB,EAEG;AAAED,oBAAAA,IAAI,EAAE;AAAR,mBAFH;AAGD,iBAVD;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFK,0EA0BL;AAAA;AAAA;AAAA;AAAA;AACEP,gBAAAA,OAAO,CAACC,GAAR;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,IAA3B;AAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASQ;AAEA;;AACA,gBAAA,MAAI,CAACuB,UAAL,CAAgB;AACdZ,kBAAAA,eAAe,EAAE;AADH,iBAAhB,EAEG;AAAEH,kBAAAA,IAAI,EAAE;AAAR,iBAFH;;AAvCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1BK,IAuEL,YAAM;AACJP,QAAAA,OAAO,CAACC,GAAR;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,IAA3B;AAEAmB,QAAAA,IAAI,CAACG,IAAL,CAAU,iBAAV,EAA6B,iBAAgB;AAAA,cAAbE,MAAa,SAAbA,MAAa;AAC3CvB,UAAAA,OAAO,CAACC,GAAR,mCAA8CsB,MAA9C;AACAvB,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAF2C,CAG3C;AACA;;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEAgB,UAAAA,IAAI,CAACK,UAAL,CAAgB;AACdX,YAAAA,WAAW,EAAEY,MADC;AAEdX,YAAAA,eAAe,EAAE,IAFH,CAES;;AAFT,WAAhB,EAGG;AAAEL,YAAAA,IAAI,EAAE;AAAR,WAHH;AAID,SAXD;AAYD,OAvFI,wEA0FL;AAAA;AAAA;AAAA;AAAA;AAAA;AACEP,gBAAAA,OAAO,CAACC,GAAR;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,IAA3B,EAFF,CAIE;;AAEMyB,gBAAAA,MANR,GAMiBzB,IAAI,CAAC0B,UANtB;AAOQC,gBAAAA,EAPR,GAOa3B,IAAI,CAAC4B,WAAL,CAAiB5B,IAAI,CAAC6B,YAAL,CAAkBC,WAAlB,EAAjB,EAAkDC,OAP/D;AASE9B,gBAAAA,OAAO,CAACC,GAAR,gBAAoBuB,MAApB,cAA8BzB,IAAI,CAAC6B,YAAnC,iCAAqEF,EAArE;;AAGA,oBAAIvB,MAAM,CAAC4B,SAAP,KAAqBhC,IAAI,CAAC6B,YAAL,CAAkBI,WAAlB,EAAzB,EAA0D;AACxDC,kBAAAA,QAAQ,GAAG9B,MAAX;AACD;;AACD,oBAAIE,eAAe,CAAC0B,SAAhB,KAA8BhC,IAAI,CAAC6B,YAAL,CAAkBI,WAAlB,EAAlC,EAAmE;AACjEC,kBAAAA,QAAQ,GAAG5B,eAAX;AACD;;AAjBH,oBAkBO4B,QAlBP;AAAA;AAAA;AAAA;;AAAA,sBAmBU,IAAIC,KAAJ,uBAAyBnC,IAAI,CAAC6B,YAA9B,EAnBV;;AAAA;AAqBI5B,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BgC,QAA3B;;AArBJ;AAAA;AAAA,uBAwBuBA,QAAQ,CAACE,eAAT,CAAyB;AAAET,kBAAAA,EAAE,EAAFA,EAAF;AAAMF,kBAAAA,MAAM,EAANA;AAAN,iBAAzB,CAxBvB;;AAAA;AAwBQD,gBAAAA,MAxBR;AA0BEvB,gBAAAA,OAAO,CAACC,GAAR,4BAAgCsB,MAAhC;AAEAL,gBAAAA,IAAI,CAACC,WAAL,CAAiB;AACfC,kBAAAA,KAAK,EAAE,iBADQ;AAEfgB,kBAAAA,IAAI,EAAE;AACJb,oBAAAA,MAAM,EAANA;AADI;AAFS,iBAAjB;AAOAN,gBAAAA,IAAI,CAACK,UAAL,CAAgB;AACdT,kBAAAA,WAAW,EAAEU,MADC;AAEdT,kBAAAA,eAAe,EAAE,IAFH,CAES;;AAFT,iBAAhB,EAGG,eAHH;;AAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1FK,IAoIL,YAAM;AACJd,QAAAA,OAAO,CAACC,GAAR;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQgB,QAAAA,IAAI,CAACK,UAAL,CAAgB;AACdN,UAAAA,UAAU,EAAE;AADE,SAAhB,EAEG,QAFH;AAGD,OAnJI,EAsJL,YAAM;AACJhB,QAAAA,OAAO,CAACC,GAAR,wBADI,CAEJ;AACD,OAzJI,CAAP;AA2JD;;;WAED,2BAAkB;AAChB,UAAMgB,IAAI,GAAG,IAAb;AAEArB,MAAAA,KAAK,CAAC,gBAAD,CAAL,CAAwB,kBAAxB;AAEAqB,MAAAA,IAAI,CAACoB,QAAL,CAAc;AACZtB,QAAAA,aAAa,EAAE;AADH,OAAd,EAEG,IAFH;AAGD;;;;EA7OqClB,I;;gBAAnBC,U,aAGF;AAAA,SAAM,YAAN;AAAA,C;;SAHEA,U","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { Flow } from 'swap.swap'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\n\r\nexport default class TurboMaker extends Flow {\r\n\r\n  _flowName = 'TurboMaker'\r\n  static getName = () => 'TurboMaker'\r\n\r\n  mySwap: any\r\n  participantSwap: any\r\n\r\n  state: {\r\n    step: 0 | 1 | 2 | 3 | 4 | 5 | 6,\r\n\r\n    isParticipantSigned: boolean,\r\n\r\n    isBalanceFetching: boolean,\r\n    isBalanceEnough: boolean,\r\n\r\n    takerTxHash: null | string\r\n    isTakerTxPended: boolean\r\n\r\n    makerTxHash: null | string\r\n    isMakerTxPended: boolean\r\n\r\n    isStoppedSwap: boolean,\r\n    isFinished: boolean,\r\n  }\r\n\r\n  constructor(swap) {\r\n    super(swap)\r\n    console.log('Create Maker flow(swap), swap =', swap)\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'check-balance': 2,\r\n      'wait-taker-tx': 3,\r\n      'send-maker-tx': 4,\r\n      'finish': 5,\r\n      'end': 6,\r\n    }\r\n\r\n    this.mySwap = swap.ownerSwap\r\n    this.participantSwap = swap.participantSwap\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isParticipantSigned: false,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n\r\n      takerTxHash: null,\r\n      isTakerTxPended: false,\r\n\r\n      makerTxHash: null,\r\n      isMakerTxPended: false,\r\n\r\n      isStoppedSwap: false,\r\n      isFinished: false,\r\n    }\r\n\r\n    super._persistState()\r\n    super._persistSteps()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n    const swap = this.swap\r\n    const room = this.swap.room\r\n\r\n    const mySwap = this.mySwap\r\n    const participantSwap = this.participantSwap\r\n\r\n    return [\r\n\r\n      async () => {\r\n        console.log(`Maker Step 1: 'sign'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        //flow.swap.processMetamask()\r\n\r\n        room.sendMessage({\r\n          event: 'request sign',\r\n        })\r\n\r\n        room.once('swap sign', () => {\r\n          const { step } = flow.state\r\n\r\n          if (step >= 2) {\r\n            return\r\n          }\r\n\r\n          flow.finishStep({\r\n            isParticipantSigned: true,\r\n          }, { step: 'sign' })\r\n        })\r\n      },\r\n\r\n\r\n      async () => {\r\n        console.log(`Maker Step 2: 'check-balance'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        /*const { sellAmount } = this.swap\r\n\r\n        this.setState({\r\n          isBalanceFetching: true,\r\n        })\r\n\r\n        const btcAddress = this.app.services.auth.accounts.btc.getAddress()\r\n\r\n        const txFee = await this.btcSwap.estimateFeeValue({\r\n          method: 'swap',\r\n          fixed: true,\r\n          address: btcAddress\r\n        })\r\n\r\n        const unspents = await this.btcSwap.fetchUnspents(btcAddress)\r\n        const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n        const balance = new BigNumber(totalUnspent).dividedBy(1e8)\r\n\r\n        const needAmount = sellAmount.plus(txFee)\r\n        const isEnoughMoney = needAmount.isLessThanOrEqualTo(balance)\r\n\r\n        const stateData = {\r\n          isBalanceFetching: false,\r\n          isBalanceEnough: isEnoughMoney,\r\n        }\r\n\r\n        if (isEnoughMoney) {\r\n          this.finishStep(stateData, { step: 'check-balance' })\r\n        } else {\r\n          this.setState(stateData, true)\r\n        }*/\r\n\r\n        //return true\r\n\r\n        //temp\r\n        this.finishStep({\r\n          isBalanceEnough: true,\r\n        }, { step: 'check-balance' })\r\n      },\r\n\r\n\r\n      () => {\r\n        console.log(`Maker Step 3: 'wait-taker-tx'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        room.once('taker tx sended', ({ txHash }) => {\r\n          console.log(`RECEIVED from taker: tx hash =`, txHash)\r\n          console.log('Check taker tx...')\r\n          // todo: tx check\r\n          //... || this.stopSwapProcess()\r\n          console.log('Taker tx is OK!')\r\n\r\n          flow.finishStep({\r\n            takerTxHash: txHash,\r\n            isTakerTxPended: true, // todo later\r\n          }, { step: 'wait-taker-tx' })\r\n        })\r\n      },\r\n\r\n\r\n      async () => {\r\n        console.log(`Maker Step 4: 'send-maker-tx'`)\r\n        console.log('this.swap =', swap)\r\n\r\n        // send tx\r\n        \r\n        const amount = swap.sellAmount\r\n        const to = swap.participant[swap.sellCurrency.toLowerCase()].address\r\n\r\n        console.log(`Send ${amount} ${swap.sellCurrency} to taker address \"${to}\"...`)\r\n\r\n        let usedSwap\r\n        if (mySwap._swapName === swap.sellCurrency.toUpperCase()) {\r\n          usedSwap = mySwap\r\n        }\r\n        if (participantSwap._swapName === swap.sellCurrency.toUpperCase()) {\r\n          usedSwap = participantSwap\r\n        }\r\n        if (!usedSwap) {\r\n          throw new Error(`No swap for ${swap.sellCurrency}`)\r\n        } else {\r\n          console.log('Swap found!', usedSwap)\r\n        }\r\n\r\n        const txHash = await usedSwap.sendTransaction({ to, amount })\r\n\r\n        console.log(`Sended! txHash = ${txHash}`)\r\n\r\n        room.sendMessage({\r\n          event: 'maker tx sended',\r\n          data: {\r\n            txHash,\r\n          }\r\n        })\r\n\r\n        flow.finishStep({\r\n          makerTxHash: txHash,\r\n          isMakerTxPended: true, // todo later\r\n        }, 'send-maker-tx')\r\n      },\r\n\r\n\r\n      () => {\r\n        console.log(`Maker Step 5: 'finish'`)\r\n        /*room.once('swap finished', ({btcSwapWithdrawTransactionHash}) => {\r\n          flow.setState({\r\n            btcSwapWithdrawTransactionHash,\r\n          })\r\n        })\r\n\r\n        room.sendMessage({\r\n          event: 'request swap finished',\r\n        })\r\n        */\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, 'finish')\r\n      },\r\n\r\n\r\n      () => {\r\n        console.log(`Maker Step 6: 'end'`)\r\n        // Finished!\r\n      }\r\n    ]\r\n  }\r\n\r\n  stopSwapProcess() {\r\n    const flow = this\r\n\r\n    debug('swap.core:flow')('Swap was stopped')\r\n\r\n    flow.setState({\r\n      isStoppedSwap: true,\r\n    }, true)\r\n  }\r\n\r\n}\r\n"]}]}