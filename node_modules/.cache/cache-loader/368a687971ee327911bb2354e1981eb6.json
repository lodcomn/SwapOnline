{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\EthSwap.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\EthSwap.ts","mtime":1614851198878},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.swaps/EthSwap.ts"],"names":["_debug","constants","SwapInterface","util","BigNumber","InputDataDecoder","debug","EthSwap","options","transactionHash","app","env","getWeb3","eth","getTransaction","then","txResult","bytes32","decoder","decodeData","input","utils","bytesToHex","inputs","split","err","message","fetchBalance","Error","address","Array","isArray","abi","estimateGasPrice","console","warn","_swapName","COINS","gasLimit","gasPrice","sendTransaction","web3","contract","Contract","updateGasPrice","speed","data","handleTransactionHash","targetWallet","participantAddress","hasTargetWallet","createSwapTarget","createSwap","methodName","args","_params","methods","Promise","resolve","reject","params","from","getMyEthAddress","gas","estimateGas","gasAmount","send","on","hash","receipt","secretHash","amount","amountWei","toWei","toString","replace","value","values","ownerAddress","getBalance","call","swaps","swap","balance","parseInt","expectedValue","expectedHash","helpers","repeatAsyncUntilResult","_secretHash","expectedValueWei","multipliedBy","isGreaterThan","_allSwapEvents","getPastEvents","fromBlock","toBlock","allSwapEvents","events","allEvents","event","push","error","fetchSwapEvents","swapEvents","filter","returnValues","create","close","rest","length","findSwap","wasClosed","status","getTargetWallet","log","getTargetWalletPromise","calcWithdrawOtherGas","secret","withdrawOther","_secret","gasFee","getSecret","test","flow","abClass","participant","buyAmount","sellAmount","waitConfirm","state","swapData","getParticipantEthAddress","destinationSellAddress","tryCreateSwap","isEthContractFunded","_checkSwapAlreadyExists","swapExists","ethSwap","refund","refundTx","room","sendMessage","ethSwapCreationTransactionHash","setState","canCreateEthTransaction","isFailedTransaction","isFailedTransactionError","isStoppedSwap","finishStep","step","once","ethSwapWithdrawTransactionHash","extractSecretFromTx","swapFlow","secretFromTxhash","isEthWithdrawn","checkSecretExist","extractSecretFromContract","stopRepeat","isRefunded","secretFromContract","utxoCoin","scriptValues","utxoScriptValues","txHash","utxoScriptCreatingTransactionHash","isContractBalanceOk","checkBalance","balanceCheckError","dispatch","needTargetWallet","destinationBuyAddress","toLowerCase","needed","getted","onWithdrawReady","tryWithdraw","stopRepeater","withdrawFee","calcWithdrawGas","withdrawNeededGas","withdraw","requireWithdrawFee"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport _debug from 'debug'\r\nimport SwapApp, { constants, SwapInterface, util } from 'swap.app'\r\nimport BigNumber from 'bignumber.js'\r\nimport InputDataDecoder from 'ethereum-input-data-decoder'\r\nconst debug = _debug('swap.core:swaps')\r\n\r\nclass EthSwap extends SwapInterface {\r\n\r\n  address: string\r\n  abi: any[]\r\n  _swapName: string\r\n  gasLimit: number\r\n  gasPrice: number\r\n  fetchBalance: Function\r\n  estimateGasPrice: Function\r\n  sendTransaction: Function\r\n\r\n  app: any\r\n  decoder: any\r\n  contract: any\r\n  _allSwapEvents: any\r\n\r\n  /**\r\n   *\r\n   * @param {object}    options\r\n   * @param {string}    options.address\r\n   * @param {array}     options.abi\r\n   * @param {number}    options.gasLimit\r\n   * @param {function}  options.fetchBalance\r\n   */\r\n  constructor(options) {\r\n    super()\r\n\r\n    if (typeof options.fetchBalance !== 'function') {\r\n      throw new Error('EthSwap: \"fetchBalance\" required')\r\n    }\r\n    if (typeof options.address !== 'string') {\r\n      throw new Error('EthSwap: \"address\" required')\r\n    }\r\n    if (!Array.isArray(options.abi)) {\r\n      throw new Error('EthSwap: \"abi\" required')\r\n    }\r\n    if (typeof options.estimateGasPrice !== 'function') {\r\n      // ({ speed } = {}) => gasPrice\r\n      console.warn(`EthTokenSwap: \"estimateGasPrice\" is not a function. You will not be able use automatic mempool-based fee`)\r\n    }\r\n\r\n    this.address        = options.address\r\n    this.abi            = options.abi\r\n\r\n    this._swapName      = constants.COINS.eth\r\n    this.gasLimit       = options.gasLimit || 3e5\r\n    this.gasPrice       = options.gasPrice || 2e9\r\n    this.fetchBalance   = options.fetchBalance\r\n    this.estimateGasPrice = options.estimateGasPrice || (() => {})\r\n    this.sendTransaction = options.sendTransaction\r\n  }\r\n\r\n  _initSwap(app) {\r\n    super._initSwap(app)\r\n\r\n    this.app = app\r\n\r\n    this.decoder  = new InputDataDecoder(this.abi)\r\n\r\n    const web3 = this.app.env.getWeb3()\r\n\r\n    this.contract = new web3.eth.Contract(this.abi, this.address)\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   */\r\n  updateGas() {\r\n    console.warn(`EthSwap.updateGas() is deprecated and will be removed. Use .updateGasPrice()`)\r\n    //@\r\n    return updateGasPrice()\r\n  }\r\n\r\n  async updateGasPrice() {\r\n    debug('gas price before update', this.gasPrice)\r\n\r\n    try {\r\n      this.gasPrice = await this.estimateGasPrice({ speed: 'fast' })\r\n    } catch(err) {\r\n      debug(`EthSwap: Error with gas update: ${err.message}, using old value gasPrice=${this.gasPrice}`)\r\n    }\r\n\r\n    debug('gas price after update', this.gasPrice)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.participantAddress\r\n   * @param {string} data.targetWallet\r\n   * @param {number} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async create(data, handleTransactionHash) {\r\n    if (data.targetWallet && (data.targetWallet!==data.participantAddress) && this.hasTargetWallet()) {\r\n      return this.createSwapTarget(data, handleTransactionHash)\r\n    } else {\r\n      return this.createSwap(data, handleTransactionHash)\r\n    }\r\n  }\r\n\r\n  async send(methodName, args, _params = {}, handleTransactionHash) {\r\n    if (typeof this.contract.methods[methodName] !== 'function') {\r\n      throw new Error(`EthSwap.send: No method ${methodName} in contract`)\r\n    }\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      const params = {\r\n        from: this.app.getMyEthAddress(),\r\n        gas: this.gasLimit,\r\n        gasPrice: this.gasPrice,\r\n        ..._params,\r\n      }\r\n\r\n      debug(`EthSwap -> ${methodName} -> params`, params)\r\n\r\n      const gasAmount = await this.contract.methods[methodName](...args).estimateGas(params)\r\n\r\n      params.gas = gasAmount\r\n\r\n      debug(`EthSwap -> ${methodName} -> gas`, gasAmount)\r\n\r\n      const receipt = await this.contract.methods[methodName](...args).send(params)\r\n        .on('transactionHash', (hash) => {\r\n          if (typeof handleTransactionHash === 'function') {\r\n            handleTransactionHash(hash)\r\n          }\r\n        })\r\n        .on('error', (err) => {\r\n          reject(err)\r\n        })\r\n\r\n      resolve(receipt)\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.participantAddress\r\n   * @param {string} data.targetWallet\r\n   * @param {number} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async createSwap(data, handleTransactionHash) {\r\n    const { secretHash, participantAddress, amount } = data\r\n    const web3 = this.app.env.getWeb3()\r\n\r\n    const amountWei = web3.utils.toWei(amount.toString())\r\n\r\n    const hash = `0x${secretHash.replace(/^0x/, '')}`\r\n    const args = [ hash, participantAddress ]\r\n\r\n    return this.send('createSwap', [...args], { value: amountWei }, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.participantAddress\r\n   * @param {string} data.targetWallet\r\n   * @param {number} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async createSwapTarget(data, handleTransactionHash) {\r\n    const { secretHash, participantAddress, amount, targetWallet } = data\r\n\r\n    const web3 = this.app.env.getWeb3()\r\n\r\n    await this.updateGasPrice()\r\n\r\n    const amountWei = web3.utils.toWei(amount.toString())\r\n\r\n    const hash = `0x${secretHash.replace(/^0x/, '')}`\r\n\r\n    const values = [ hash, participantAddress, targetWallet ]\r\n\r\n    return this.send('createSwapTarget', [...values], { value: amountWei }, handleTransactionHash)\r\n  }\r\n  \r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @returns {Promise}\r\n   */\r\n  getBalance(data) {\r\n    const { ownerAddress } = data\r\n\r\n    return this.contract.methods.getBalance(ownerAddress).call({\r\n      from: this.app.getMyEthAddress(),\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  swaps(data) {\r\n    const { ownerAddress, participantAddress } = data\r\n\r\n    return this.contract.methods.swaps(ownerAddress, participantAddress).call()\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  async checkSwapExists(data) {\r\n    const swap = await this.swaps(data)\r\n\r\n    debug('swapExists', swap)\r\n\r\n    const balance = swap && swap.balance ? parseInt(swap.balance) : 0\r\n\r\n    return balance > 0\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.ownerAddress\r\n   * @param {BigNumber} data.expectedValue\r\n   * @returns {Promise.<string>}\r\n   */\r\n  async checkBalance(data) {\r\n    const { ownerAddress, participantAddress, expectedValue, expectedHash } = data\r\n\r\n    const balance = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.getBalance({ ownerAddress })\r\n    )\r\n    const swap = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.contract.methods.swaps(ownerAddress, participantAddress).call()\r\n    )\r\n    //@\r\n    const { secretHash } = swap\r\n    debug(`swap.secretHash`, secretHash)\r\n\r\n    const _secretHash = `${secretHash.replace(/^0x/, '')}`\r\n\r\n    debug(`secretHash: expected hash = ${expectedHash}, contract hash = ${_secretHash}`)\r\n\r\n    if (expectedHash !== _secretHash) {\r\n      return `Expected hash: ${expectedHash}, got: ${_secretHash}`\r\n    }\r\n\r\n    const expectedValueWei = new BigNumber(expectedValue).multipliedBy(1e18)\r\n    //@\r\n    if (expectedValueWei.isGreaterThan(balance)) {\r\n      return `Expected value: ${expectedValueWei.toString()}, got: ${balance}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  async fetchSwapEvents() {\r\n    if (this._allSwapEvents) return this._allSwapEvents\r\n\r\n    const allSwapEvents = await this.contract.getPastEvents('allEvents', {\r\n      fromBlock: 0,\r\n      toBlock: 'latest',\r\n    })\r\n\r\n    this.contract.events.allEvents({ fromBlock: 0, toBlock: 'latest' })\r\n      .on('data', event => {\r\n        this._allSwapEvents.push(event)\r\n      })\r\n      .on('changed', (event) => {\r\n        console.error(`EthSwap: fetchEvents: needs rescan`)\r\n        this._allSwapEvents = null\r\n      })\r\n      .on('error', err => {\r\n        console.error(err)\r\n        this._allSwapEvents = null\r\n      })\r\n\r\n    this._allSwapEvents = allSwapEvents\r\n\r\n    return allSwapEvents\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @returns {Promise}\r\n   */\r\n  async findSwap(data) {\r\n    const { secretHash } = data\r\n\r\n    const allSwapEvents = await this.fetchSwapEvents()\r\n\r\n    const swapEvents = allSwapEvents\r\n      .filter(({ returnValues }) => returnValues._secretHash === `0x${secretHash.replace('0x','')}`)\r\n\r\n    const [ create, close, ...rest ] = swapEvents\r\n\r\n    if (rest && rest.length) {\r\n      console.error(`More than two swaps with same hash`, rest)\r\n      // throw new Error(`More than two swaps with same hash`)\r\n    }\r\n\r\n    return [ create, close ]\r\n  }\r\n\r\n  /**\r\n    *\r\n    * @param {object} data\r\n    * @param {string} data.secretHash\r\n    * @returns {Promise(status)}\r\n    */\r\n\r\n  async wasClosed(data) {\r\n    const [ create, close ] = await this.findSwap(data)\r\n\r\n    if (!create) {\r\n      debug(`No swap with hash ${data.secretHash}`)\r\n      return 'no swap'\r\n    } else if (create && !close) {\r\n      debug(`Open yet!`)\r\n      return 'open'\r\n    } else {\r\n      if (close.event == 'Withdraw') {\r\n        debug(`Withdrawn`)\r\n        return 'withdrawn'\r\n      } else if (close.event == 'Refund') {\r\n        debug(`Refund`)\r\n        return 'refunded'\r\n      } else {\r\n        debug(`Unknown event, error`)\r\n        return 'error'\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @returns {Promise(boolean)}\r\n   */\r\n  wasRefunded(data) {\r\n    return this.wasClosed(data)\r\n      .then((status) =>\r\n        status === 'refunded'\r\n      )\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @returns {Promise(boolean)}\r\n   */\r\n  async wasWithdrawn(data) {\r\n    const status = await this.wasClosed(data)\r\n    return status === 'withdrawn'\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  hasTargetWallet() {\r\n    return !!this.contract.methods.getTargetWallet\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} ownerAddress\r\n   * @returns {Promise.<string>}\r\n   */\r\n  async getTargetWallet(ownerAddress: string): Promise<string> {\r\n    console.log('EthSwap->getTargetWallet');\r\n    let address: any = await util.helpers.repeatAsyncUntilResult(() =>\r\n      this.getTargetWalletPromise(ownerAddress)\r\n    )\r\n    return address\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} ownerAddress\r\n   * @param {number} repeatCount\r\n   * @returns {string}\r\n   */\r\n  async getTargetWalletPromise(ownerAddress: string): Promise<string> {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const targetWallet = await this.contract.methods.getTargetWallet(ownerAddress).call({\r\n          from: this.app.getMyEthAddress(),\r\n        })\r\n\r\n        resolve(targetWallet)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.ownerAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async calcWithdrawGas(data) {\r\n    return this.calcWithdrawOtherGas({\r\n      ownerAddress: data.ownerAddress,\r\n      participantAddress: this.app.getMyEthAddress(),\r\n      secret: data.secret,\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.ownerAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async withdraw(data, handleTransactionHash) {\r\n    return this.withdrawOther({\r\n      ownerAddress: data.ownerAddress,\r\n      participantAddress: this.app.getMyEthAddress(),\r\n      secret: data.secret,\r\n    }, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  async calcWithdrawNoMoneyGas(data) {\r\n    return this.calcWithdrawOtherGas({\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: data.participantAddress,\r\n      secret: data.secret,\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.participantAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async withdrawNoMoney(data, handleTransactionHash) {\r\n    return this.withdrawOther({\r\n      ownerAddress: this.app.getMyEthAddress(),\r\n      participantAddress: data.participantAddress,\r\n      secret: data.secret,\r\n    }, handleTransactionHash)\r\n  }\r\n\r\n  async calcWithdrawOtherGas(data) {\r\n    const { ownerAddress, participantAddress, secret } = data\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      const _secret = `0x${secret.replace(/^0x/, '')}`\r\n\r\n      const params = {\r\n        from: this.app.getMyEthAddress(),\r\n        gas: this.gasLimit,\r\n        gasPrice: this.gasPrice,\r\n      }\r\n\r\n      try {\r\n        const gasFee = await this.contract.methods.withdrawOther(_secret, ownerAddress, participantAddress).estimateGas(params);\r\n        resolve(gasFee)\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secret\r\n   * @param {string} data.ownerAddress\r\n   * @param {string} data.participantAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async withdrawOther(data, handleTransactionHash) {\r\n    const { ownerAddress, participantAddress, secret } = data\r\n\r\n    const _secret = `0x${secret.replace(/^0x/, '')}`\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return this.send('withdrawOther', [ _secret, ownerAddress, participantAddress ], {}, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.participantAddress\r\n   * @param {function} handleTransactionHash\r\n   * @returns {Promise}\r\n   */\r\n  async refund(data, handleTransactionHash: Function = null) {\r\n    const { participantAddress } = data\r\n\r\n    await this.updateGasPrice()\r\n\r\n    return this.send('refund', [ participantAddress ], {}, handleTransactionHash)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.participantAddress\r\n   * @returns {Promise}\r\n   */\r\n  getSecret(data) {\r\n    const { participantAddress } = data\r\n\r\n    return this.contract.methods.getSecret(participantAddress).call({\r\n      from: this.app.getMyEthAddress(),\r\n    })\r\n      .then((secret) => {\r\n        debug('secret ethswap.js', secret)\r\n        return secret && !/^0x0+$/.test(secret) ? secret : null\r\n      })\r\n      .catch((error) => error)\r\n  }\r\n\r\n/*\r\n  Function: withdraw(bytes32 _secret, address _ownerAddress)\r\n  bytes32 {...}\r\n  inputs: (2) […]\r\n    0: Uint8Array(32) [ 208, 202, 170, … ]\r\n    1: \"e918c8719bae0525786548b8da7fbef9b33d4e25\"\r\n  name: \"withdraw\"\r\n  types: (2) […]\r\n    0: \"bytes32\"\r\n    1: \"address\"\r\n*/\r\n\r\n  /**\r\n   *\r\n   * @param {string} transactionHash\r\n   * @returns {Promise<any>}\r\n   */\r\n  getSecretFromTxhash = (transactionHash) =>\r\n    this.app.env.getWeb3().eth.getTransaction(transactionHash)\r\n      .then(txResult => {\r\n        try {\r\n          const bytes32 = this.decoder.decodeData(txResult.input)\r\n          return this.app.env.getWeb3().utils.bytesToHex(bytes32.inputs[0]).split('0x')[1]\r\n        } catch (err) {\r\n          debug('Trying to fetch secret from tx: ' + err.message)\r\n          return\r\n        }\r\n      })\r\n\r\n  async fundContract({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const abClass = this\r\n    const {\r\n      participant,\r\n      buyAmount,\r\n      sellAmount,\r\n      waitConfirm,\r\n    } = flow.swap\r\n\r\n    const { secretHash } = flow.state\r\n\r\n    const swapData = {\r\n      participantAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n      secretHash: secretHash,\r\n      amount: sellAmount,\r\n      targetWallet: flow.swap.destinationSellAddress\r\n    }\r\n\r\n    const tryCreateSwap = async () => {\r\n      const { isEthContractFunded } = flow.state\r\n\r\n      if (!isEthContractFunded) {\r\n        try {\r\n          _debug('swap.core:flow')('check swap exists')\r\n          const swapExists = await flow._checkSwapAlreadyExists()\r\n          if (swapExists) {\r\n            console.warn('Swap exists!! May be stucked. Try refund')\r\n            await flow.ethSwap.refund({\r\n              participantAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n            }, (refundTx) => {\r\n              _debug('swap.core:flow')('Stucked swap refunded', refundTx)\r\n            })\r\n          }\r\n          _debug('swap.core:flow')('create swap', swapData)\r\n          await abClass.create(swapData, (hash) => {\r\n            _debug('swap.core:flow')('create swap tx hash', hash)\r\n            flow.swap.room.sendMessage({\r\n              event: 'create eth contract',\r\n              data: {\r\n                ethSwapCreationTransactionHash: hash,\r\n              },\r\n            })\r\n\r\n            flow.setState({\r\n              ethSwapCreationTransactionHash: hash,\r\n              canCreateEthTransaction: true,\r\n              isFailedTransaction: false,\r\n            }, true)\r\n          })\r\n        } catch (err) {\r\n          if (flow.state.ethSwapCreationTransactionHash) {\r\n            console.error('fail create swap, but tx already exists')\r\n            flow.setState({\r\n              canCreateEthTransaction: true,\r\n              isFailedTransaction: false,\r\n            }, true)\r\n            return true\r\n          }\r\n          if ( /known transaction/.test(err.message) ) {\r\n            console.error(`known tx: ${err.message}`)\r\n          } else if ( /out of gas/.test(err.message) ) {\r\n            console.error(`tx failed (wrong secret?): ${err.message}`)\r\n          } else {\r\n            console.error(err)\r\n          }\r\n\r\n          flow.setState({\r\n            canCreateEthTransaction: false,\r\n            isFailedTransaction: true,\r\n            isFailedTransactionError: err.message,\r\n          }, true)\r\n\r\n          return null\r\n        }\r\n      }\r\n      return true\r\n    }\r\n\r\n    const isEthContractFunded = await util.helpers.repeatAsyncUntilResult(() =>\r\n      tryCreateSwap(),\r\n    )\r\n\r\n    const { isStoppedSwap } = flow.state\r\n\r\n    if (isEthContractFunded && !isStoppedSwap) {\r\n      _debug('swap.core:flow')(`finish step`)\r\n      flow.finishStep({\r\n        isEthContractFunded,\r\n      }, {step: 'lock-eth'})\r\n    }\r\n  }\r\n\r\n\r\n  async getSecretFromAB2UTXO({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const abClass = this\r\n\r\n    flow.swap.room.once('ethWithdrawTxHash', async ({ethSwapWithdrawTransactionHash}) => {\r\n      flow.setState({\r\n        ethSwapWithdrawTransactionHash,\r\n      }, true)\r\n\r\n      const secretFromTxhash = await util.helpers.extractSecretFromTx({\r\n        flow,\r\n        swapFlow: abClass,\r\n        app: abClass.app,\r\n        ethSwapWithdrawTransactionHash,\r\n      })\r\n\r\n      const { isEthWithdrawn } = flow.state\r\n\r\n      if (!isEthWithdrawn && secretFromTxhash) {\r\n        _debug('swap.core:flow')('got secret from tx', ethSwapWithdrawTransactionHash, secretFromTxhash)\r\n        flow.finishStep({\r\n          isEthWithdrawn: true,\r\n          secret: secretFromTxhash,\r\n        }, {step: 'wait-withdraw-eth'})\r\n      }\r\n    })\r\n\r\n    flow.swap.room.sendMessage({\r\n      event: 'request ethWithdrawTxHash',\r\n    })\r\n\r\n    const { participant } = flow.swap\r\n\r\n    const checkSecretExist = async () => {\r\n      return await util.helpers.extractSecretFromContract({\r\n        flow,\r\n        swapFlow: abClass,\r\n        participantAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n        ownerAddress: flow.app.getMyEthAddress(),\r\n        app: abClass.app,\r\n      })\r\n    }\r\n\r\n    const secretFromContract = await util.helpers.repeatAsyncUntilResult((stopRepeat) => {\r\n      const { isEthWithdrawn, isRefunded } = flow.state\r\n\r\n      if (isEthWithdrawn || isRefunded) {\r\n        stopRepeat()\r\n\r\n        return false\r\n      }\r\n\r\n      return checkSecretExist()\r\n    })\r\n\r\n    const { isEthWithdrawn } = flow.state\r\n\r\n    if (secretFromContract && !isEthWithdrawn) {\r\n      _debug('swap.core:flow')('got secret from smart contract', secretFromContract)\r\n\r\n      flow.finishStep({\r\n        isEthWithdrawn: true,\r\n        secret: secretFromContract,\r\n      }, { step: 'wait-withdraw-eth' })\r\n    }\r\n  }\r\n\r\n  async waitABContract({\r\n    flow,\r\n    utxoCoin,\r\n  }: {\r\n    flow: any,\r\n    utxoCoin: string,\r\n  }) {\r\n    const abClass = this\r\n\r\n    flow.swap.room.sendMessage({\r\n      event: 'request eth contract',\r\n    })\r\n\r\n    flow.swap.room.once(`request ${utxoCoin} script`, () => {\r\n      const {\r\n        utxoScriptValues: scriptValues,\r\n        utxoScriptCreatingTransactionHash: txHash,\r\n      } = flow.state\r\n\r\n      flow.swap.room.sendMessage({\r\n        event:  `create ${utxoCoin} script`,\r\n        data: {\r\n          scriptValues,\r\n          utxoScriptCreatingTransactionHash: txHash,\r\n        }\r\n      })\r\n    })\r\n\r\n    const { participant } = flow.swap\r\n\r\n    flow.swap.room.on('create eth contract', ({ ethSwapCreationTransactionHash }) => {\r\n      flow.setState({\r\n        ethSwapCreationTransactionHash,\r\n      }, true)\r\n    })\r\n\r\n    const isContractBalanceOk = await util.helpers.repeatAsyncUntilResult(async () => {\r\n      const balance = await flow.ethSwap.getBalance({\r\n        ownerAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n      })\r\n\r\n      _debug('swap.core:flow')('Checking contract balance:', balance)\r\n\r\n      if (balance > 0) {\r\n        return true\r\n      }\r\n\r\n      return false\r\n    })\r\n\r\n    if (isContractBalanceOk) {\r\n      const { isEthContractFunded } = flow.state\r\n\r\n      // @ToDo - нужно проверить сценарий, если был прерван свап\r\n      // Мы остались на этом шаге, но при этом isEthContractFunded = true\r\n      // Застрянет ли свап на этом шаге (#5)\r\n      // Или нужно принудительно перевести на следующий шаг\r\n      if (!isEthContractFunded) {\r\n        flow.finishStep({\r\n          isEthContractFunded: true,\r\n        }, { step: 'wait-lock-eth' })\r\n      }\r\n    }\r\n  }\r\n\r\n  async withdrawFromABContract({\r\n    flow,\r\n  }: {\r\n    flow: any,\r\n  }) {\r\n    const abClass = this\r\n    const { buyAmount, participant } = flow.swap\r\n    const { secretHash, secret } = flow.state\r\n\r\n    const data = {\r\n      ownerAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n      secret,\r\n    }\r\n\r\n    const balanceCheckError = await abClass.checkBalance({\r\n      ownerAddress: abClass.app.getParticipantEthAddress(flow.swap),\r\n      participantAddress: abClass.app.getMyEthAddress(),\r\n      expectedValue: buyAmount,\r\n      expectedHash: secretHash,\r\n    })\r\n\r\n    if (balanceCheckError) {\r\n      console.error('Waiting until deposit: ETH balance check error:', balanceCheckError)\r\n      flow.swap.events.dispatch('eth balance check error', balanceCheckError)\r\n\r\n      return\r\n    }\r\n\r\n    if (flow.ethSwap.hasTargetWallet()) {\r\n      const targetWallet = await abClass.getTargetWallet(\r\n        abClass.app.getParticipantEthAddress(flow.swap)\r\n      )\r\n      const needTargetWallet = (flow.swap.destinationBuyAddress)\r\n        ? flow.swap.destinationBuyAddress\r\n        : abClass.app.getMyEthAddress()\r\n\r\n      if (targetWallet.toLowerCase() !== needTargetWallet.toLowerCase()) {\r\n        console.error(\r\n          'Destination address for ether dismatch with needed (Needed, Getted). Stop swap now!',\r\n          needTargetWallet,\r\n          targetWallet,\r\n        )\r\n        flow.swap.events.dispatch('address for ether invalid', {\r\n          needed: needTargetWallet,\r\n          getted: targetWallet,\r\n        })\r\n\r\n        return\r\n      }\r\n    }\r\n\r\n    const onWithdrawReady = () => {\r\n      flow.swap.room.once('request ethWithdrawTxHash', () => {\r\n        const { ethSwapWithdrawTransactionHash } = flow.state\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'ethWithdrawTxHash',\r\n          data: {\r\n            ethSwapWithdrawTransactionHash,\r\n          },\r\n        })\r\n      })\r\n\r\n      const { step } = flow.state\r\n\r\n      if (step >= 7) {\r\n        return\r\n      }\r\n\r\n      flow.finishStep({\r\n        isEthWithdrawn: true,\r\n      }, 'withdraw-eth')\r\n    }\r\n\r\n    const tryWithdraw = async (stopRepeater) => {\r\n      const { isEthWithdrawn } = flow.state\r\n\r\n      if (!isEthWithdrawn) {\r\n        try {\r\n          const { withdrawFee } = flow.state\r\n\r\n          if (!withdrawFee) {\r\n            const withdrawNeededGas = await abClass.calcWithdrawGas({\r\n              ownerAddress: data.ownerAddress,\r\n              secret,\r\n            })\r\n            flow.setState({\r\n              withdrawFee: withdrawNeededGas,\r\n            })\r\n            _debug('swap.core:flow')('withdraw gas fee', withdrawNeededGas)\r\n          }\r\n\r\n          await abClass.withdraw(data, (hash) => {\r\n            flow.setState({\r\n              isEthWithdrawn: true,\r\n              ethSwapWithdrawTransactionHash: hash,\r\n              canCreateEthTransaction: true,\r\n              requireWithdrawFee: false,\r\n            }, true)\r\n\r\n            flow.swap.room.sendMessage({\r\n              event: 'ethWithdrawTxHash',\r\n              data: {\r\n                ethSwapWithdrawTransactionHash: hash,\r\n              }\r\n            })\r\n          })\r\n\r\n          stopRepeater()\r\n          return true\r\n        } catch (err) {\r\n          if ( /known transaction/.test(err.message) ) {\r\n            console.error(`known tx: ${err.message}`)\r\n            stopRepeater()\r\n            return true\r\n          } else if ( /out of gas/.test(err.message) ) {\r\n            console.error(`tx failed (wrong secret?): ${err.message}`)\r\n          } else if ( /insufficient funds for gas/.test(err.message) ) {\r\n            console.error(`insufficient fund for gas: ${err.message}`)\r\n\r\n            _debug('swap.core:flow')('insufficient fund for gas... wait fund or request other side to withdraw')\r\n\r\n            const { requireWithdrawFee } = flow.state\r\n\r\n            if (!requireWithdrawFee) {\r\n              flow.swap.room.once('withdraw ready', ({ethSwapWithdrawTransactionHash}) => {\r\n                flow.setState({\r\n                  ethSwapWithdrawTransactionHash,\r\n                })\r\n\r\n                onWithdrawReady()\r\n              })\r\n\r\n              flow.setState({\r\n                requireWithdrawFee: true,\r\n              })\r\n            }\r\n\r\n          } else {\r\n            console.error(err)\r\n          }\r\n\r\n          flow.setState({\r\n            canCreateEthTransaction: false,\r\n          })\r\n\r\n          return null\r\n        }\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    const isEthWithdrawn = await util.helpers.repeatAsyncUntilResult((stopRepeater) =>\r\n      tryWithdraw(stopRepeater),\r\n    )\r\n\r\n    if (isEthWithdrawn) {\r\n      onWithdrawReady()\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default EthSwap\r\n"]}]}