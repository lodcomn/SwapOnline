{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\messaging\\pubsubRoom\\direct-connection-handler.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\messaging\\pubsubRoom\\direct-connection-handler.ts","mtime":1614842913717},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:J3VzZSBzdHJpY3QnOwoKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfYXN5bmNJdGVyYXRvciBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jSXRlcmF0b3IiOwppbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICJAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciI7CmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJzsKaW1wb3J0IHBpcGUgZnJvbSAnaXQtcGlwZSc7CnZhciBlbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpOwoKZnVuY3Rpb24gaGFuZGxlcihfcmVmKSB7CiAgdmFyIGNvbm5lY3Rpb24gPSBfcmVmLmNvbm5lY3Rpb24sCiAgICAgIHN0cmVhbSA9IF9yZWYuc3RyZWFtOwogIHZhciBwZWVySWQgPSBjb25uZWN0aW9uLnJlbW90ZVBlZXIudG9CNThTdHJpbmcoKTsKICBwaXBlKHN0cmVhbSwgLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoc291cmNlKSB7CiAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uLCBfZGlkSXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yRXJyb3IsIF9sb29wLCBfaXRlcmF0b3IsIF9zdGVwLCBfdmFsdWUsIF9yZXQ7CgogICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlOwogICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI7CgogICAgICAgICAgICAgIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoKSB7CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IF92YWx1ZTsKICAgICAgICAgICAgICAgIHZhciBtc2cgPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgbXNnID0gSlNPTi5wYXJzZShtZXNzYWdlLnRvU3RyaW5nKCkpOwogICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgICAgICAgIGVtaXR0ZXIuZW1pdCgnd2FybmluZycsIGVyci5tZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgcmV0dXJuICJjb250aW51ZSI7IC8vIGVhcmx5CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHBlZXJJZCAhPT0gbXNnLmZyb20uaWQpIHsKICAgICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KCd3YXJuaW5nJywgJ25vIHBlZXJpZCBtYXRjaCAnICsgbXNnLmZyb20pOwogICAgICAgICAgICAgICAgICByZXR1cm4gImNvbnRpbnVlIjsgLy8gZWFybHkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgdG9waWNJRHMgPSBtc2cudG9waWNJRHM7CgogICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRvcGljSURzKSkgewogICAgICAgICAgICAgICAgICBlbWl0dGVyLmVtaXQoJ3dhcm5pbmcnLCAnbm8gdG9waWMgSURzJyk7CiAgICAgICAgICAgICAgICAgIHJldHVybiAiY29udGludWUiOyAvLyBlYXJseQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG1zZy5kYXRhID0gQnVmZmVyLmZyb20obXNnLmRhdGEsICdoZXgnKTsKICAgICAgICAgICAgICAgIG1zZy5zZXFubyA9IEJ1ZmZlci5mcm9tKG1zZy5zZXFubywgJ2hleCcpOwogICAgICAgICAgICAgICAgdG9waWNJRHMuZm9yRWFjaChmdW5jdGlvbiAodG9waWMpIHsKICAgICAgICAgICAgICAgICAgZW1pdHRlci5lbWl0KHRvcGljLCBtc2cpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgX2l0ZXJhdG9yID0gX2FzeW5jSXRlcmF0b3Ioc291cmNlKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICByZXR1cm4gX2l0ZXJhdG9yLm5leHQoKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfc3RlcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IF9zdGVwLmRvbmU7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICAgIHJldHVybiBfc3RlcC52YWx1ZTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgX3ZhbHVlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24pIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX3JldCA9IF9sb29wKCk7CgogICAgICAgICAgICAgIGlmICghKF9yZXQgPT09ICJjb250aW51ZSIpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoImNvbnRpbnVlIiwgMTYpOwoKICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI1OwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjE7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7CiAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDsKCiAgICAgICAgICAgIGNhc2UgMjU6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI1OwogICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyNjsKCiAgICAgICAgICAgICAgaWYgKCEoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yWyJyZXR1cm4iXSAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMwOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzA7CiAgICAgICAgICAgICAgcmV0dXJuIF9pdGVyYXRvclsicmV0dXJuIl0oKTsKCiAgICAgICAgICAgIGNhc2UgMzA6CiAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDMwOwoKICAgICAgICAgICAgICBpZiAoIV9kaWRJdGVyYXRvckVycm9yKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzM7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yOwoKICAgICAgICAgICAgY2FzZSAzMzoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDMwKTsKCiAgICAgICAgICAgIGNhc2UgMzQ6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgyNSk7CgogICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzIsIDIxLCAyNSwgMzVdLCBbMjYsLCAzMCwgMzRdXSk7CiAgICB9KSk7CgogICAgcmV0dXJuIGZ1bmN0aW9uIChfeCkgewogICAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CiAgfSgpKTsKfQoKZXhwb3J0IGRlZmF1bHQgewogIGhhbmRsZXI6IGhhbmRsZXIsCiAgZW1pdHRlcjogZW1pdHRlcgp9Ow=="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/messaging/pubsubRoom/direct-connection-handler.ts"],"names":["EventEmitter","pipe","emitter","handler","connection","stream","peerId","remotePeer","toB58String","source","message","msg","JSON","parse","toString","err","emit","from","id","topicIDs","Array","isArray","data","Buffer","seqno","forEach","topic"],"mappings":"AAAA;;;;;AAEA,OAAOA,YAAP,MAAyB,QAAzB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,IAAMC,OAAO,GAAG,IAAIF,YAAJ,EAAhB;;AAEA,SAASG,OAAT,OAA0C;AAAA,MAAtBC,UAAsB,QAAtBA,UAAsB;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACxC,MAAMC,MAAM,GAAGF,UAAU,CAACG,UAAX,CAAsBC,WAAtB,EAAf;AAEAP,EAAAA,IAAI,CACFI,MADE;AAAA,yEAEF,iBAAgBI,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,oBACmBC,OADnB;AAEI,oBAAIC,GAAG,SAAP;;AAEA,oBAAI;AACFA,kBAAAA,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,CAACI,QAAR,EAAX,CAAN;AACD,iBAFD,CAEE,OAAOC,GAAP,EAAY;AACZb,kBAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwBD,GAAG,CAACL,OAA5B;AACA,oCAFY,CAEH;AACV;;AAED,oBAAIJ,MAAM,KAAKK,GAAG,CAACM,IAAJ,CAASC,EAAxB,EAA4B;AAC1BhB,kBAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,qBAAqBL,GAAG,CAACM,IAAjD;AACA,oCAF0B,CAEjB;AACV;;AAED,oBAAME,QAAQ,GAAGR,GAAG,CAACQ,QAArB;;AACA,oBAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAL,EAA8B;AAC5BjB,kBAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,cAAxB;AACA,oCAF4B,CAEnB;AACV;;AAEDL,gBAAAA,GAAG,CAACW,IAAJ,GAAWC,MAAM,CAACN,IAAP,CAAYN,GAAG,CAACW,IAAhB,EAAsB,KAAtB,CAAX;AACAX,gBAAAA,GAAG,CAACa,KAAJ,GAAYD,MAAM,CAACN,IAAP,CAAYN,GAAG,CAACa,KAAhB,EAAuB,KAAvB,CAAZ;AAEAL,gBAAAA,QAAQ,CAACM,OAAT,CAAiB,UAACC,KAAD,EAAW;AAC1BxB,kBAAAA,OAAO,CAACc,IAAR,CAAaU,KAAb,EAAoBf,GAApB;AACD,iBAFD;AAzBJ;;AAAA,yCAC8BF,MAD9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFE;;AAAA;AAAA;AAAA;AAAA,MAAJ;AAiCD;;AAED,eAAe;AACbN,EAAAA,OAAO,EAAEA,OADI;AAEbD,EAAAA,OAAO,EAAEA;AAFI,CAAf","sourcesContent":["'use strict'\r\nimport debug from 'debug'\r\nimport EventEmitter from 'events'\r\nimport pipe from 'it-pipe'\r\n\r\nconst emitter = new EventEmitter()\r\n\r\nfunction handler ({ connection, stream }) {\r\n  const peerId = connection.remotePeer.toB58String()\r\n\r\n  pipe(\r\n    stream,\r\n    async function (source) {\r\n      for await (const message of source) {\r\n        let msg\r\n\r\n        try {\r\n          msg = JSON.parse(message.toString())\r\n        } catch (err) {\r\n          emitter.emit('warning', err.message)\r\n          continue // early\r\n        }\r\n\r\n        if (peerId !== msg.from.id) {\r\n          emitter.emit('warning', 'no peerid match ' + msg.from)\r\n          continue // early\r\n        }\r\n\r\n        const topicIDs = msg.topicIDs\r\n        if (!Array.isArray(topicIDs)) {\r\n          emitter.emit('warning', 'no topic IDs')\r\n          continue // early\r\n        }\r\n\r\n        msg.data = Buffer.from(msg.data, 'hex')\r\n        msg.seqno = Buffer.from(msg.seqno, 'hex')\r\n\r\n        topicIDs.forEach((topic) => {\r\n          emitter.emit(topic, msg)\r\n        })\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nexport default {\r\n  handler: handler,\r\n  emitter: emitter\r\n}\r\n"]}]}