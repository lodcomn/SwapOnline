{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\GhostSwap.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.swaps\\GhostSwap.ts","mtime":1614850195477},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.swaps/GhostSwap.ts"],"names":["debug","SwapInterface","constants","util","BigNumber","bitcore","PrivateKey","BufferUtil","buffer","GhostSwap","options","fetchBalance","Error","fetchUnspents","broadcastTx","fetchTxInfo","console","warn","estimateFeeValue","_swapName","COINS","ghost","checkWithdraw","feeValue","app","network","services","auth","accounts","inSatoshis","size","speed","address","method","txSize","estimatedFee","dividedBy","dp","ROUND_UP","unspents","expectedConfidenceLevel","feesToConfidence","fees","getTxFee","currentFastestFee","isLessThan","toNumber","confirmationsToConfidence","confs","fetchConfidence","txid","confirmations","confidenceFromConfirmations","isGreaterThanOrEqualTo","info","senderAddress","error","message","Promise","all","map","confidences","filter","utxo","index","data","inputIndex","script","tx","secret","hashType","env","bitcoin","Transaction","SIGHASH_ALL","isMainNet","Networks","mainnet","testnet","inputs","sequenceNumber","privateKey","getPrivateKey","signature","Sighash","sign","sigBuffer","concat","toDER","integerAsSingleByteBuffer","payment","payments","p2sh","redeem","p2wsh","output","input","compile","getPublicKeyBuffer","Buffer","from","replace","setWitnesses","witness","hashName","hashOpcodeName","toUpperCase","hashOpcode","opcodes","secretHash","ownerPublicKey","recipientPublicKey","lockTime","OP_SIZE","OP_EQUALVERIFY","OP_EQUAL","OP_IF","OP_ELSE","number","encode","OP_CHECKLOCKTIMEVERIFY","OP_DROP","OP_ENDIF","OP_CHECKSIG","scriptData","scriptAddress","expected","createScript","expectedConfidence","confidence","expectedValue","value","multipliedBy","integerValue","totalUnspent","reduce","summ","satoshis","filterConfidentUnspents","confidentUnspents","totalConfidentUnspent","isGreaterThan","toString","handleTransactionHash","scriptValues","amount","resolve","reject","ownerAddress","getAddress","fundValue","feeValueBN","skipValue","transaction","to","change","toObject","String","serialize","result","length","isRefund","destinationAddress","destAddress","hasWithdraw","toLowerCase","txId","alreadyWithdrawed","lockUntilDate","_","_signTransaction","txHex","hash","getWithdrawRawTransaction","txRaw","getRefundRawTransaction","helpers","waitDelay","checkTX","txSuccess","res","test","text","errorMessage","txID","txInfo","withdraw"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport debug from 'debug'\r\nimport SwapApp, { SwapInterface, constants, util } from 'swap.app'\r\nimport BigNumber from 'bignumber.js'\r\nimport bitcore from 'ghost-bitcore-lib'\r\nconst PrivateKey = bitcore.PrivateKey;\r\nconst BufferUtil = bitcore.util.buffer;\r\n\r\nclass GhostSwap extends SwapInterface {\r\n\r\n  _swapName: string\r\n  fetchBalance: any\r\n  fetchUnspents: any\r\n  broadcastTx: any\r\n  checkWithdraw: any\r\n  feeValue: any\r\n  fetchTxInfo: any\r\n  estimateFeeValue: ({}) => string\r\n\r\n  app: any\r\n  network: any\r\n\r\n  /**\r\n   *\r\n   * @param options\r\n   * @param options.fetchBalance\r\n   * @param options.fetchUnspents\r\n   * @param options.broadcastTx\r\n   * @param options.fetchTxInfo {(tx_hash) => Promise({ confidence, fees })}\r\n   * @param options.estimateFeeValue { ({ inSatoshis, speed, address, txSize }) => Promise(fee_value) }\r\n   */\r\n  constructor(options) {\r\n    super()\r\n\r\n    if (typeof options.fetchBalance !== 'function') {\r\n      throw new Error('GhostSwap: \"fetchBalance\" required')\r\n    }\r\n    if (typeof options.fetchUnspents !== 'function') {\r\n      throw new Error('GhostSwap: \"fetchUnspents\" required')\r\n    }\r\n    if (typeof options.broadcastTx !== 'function') {\r\n      throw new Error('GhostSwap: \"broadcastTx\" required')\r\n    }\r\n    if (typeof options.fetchTxInfo !== 'function') {\r\n      // tx_hash => { confidence, fees }\r\n      console.warn(`GhostSwap: \"fetchTxInfo\" is not a function. You will not be able to use tx-confidence feature`)\r\n    }\r\n    if (typeof options.estimateFeeValue !== 'function') {\r\n      // ({ speed } = {}) => feeRate\r\n      console.warn(`GhostSwap: \"estimateFeeValue\" is not a function. You will not be able use automatic mempool-based fee`)\r\n    }\r\n\r\n    this._swapName = constants.COINS.ghost\r\n    this.fetchBalance = options.fetchBalance\r\n    this.fetchUnspents = options.fetchUnspents\r\n    this.broadcastTx = options.broadcastTx\r\n    this.checkWithdraw = options.checkWithdraw\r\n    this.feeValue = options.feeValue || 546\r\n    this.fetchTxInfo = options.fetchTxInfo || (() => { })\r\n    this.estimateFeeValue = options.estimateFeeValue || (() => 0)\r\n  }\r\n\r\n  _initSwap(app) {\r\n    super._initSwap(app)\r\n\r\n    this.app = app\r\n\r\n    this.network = this.app.services.auth.accounts.ghost.network // TODO: templess solution, try to find better solution\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} options\r\n   * @param {boolean} options.inSatoshis\r\n   * @param {Number} options.size\r\n   * @param {String} options.speed\r\n   * @param {String} options.address\r\n   * @returns {BigNumber}\r\n   * @public\r\n   */\r\n  async getTxFee({ inSatoshis, size, speed = 'fast', address }) {\r\n    let estimatedFee = new BigNumber(await this.estimateFeeValue({ \r\n      inSatoshis,\r\n      address,\r\n      speed,\r\n      method: 'swap',\r\n      txSize: size\r\n    }))\r\n\r\n    this.feeValue = estimatedFee\r\n\r\n    return inSatoshis\r\n      ? estimatedFee\r\n      : estimatedFee.dividedBy(1e8).dp(0, BigNumber.ROUND_UP)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {array} unspents\r\n   * @param {Number} expectedConfidenceLevel\r\n   * @returns {array}\r\n   * @private\r\n   */\r\n  async filterConfidentUnspents(unspents, expectedConfidenceLevel = 0.95) {\r\n    const feesToConfidence = async (fees, size, address) => {\r\n      const currentFastestFee = await this.getTxFee({ inSatoshis: true, size, speed: 'fast', address })\r\n\r\n      return new BigNumber(fees).isLessThan(currentFastestFee)\r\n        ? new BigNumber(fees).dividedBy(currentFastestFee).toNumber()\r\n        : 1\r\n    }\r\n\r\n    const confirmationsToConfidence = confs => confs > 0 ? 1 : 0\r\n\r\n    const fetchConfidence = async ({ txid, confirmations }) => {\r\n      const confidenceFromConfirmations = confirmationsToConfidence(confirmations)\r\n\r\n      if (new BigNumber(confidenceFromConfirmations).isGreaterThanOrEqualTo(expectedConfidenceLevel)) {\r\n        return confidenceFromConfirmations\r\n      }\r\n\r\n      try {\r\n        const info = await this.fetchTxInfo(txid)\r\n\r\n        const { fees, size, senderAddress } = info\r\n\r\n        if (fees) {\r\n          return await feesToConfidence(fees, size, senderAddress)\r\n        }\r\n\r\n        throw new Error(`txinfo=${{ confirmations, fees, size, senderAddress }}`)\r\n\r\n      } catch (err) {\r\n        console.error(`GhostSwap: Error fetching confidence: using confirmations > 0:`, err.message)\r\n        return confidenceFromConfirmations\r\n      }\r\n    }\r\n\r\n    const confidences = await Promise.all(unspents.map(fetchConfidence))\r\n\r\n    return unspents.filter((utxo, index) => {\r\n      debug('swap.core:swaps')(`confidence[${index}]:`, confidences[index])\r\n      //@\r\n      return new BigNumber(confidences[index]).isGreaterThanOrEqualTo(expectedConfidenceLevel)\r\n    })\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.script\r\n   * @param {*} data.tx\r\n   * @param {string} data.secret\r\n   * @param {number} inputIndex\r\n   * @private\r\n   */\r\n  _signTransaction(data, inputIndex = 0) {\r\n    debug('swap.core:swaps')('signing script input', inputIndex)\r\n    const { script, tx, secret } = data\r\n    const hashType = this.app.env.bitcoin.Transaction.SIGHASH_ALL\r\n    // At the moment we are using Bitcore lib from Ghost to handle signing logic. TODO: port Bitcoinjs-lib to be compatible with Ghost and\r\n    // to avoid lib's duplicate\r\n    const network = this.app.isMainNet() ? bitcore.Networks.mainnet : bitcore.Networks.testnet; \r\n    // For refund we need to change the sequence number\r\n    tx.inputs[inputIndex].sequenceNumber = 4294967294;\r\n    const privateKey = new PrivateKey(this.app.services.auth.accounts.ghost.getPrivateKey(), network);\r\n    const signature = bitcore.Transaction.Sighash.sign(tx, privateKey, hashType, inputIndex, script);\r\n    const sigBuffer = BufferUtil.concat([\r\n      signature.toDER(),\r\n      BufferUtil.integerAsSingleByteBuffer(hashType)\r\n    ]);\r\n    const payment = this.app.env.bitcoin.payments.p2sh({\r\n      redeem: this.app.env.bitcoin.payments.p2wsh({\r\n        redeem: {\r\n          output: script,\r\n          input: this.app.env.bitcoin.script.compile([\r\n            sigBuffer,\r\n            this.app.services.auth.accounts.ghost.getPublicKeyBuffer(),\r\n            Buffer.from(secret.replace(/^0x/, ''), 'hex'),\r\n          ])\r\n        }\r\n      })\r\n    })\r\n    \r\n    tx.inputs[inputIndex].setWitnesses(payment.witness);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.secretHash\r\n   * @param {string} data.ownerPublicKey\r\n   * @param {string} data.recipientPublicKey\r\n   * @param {number} data.lockTime\r\n   * @returns {{scriptAddress: *, script: (*|{ignored})}}\r\n   */\r\n  createScript(data, hashName = 'ripemd160') {\r\n    const hashOpcodeName = `OP_${hashName.toUpperCase()}`\r\n    const hashOpcode = this.app.env.bitcoin.opcodes[hashOpcodeName]\r\n\r\n    const { secretHash, ownerPublicKey, recipientPublicKey, lockTime } = data\r\n    const script = this.app.env.bitcoin.script.compile([\r\n\r\n      this.app.env.bitcoin.opcodes.OP_SIZE,\r\n      Buffer.from('20' ,'hex'),\r\n      this.app.env.bitcoin.opcodes.OP_EQUALVERIFY,\r\n\r\n      hashOpcode,\r\n      Buffer.from(secretHash, 'hex'),\r\n      this.app.env.bitcoin.opcodes.OP_EQUALVERIFY,\r\n\r\n      Buffer.from(recipientPublicKey, 'hex'),\r\n      this.app.env.bitcoin.opcodes.OP_EQUAL,\r\n      this.app.env.bitcoin.opcodes.OP_IF,\r\n\r\n      Buffer.from(recipientPublicKey, 'hex'),\r\n\r\n      this.app.env.bitcoin.opcodes.OP_ELSE,\r\n\r\n      this.app.env.bitcoin.script.number.encode(lockTime),\r\n      this.app.env.bitcoin.opcodes.OP_CHECKLOCKTIMEVERIFY,\r\n      this.app.env.bitcoin.opcodes.OP_DROP,\r\n      Buffer.from(ownerPublicKey, 'hex'),\r\n\r\n      this.app.env.bitcoin.opcodes.OP_ENDIF,\r\n\r\n      this.app.env.bitcoin.opcodes.OP_CHECKSIG,\r\n    ])\r\n\r\n    const scriptData = this.app.env.bitcoin.payments.p2sh({ redeem: { output: script, network: this.network }, network: this.network })\r\n    const scriptAddress = scriptData.address;\r\n\r\n    return {\r\n      scriptAddress,\r\n      script,\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {string} data.recipientPublicKey\r\n   * @param {number} data.lockTime\r\n   * @param {object} expected\r\n   * @param {number} expected.value\r\n   * @param {number} expected.lockTime\r\n   * @param {string} expected.recipientPublicKey\r\n   * @returns {Promise.<string>}\r\n   */\r\n  async checkScript(data, expected, hashName) {\r\n    const { recipientPublicKey, lockTime } = data\r\n    const { scriptAddress, script } = this.createScript(data, hashName)\r\n\r\n    const expectedConfidence = expected.confidence || 0.95\r\n    const unspents = await this.fetchUnspents(scriptAddress)\r\n    const expectedValue = expected.value.multipliedBy(1e8).integerValue()\r\n    const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n\r\n    const confidentUnspents = await this.filterConfidentUnspents(unspents, expectedConfidence)\r\n    const totalConfidentUnspent = confidentUnspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n\r\n    if (expectedValue.isGreaterThan(totalUnspent)) {\r\n      return `Expected script value: ${expectedValue.toNumber()}, got: ${totalUnspent}, address: ${scriptAddress}`\r\n    }\r\n    if (expected.lockTime > lockTime) {\r\n      return `Expected script lockTime: ${expected.lockTime}, got: ${lockTime}, address: ${scriptAddress}`\r\n    }\r\n    if (expected.recipientPublicKey !== recipientPublicKey) {\r\n      return `Expected script recipient publicKey: ${expected.recipientPublicKey}, got: ${recipientPublicKey}`\r\n    }\r\n    if (expectedValue.isGreaterThan(totalConfidentUnspent)) {\r\n      return `Expected script value: ${expectedValue.toString()} with confidence above ${expectedConfidence}, got: ${totalConfidentUnspent}, address: ${scriptAddress}`\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {BigNumber} data.amount\r\n   * @param {function} handleTransactionHash\r\n   * @param {string} hashName\r\n   * @returns {Promise}\r\n   */\r\n  fundScript(data, handleTransactionHash, hashName) {\r\n    const { scriptValues, amount } = data\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n\r\n        const { scriptAddress } = this.createScript(scriptValues, hashName)\r\n\r\n        const ownerAddress = this.app.services.auth.accounts.ghost.getAddress()\r\n\r\n        const unspents = await this.fetchUnspents(ownerAddress)\r\n        const fundValue = amount.multipliedBy(1e8).integerValue().toNumber()\r\n        //@\r\n        const feeValueBN = await this.getTxFee({\r\n          inSatoshis: true,\r\n          address: ownerAddress,\r\n        })\r\n        const feeValue = feeValueBN.integerValue().toNumber()\r\n        const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n        const skipValue = totalUnspent - fundValue - feeValue\r\n        if (totalUnspent < feeValue + fundValue) {\r\n          throw new Error(`Total less than fee: ${totalUnspent} < ${feeValue} + ${fundValue}`)\r\n        }\r\n\r\n        const transaction = new bitcore.Transaction()\r\n          .from(unspents)         \r\n          .to(scriptAddress, fundValue) \r\n          .change(this.app.services.auth.accounts.ghost.getAddress())     \r\n          .sign(this.app.services.auth.accounts.ghost.getPrivateKey())    \r\n\r\n        if (typeof handleTransactionHash === 'function') {\r\n          handleTransactionHash(transaction.toObject().txid)\r\n        }\r\n\r\n        try {\r\n          const result = await this.broadcastTx(String(transaction.serialize()))\r\n          resolve(result)\r\n        }\r\n        catch (err) {\r\n          reject(err)\r\n        }\r\n      }\r\n      catch (err) {\r\n        reject(err)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object|string} data - scriptValues or wallet address\r\n   * @returns {Promise.<void>}\r\n   */\r\n  async getBalance(data, hashName) {\r\n    let address\r\n\r\n    if (typeof data === 'string') {\r\n      address = data\r\n    }\r\n    else if (typeof data === 'object') {\r\n      const { scriptAddress } = this.createScript(data, hashName)\r\n\r\n      address = scriptAddress\r\n    }\r\n    else {\r\n      throw new Error('Wrong data type')\r\n    }\r\n\r\n    const unspents = await this.fetchUnspents(address)\r\n    const totalUnspent = unspents && unspents.length && unspents.reduce((summ, { satoshis }) => summ + satoshis, 0) || 0\r\n\r\n    return totalUnspent\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {boolean} isRefund\r\n   * @returns {Promise}\r\n   */\r\n  async getWithdrawRawTransaction(data, isRefund, hashName?) {\r\n    const { scriptValues, secret, destinationAddress } = data\r\n    const destAddress = (destinationAddress) ? destinationAddress : this.app.services.auth.accounts.ghost.getAddress()\r\n\r\n    const { script, scriptAddress } = this.createScript(scriptValues, hashName)\r\n    const unspents = await this.fetchUnspents(scriptAddress)\r\n    //@\r\n    const feeValueBN = await this.getTxFee({\r\n      inSatoshis: true,\r\n      address: scriptAddress\r\n    })\r\n    const feeValue = feeValueBN.integerValue().toNumber()\r\n    const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n\r\n    if (new BigNumber(totalUnspent).isLessThan(feeValue)) {\r\n      /* Check - may be withdrawed */\r\n      if (typeof this.checkWithdraw === 'function') {\r\n        const hasWithdraw = await this.checkWithdraw(scriptAddress)\r\n        if (hasWithdraw\r\n          && hasWithdraw.address.toLowerCase() == destAddress.toLowerCase()\r\n        ) {\r\n          // already withdrawed\r\n          return {\r\n            txId: hasWithdraw.txid,\r\n            alreadyWithdrawed: true\r\n          }\r\n        } else {\r\n          throw new Error(`Total less than fee: ${totalUnspent} < ${feeValue}`)\r\n        }\r\n      } else {\r\n        throw new Error(`Total less than fee: ${totalUnspent} < ${feeValue}`)\r\n      }\r\n    }\r\n\r\n    const tx = new bitcore.Transaction();\r\n\r\n    if (isRefund) {\r\n      tx.lockUntilDate(scriptValues.lockTime);\r\n    }\r\n \r\n    tx.from(unspents);\r\n    tx.to(destAddress, totalUnspent - feeValue);\r\n    // Sign input witness's\r\n    tx.inputs.map((_, index) =>\r\n      this._signTransaction({\r\n        script,\r\n        secret,\r\n        tx,\r\n      }, index)\r\n\r\n    );\r\n\r\n    const txHex = tx.toString()\r\n    const txId = tx.toObject().hash\r\n\r\n     return {\r\n       txHex,\r\n       txId,\r\n     }\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {boolean} isRefund\r\n   * @returns {Promise}\r\n   */\r\n  async getWithdrawHexTransaction(data, isRefund) {\r\n    const txRaw = await this.getWithdrawRawTransaction(data, isRefund)\r\n\r\n    return txRaw.txHex\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @returns {Promise}\r\n   */\r\n  getRefundRawTransaction(data) {\r\n    return this.getWithdrawRawTransaction(data, true)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @returns {Promise}\r\n   */\r\n  async getRefundHexTransaction(data) {\r\n    const txRaw = await this.getRefundRawTransaction(data)\r\n\r\n    return txRaw.txHex\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {function} handleTransactionHash\r\n   * @param {boolean} isRefund\r\n   * @param {string} hashName\r\n   * @returns {Promise}\r\n   */\r\n  withdraw(data, isRefund, hashName) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const txRaw = await this.getWithdrawRawTransaction(data, isRefund, hashName)\r\n\r\n        if (txRaw.alreadyWithdrawed) {\r\n          resolve(txRaw.txId)\r\n          return\r\n        }\r\n\r\n        debug('swap.core:swaps')('raw tx withdraw', txRaw.txHex)\r\n\r\n        const result = await this.broadcastTx(txRaw.txHex)\r\n\r\n\r\n        // Wait some delay until transaction can be rejected or broadcast failed\r\n        await util.helpers.waitDelay(10)\r\n\r\n        const txSuccess = await this.checkTX(txRaw.txId)\r\n\r\n        if (txSuccess) {\r\n          resolve(txRaw.txId)\r\n        } else {\r\n          console.warn('GhostSwap: cant withdraw', 'Generated TX not found')\r\n          reject('TX not found. Try it later. ')\r\n        }\r\n      }\r\n      catch (error) {\r\n        console.warn('GhostSwap: cant withdraw', error.message)\r\n\r\n        let errorMessage\r\n\r\n        if (error.res && /non-final/.test(error.res.text)) {\r\n          errorMessage = 'Try it later'\r\n        } else if (/Total less than fee/.test(error.message)) {\r\n          if (/Total less than fee: 0/.test(error.message)) {\r\n            errorMessage = 'Address is empty'\r\n          } else {\r\n            errorMessage = 'Less than fee'\r\n          }\r\n        } else {\r\n          errorMessage = error\r\n        }\r\n\r\n        reject(errorMessage)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {string} txID\r\n   * @returns {Promise}\r\n   */\r\n  async checkTX(txID) {\r\n    const txInfo = await this.fetchTxInfo(txID)\r\n    if (txInfo\r\n      && txInfo.senderAddress\r\n      && txInfo.txid\r\n      && (txInfo.txid.toLowerCase() == txID.toLowerCase())\r\n    ) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} data.scriptValues\r\n   * @param {string} data.secret\r\n   * @param {function} handleTransactionHash\r\n   * @param {string} hashName\r\n   * @returns {Promise}\r\n   */\r\n  refund(data, hashName) {\r\n    return this.withdraw(data, true, hashName)\r\n  }\r\n}\r\n\r\n\r\nexport default GhostSwap\r\n"]}]}