{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.app\\util\\typeforce.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.app\\util\\typeforce.ts","mtime":1614851295569},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5IjsKCnZhciBfaXNDb2luQWRkcmVzcywgX2lzUHVibGljS2V5OwoKLy8gQHRzLW5vY2hlY2sKaW1wb3J0IHR5cGVmb3JjZSBmcm9tICd0eXBlZm9yY2UnOwppbXBvcnQgY29uc3RhbnRzIGZyb20gJy4uL2NvbnN0YW50cyc7CmltcG9ydCB7IEVUSF9UT0tFTlMgfSBmcm9tICcuLi9jb25zdGFudHMvQ09JTlMnOwoKdmFyIGNoZWNrID0gZnVuY3Rpb24gY2hlY2soKSB7CiAgdHJ5IHsKICAgIHJldHVybiB0eXBlZm9yY2UuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpOwogIH0gY2F0Y2ggKGVycikgewogICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgcmV0dXJuIGZhbHNlOwogIH0KfTsKCnZhciBpc051bWVyaWMgPSBmdW5jdGlvbiBpc051bWVyaWModmFsdWUpIHsKICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiBpc0Zpbml0ZSh2YWx1ZSk7Cn07Cgp2YXIgaXNDb2luTmFtZSA9IGZ1bmN0aW9uIGlzQ29pbk5hbWUodmFsdWUpIHsKICByZXR1cm4gT2JqZWN0LnZhbHVlcyhjb25zdGFudHMuQ09JTlMpLmZpbHRlciggLy9ACiAgZnVuY3Rpb24gKHYpIHsKICAgIHJldHVybiB2LnRpY2tlciA/IC8vQAogICAgdi50aWNrZXIudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUudG9Mb3dlckNhc2UoKSAvL0AKICAgIDogdi50b0xvd2VyQ2FzZSgpID09PSB2YWx1ZS50b0xvd2VyQ2FzZSgpOwogIH0pLmxlbmd0aCA+IDA7Cn07Cgp2YXIgaXNDb2luQWRkcmVzcyA9IChfaXNDb2luQWRkcmVzcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2lzQ29pbkFkZHJlc3MsIGNvbnN0YW50cy5DT0lOUy5ldGgsIGZ1bmN0aW9uICh2YWx1ZSkgewogIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIC9eMHhbQS1GYS1mMC05XXs0MH0kLy50ZXN0KHZhbHVlKTsKfSksIF9kZWZpbmVQcm9wZXJ0eShfaXNDb2luQWRkcmVzcywgY29uc3RhbnRzLkNPSU5TLmJ0YywgZnVuY3Rpb24gKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgL15bQS1aYS16MC05XXsyNiwzNX0kLy50ZXN0KHZhbHVlKTsKfSksIF9kZWZpbmVQcm9wZXJ0eShfaXNDb2luQWRkcmVzcywgY29uc3RhbnRzLkNPSU5TLmdob3N0LCBmdW5jdGlvbiAodmFsdWUpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXltBLVphLXowLTldezI2LDM1fSQvLnRlc3QodmFsdWUpOwp9KSwgX2RlZmluZVByb3BlcnR5KF9pc0NvaW5BZGRyZXNzLCBjb25zdGFudHMuQ09JTlMubmV4dCwgZnVuY3Rpb24gKHZhbHVlKSB7CiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgL15bQS1aYS16MC05XXsyNiwzNX0kLy50ZXN0KHZhbHVlKTsKfSksIF9pc0NvaW5BZGRyZXNzKTsKdmFyIGlzUHVibGljS2V5ID0gKF9pc1B1YmxpY0tleSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2lzUHVibGljS2V5LCBjb25zdGFudHMuQ09JTlMuZXRoLCAnP1N0cmluZycpLCBfZGVmaW5lUHJvcGVydHkoX2lzUHVibGljS2V5LCBjb25zdGFudHMuQ09JTlMuYnRjLCBmdW5jdGlvbiAodmFsdWUpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXltBLVphLXowLTldezY2fSQvLnRlc3QodmFsdWUpOwp9KSwgX2RlZmluZVByb3BlcnR5KF9pc1B1YmxpY0tleSwgY29uc3RhbnRzLkNPSU5TLmdob3N0LCBmdW5jdGlvbiAodmFsdWUpIHsKICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXltBLVphLXowLTldezY2fSQvLnRlc3QodmFsdWUpOwp9KSwgX2RlZmluZVByb3BlcnR5KF9pc1B1YmxpY0tleSwgY29uc3RhbnRzLkNPSU5TLm5leHQsIGZ1bmN0aW9uICh2YWx1ZSkgewogIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIC9eW0EtWmEtejAtOV17NjZ9JC8udGVzdCh2YWx1ZSk7Cn0pLCBfaXNQdWJsaWNLZXkpOwpPYmplY3Qua2V5cyhFVEhfVE9LRU5TKS5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbkNvZGUpIHsKICBpc0NvaW5BZGRyZXNzW0VUSF9UT0tFTlNbdG9rZW5Db2RlXV0gPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIC9eMHhbQS1GYS1mMC05XXs0MH0kLy50ZXN0KHZhbHVlKTsKICB9OwoKICBpc1B1YmxpY0tleVtFVEhfVE9LRU5TW3Rva2VuQ29kZV1dID0gJz9TdHJpbmcnOwp9KTsKZXhwb3J0IGRlZmF1bHQgewogIHQ6IHR5cGVmb3JjZSwKICBjaGVjazogY2hlY2ssCiAgaXNOdW1lcmljOiBpc051bWVyaWMsCiAgaXNDb2luTmFtZTogaXNDb2luTmFtZSwKICBpc0NvaW5BZGRyZXNzOiBpc0NvaW5BZGRyZXNzLAogIGlzUHVibGljS2V5OiBpc1B1YmxpY0tleQp9Ow=="},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.app/util/typeforce.ts"],"names":["typeforce","constants","ETH_TOKENS","check","err","console","error","isNumeric","value","isNaN","parseFloat","isFinite","isCoinName","Object","values","COINS","filter","v","ticker","toLowerCase","length","isCoinAddress","eth","test","btc","ghost","next","isPublicKey","keys","forEach","tokenCode","t"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport typeforce from 'typeforce'\r\nimport constants from '../constants'\r\nimport { ETH_TOKENS } from '../constants/COINS'\r\n\r\nconst check = (...args) => {\r\n  try {\r\n    return typeforce(...args)\r\n  }\r\n  catch (err) {\r\n    console.error(err)\r\n    return false\r\n  }\r\n}\r\n\r\nconst isNumeric = (value) => !isNaN(parseFloat(value)) && isFinite(value)\r\n\r\nconst isCoinName = (value) => {\r\n  return Object.values(constants.COINS).filter(\r\n    //@\r\n    (v) => (v.ticker)\r\n      //@\r\n      ? v.ticker.toLowerCase() === value.toLowerCase()\r\n      //@\r\n      : v.toLowerCase() === value.toLowerCase()\r\n  ).length > 0\r\n}\r\n\r\nconst isCoinAddress = {\r\n  [constants.COINS.eth]: (value) => typeof value === 'string' && /^0x[A-Fa-f0-9]{40}$/.test(value),\r\n  [constants.COINS.btc]: (value) => typeof value === 'string' && /^[A-Za-z0-9]{26,35}$/.test(value),\r\n  [constants.COINS.ghost]: (value) => typeof value === 'string' && /^[A-Za-z0-9]{26,35}$/.test(value),\r\n  [constants.COINS.next]: (value) => typeof value === 'string' && /^[A-Za-z0-9]{26,35}$/.test(value),\r\n  // [constants.COINS.usdt]: (value) => typeof value === 'string',\r\n}\r\n\r\nconst isPublicKey = {\r\n  [constants.COINS.eth]: '?String', // TODO we don't have / use eth publicKey\r\n  [constants.COINS.btc]: (value) => typeof value === 'string' && /^[A-Za-z0-9]{66}$/.test(value),\r\n  [constants.COINS.ghost]: (value) => typeof value === 'string' && /^[A-Za-z0-9]{66}$/.test(value),\r\n  [constants.COINS.next]: (value) => typeof value === 'string' && /^[A-Za-z0-9]{66}$/.test(value),\r\n  // [constants.COINS.usdt]: '?String', // TODO we don't have / use nim publicKey\r\n}\r\n\r\nObject.keys(ETH_TOKENS).forEach((tokenCode) => {\r\n  isCoinAddress[ETH_TOKENS[tokenCode]] = (value) => typeof value === 'string' && /^0x[A-Fa-f0-9]{40}$/.test(value)\r\n  isPublicKey[ETH_TOKENS[tokenCode]] = '?String'\r\n})\r\n\r\nexport default {\r\n  t: typeforce,\r\n  check,\r\n  isNumeric,\r\n  isCoinName,\r\n  isCoinAddress,\r\n  isPublicKey,\r\n}\r\n"]}]}