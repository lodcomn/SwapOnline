{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\BTC2ETH.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\BTC2ETH.ts","mtime":1614842913754},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/BTC2ETH.ts"],"names":["debug","constants","AtomicAB2UTXO","BTC2ETH","swap","btcSwap","getRefundHexTransaction","scriptValues","state","btcScriptValues","secret","then","txHex","setState","refundTxHex","utxoCoin","_flowName","getName","stepNumbers","ethSwap","ownerSwap","participantSwap","abBlockchain","utxoBlockchain","isUTXOSide","Error","step","isStoppedSwap","signTransactionHash","isSignFetching","isParticipantSigned","ethSwapCreationTransactionHash","secretHash","isBalanceFetching","isBalanceEnough","balance","isEthContractFunded","btcSwapWithdrawTransactionHash","ethSwapWithdrawTransactionHash","canCreateEthTransaction","isEthWithdrawn","refundTransactionHash","isRefunded","withdrawFee","isFinished","isSwapExist","requireWithdrawFee","utxoFundError","_persistState","flow","signUTXOSide","syncBalance","fundSwapScript","waitABContract","withdrawFromABContract","room","once","sendMessage","event","finishStep","scriptAddress","utxoScriptValues","refund","hash","error","test","console","warn","checkTX","_secret","_secretHash","app","env","bitcoin","crypto","ripemd160","Buffer","from","toString","data","ownerAddress","getParticipantEthAddress","withdraw","getFromName","getToName","COINS","btc","eth"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport { EthSwap, BtcSwap } from 'swap.swaps'\r\n\r\n\r\nclass BTC2ETH extends AtomicAB2UTXO {\r\n\r\n  _flowName: string\r\n  ethSwap: EthSwap\r\n  btcSwap: BtcSwap\r\n  state: any\r\n\r\n  static getName() {\r\n    return `${this.getFromName()}2${this.getToName()}`\r\n  }\r\n\r\n  static getFromName() {\r\n    return constants.COINS.btc\r\n  }\r\n\r\n  static getToName() {\r\n    return constants.COINS.eth\r\n  }\r\n\r\n  constructor(swap) {\r\n    super(swap)\r\n    this.utxoCoin = `btc`\r\n    this._flowName = BTC2ETH.getName()\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'submit-secret': 2,\r\n      'sync-balance': 3,\r\n      'lock-utxo': 4,\r\n      'wait-lock-eth': 5,\r\n      'withdraw-eth': 6,\r\n      'finish': 7,\r\n      'end': 8,\r\n    }\r\n\r\n    this.ethSwap = swap.ownerSwap\r\n    this.btcSwap = swap.participantSwap\r\n\r\n    this.abBlockchain = this.ethSwap\r\n    this.utxoBlockchain = this.btcSwap\r\n    this.isUTXOSide = true\r\n\r\n    if (!this.ethSwap) {\r\n      throw new Error('BTC2ETH: \"ethSwap\" of type object required')\r\n    }\r\n    if (!this.btcSwap) {\r\n      throw new Error('BTC2ETH: \"btcSwap\" of type object required')\r\n    }\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isStoppedSwap: false,\r\n\r\n      signTransactionHash: null,\r\n      isSignFetching: false,\r\n      isParticipantSigned: false,\r\n\r\n      ethSwapCreationTransactionHash: null,\r\n\r\n      secretHash: null,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n      balance: null,\r\n\r\n      isEthContractFunded: false,\r\n\r\n      btcSwapWithdrawTransactionHash: null,\r\n      ethSwapWithdrawTransactionHash: null,\r\n\r\n      canCreateEthTransaction: true,\r\n      isEthWithdrawn: false,\r\n\r\n      refundTransactionHash: null,\r\n      isRefunded: false,\r\n\r\n      withdrawFee: null,\r\n      refundTxHex: null,\r\n      isFinished: false,\r\n      isSwapExist: false,\r\n\r\n      requireWithdrawFee: false,\r\n\r\n      utxoFundError: null,\r\n    }\r\n\r\n    this._persistState()\r\n    super._persistSteps()\r\n  }\r\n\r\n  _persistState() {\r\n    super._persistState()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n\r\n    return [\r\n\r\n      // 1. Signs\r\n\r\n      async () => {\r\n        this.signUTXOSide()\r\n      },\r\n\r\n      // 2. Create secret, secret hash and BTC script\r\n\r\n      () => {\r\n        // this.submitSecret()\r\n      },\r\n\r\n      // 3. Check balance\r\n\r\n      () => {\r\n        this.syncBalance()\r\n      },\r\n\r\n      // 4. Create BTC Script, fund, notify participant\r\n\r\n      async () => {\r\n        this.btcSwap.fundSwapScript({\r\n          flow,\r\n        })\r\n      },\r\n\r\n      // 5. Wait participant creates ETH Contract\r\n\r\n      async () => {\r\n        await flow.ethSwap.waitABContract({\r\n          flow,\r\n          utxoCoin: `btc`,\r\n        })\r\n      },\r\n\r\n      // 6. Withdraw\r\n\r\n      async () => {\r\n        await flow.ethSwap.withdrawFromABContract({ flow })\r\n      },\r\n\r\n      // 7. Finish\r\n\r\n      () => {\r\n        flow.swap.room.once('swap finished', ({btcSwapWithdrawTransactionHash}) => {\r\n          flow.setState({\r\n            btcSwapWithdrawTransactionHash,\r\n          })\r\n        })\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'request swap finished',\r\n        })\r\n\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, 'finish')\r\n      },\r\n\r\n      // 8. Finished!\r\n\r\n      () => {}\r\n    ]\r\n  }\r\n\r\n  getBTCScriptAddress() {\r\n    const { scriptAddress } = this.state\r\n    return scriptAddress;\r\n  }\r\n\r\n  async skipSyncBalance() {\r\n    this.finishStep({}, { step: 'sync-balance' })\r\n  }\r\n\r\n  getRefundTxHex = () => {\r\n    this.btcSwap.getRefundHexTransaction({\r\n      scriptValues: this.state.btcScriptValues,\r\n      secret: this.state.secret,\r\n    })\r\n      .then((txHex) => {\r\n        this.setState({\r\n          refundTxHex: txHex,\r\n        })\r\n      })\r\n  }\r\n\r\n  tryRefund() {\r\n    const flow = this\r\n    const { utxoScriptValues, secret } = flow.state\r\n\r\n    return flow.btcSwap.refund({\r\n      scriptValues: utxoScriptValues,\r\n      secret: secret,\r\n    })\r\n      .then((hash) => {\r\n        if (!hash) {\r\n          return false\r\n        }\r\n\r\n        this.swap.room.sendMessage({\r\n          event: 'utxo refund completed',\r\n        })\r\n\r\n        flow.setState({\r\n          refundTransactionHash: hash,\r\n          isRefunded: true,\r\n          isSwapExist: false,\r\n        }, true)\r\n\r\n        return true\r\n      })\r\n      .catch((error) => {\r\n        if (/Address is empty/.test(error)) {\r\n          // TODO - fetch TX list to script for refund TX\r\n          flow.setState({\r\n            isRefunded: true,\r\n            isSwapExist: false,\r\n          }, true)\r\n          return true\r\n        } else {\r\n          console.warn('Btc refund:', error)\r\n\r\n          return false\r\n        }\r\n      })\r\n  }\r\n\r\n  async isRefundSuccess() {\r\n    const { refundTransactionHash, isRefunded } = this.state\r\n    if (refundTransactionHash && isRefunded) {\r\n      if (await this.btcSwap.checkTX(refundTransactionHash)) {\r\n        return true\r\n      } else {\r\n        console.warn('BTC2ETH - unknown refund transaction')\r\n        this.setState( {\r\n          refundTransactionHash: null,\r\n          isRefunded: false,\r\n        } )\r\n        return false\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  async tryWithdraw(_secret) {\r\n    const { secret, secretHash, isEthWithdrawn } = this.state\r\n\r\n    if (!_secret)\r\n      throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n    if (secret && secret != _secret)\r\n      console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n    if (isEthWithdrawn)\r\n      console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n    debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n    const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n    if (secretHash != _secretHash)\r\n      console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n    const data = {\r\n      ownerAddress: this.app.getParticipantEthAddress(this.swap),\r\n      secret: _secret,\r\n    }\r\n\r\n    await this.ethSwap.withdraw(data, (hash) => {\r\n      debug('swap.core:flow')(`TX hash=${hash}`)\r\n      this.setState({\r\n        ethSwapWithdrawTransactionHash: hash,\r\n        canCreateEthTransaction: true,\r\n      })\r\n    }).then(() => {\r\n\r\n      this.finishStep({\r\n        isEthWithdrawn: true,\r\n      }, 'withdraw-eth')\r\n    })\r\n  }\r\n}\r\n\r\nexport default BTC2ETH\r\n"]}]}