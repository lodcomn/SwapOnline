{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\NEXT2ETH.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\NEXT2ETH.ts","mtime":1614842913760},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/NEXT2ETH.ts"],"names":["debug","constants","util","AtomicAB2UTXO","BigNumber","NEXT2ETH","swap","nextSwap","getRefundHexTransaction","scriptValues","state","utxoScriptValues","secret","then","txHex","setState","refundTxHex","utxoCoin","_flowName","getName","stepNumbers","ethSwap","ownerSwap","participantSwap","abBlockchain","utxoBlockchain","isUTXOSide","Error","step","isStoppedSwap","signTransactionHash","isSignFetching","isParticipantSigned","ethSwapCreationTransactionHash","secretHash","isBalanceFetching","isBalanceEnough","balance","isEthContractFunded","nextSwapWithdrawTransactionHash","ethSwapWithdrawTransactionHash","canCreateEthTransaction","isEthWithdrawn","refundTransactionHash","isRefunded","withdrawFee","isFinished","isSwapExist","requireWithdrawFee","_persistState","flow","signUTXOSide","syncBalance","onTransactionHash","txID","utxoScriptCreatingTransactionHash","room","once","sendMessage","event","data","sellAmount","fundScript","amount","checkNEXTScriptBalance","createScript","scriptAddress","fetchUnspents","unspents","length","txid","getBalance","isEnoughMoney","isGreaterThanOrEqualTo","times","scriptBalance","div","dp","helpers","repeatAsyncUntilResult","stopRepeat","finishStep","isNextScriptFunded","waitAB2UTXOContract","withdrawFromAB2UTXO","refund","hash","error","test","console","warn","checkTX","_secret","_secretHash","app","env","bitcoin","crypto","ripemd160","Buffer","from","toString","ownerAddress","getParticipantEthAddress","withdraw","getFromName","getToName","COINS","next","eth"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\n\r\nclass NEXT2ETH extends AtomicAB2UTXO {\r\n\r\n  _flowName: string\r\n  ethSwap: any\r\n  nextSwap: any\r\n  state: any\r\n\r\n  static getName() {\r\n    return `${this.getFromName()}2${this.getToName()}`\r\n  }\r\n  static getFromName() {\r\n    return constants.COINS.next\r\n  }\r\n  static getToName() {\r\n    return constants.COINS.eth\r\n  }\r\n\r\n  constructor(swap) {\r\n    super(swap)\r\n    this.utxoCoin = `next`\r\n\r\n    this._flowName = NEXT2ETH.getName()\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'submit-secret': 2,\r\n      'sync-balance': 3,\r\n      'lock-utxo': 4,\r\n      'wait-lock-eth': 5,\r\n      'withdraw-eth': 6,\r\n      'finish': 7,\r\n      'end': 8\r\n    }\r\n\r\n    this.ethSwap = swap.ownerSwap\r\n    this.nextSwap = swap.participantSwap\r\n\r\n    this.abBlockchain = this.ethSwap\r\n    this.utxoBlockchain = this.nextSwap\r\n    this.isUTXOSide = true\r\n\r\n    if (!this.ethSwap) {\r\n      throw new Error('NEXT2ETH: \"ethSwap\" of type object required')\r\n    }\r\n    if (!this.nextSwap) {\r\n      throw new Error('NEXT2ETH: \"nextSwap\" of type object required')\r\n    }\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      isStoppedSwap: false,\r\n\r\n      signTransactionHash: null,\r\n      isSignFetching: false,\r\n      isParticipantSigned: false,\r\n\r\n      ethSwapCreationTransactionHash: null,\r\n\r\n      secretHash: null,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: true,\r\n      balance: null,\r\n\r\n      isEthContractFunded: false,\r\n\r\n      nextSwapWithdrawTransactionHash: null,\r\n      ethSwapWithdrawTransactionHash: null,\r\n\r\n      canCreateEthTransaction: true,\r\n      isEthWithdrawn: false,\r\n\r\n      refundTransactionHash: null,\r\n      isRefunded: false,\r\n\r\n      withdrawFee: null,\r\n      refundTxHex: null,\r\n      isFinished: false,\r\n      isSwapExist: false,\r\n\r\n      requireWithdrawFee: false,\r\n    }\r\n\r\n    this._persistState()\r\n    super._persistSteps()\r\n  }\r\n\r\n  _persistState() {\r\n    super._persistState()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n\r\n    return [\r\n\r\n      // 1. Signs\r\n\r\n      async () => {\r\n        this.signUTXOSide()\r\n      },\r\n\r\n      // 2. Create secret, secret hash and NEXT script\r\n\r\n      () => {\r\n        // this.submitSecret()\r\n      },\r\n\r\n      // 3. Check balance\r\n\r\n      () => {\r\n        this.syncBalance()\r\n      },\r\n\r\n      // 4. Create NEXT Script, fund, notify participant\r\n\r\n      async () => {\r\n        const onTransactionHash = (txID) => {\r\n          const { utxoScriptCreatingTransactionHash, utxoScriptValues } = flow.state\r\n\r\n          if (utxoScriptCreatingTransactionHash) {\r\n            return\r\n          }\r\n\r\n          flow.setState({\r\n            utxoScriptCreatingTransactionHash: txID,\r\n          })\r\n\r\n          flow.swap.room.once('request utxo script', () => {\r\n            flow.swap.room.sendMessage({\r\n              event:  'create utxo script',\r\n              data: {\r\n                scriptValues: utxoScriptValues,\r\n                utxoScriptCreatingTransactionHash: txID,\r\n              }\r\n            })\r\n          })\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'create utxo script',\r\n            data: {\r\n              scriptValues : utxoScriptValues,\r\n              utxoScriptCreatingTransactionHash : txID,\r\n            }\r\n          })\r\n        }\r\n\r\n        const { sellAmount } = flow.swap\r\n        const { isBalanceEnough, utxoScriptValues } = flow.state\r\n\r\n        if (isBalanceEnough) {\r\n          await flow.nextSwap.fundScript({\r\n            scriptValues: utxoScriptValues,\r\n            amount: sellAmount,\r\n          })\r\n        }\r\n\r\n        const checkNEXTScriptBalance = async () => {\r\n          const { scriptAddress } = this.nextSwap.createScript(utxoScriptValues)\r\n          const unspents = await this.nextSwap.fetchUnspents(scriptAddress)\r\n\r\n          if (unspents.length === 0) {\r\n            return false\r\n          }\r\n\r\n          const txID = unspents[0].txid\r\n\r\n          const balance = await this.nextSwap.getBalance(utxoScriptValues)\r\n\r\n          const isEnoughMoney = new BigNumber(balance).isGreaterThanOrEqualTo(sellAmount.times(1e8))\r\n\r\n          if (isEnoughMoney) {\r\n            flow.setState({\r\n              scriptBalance: new BigNumber(balance).div(1e8).dp(8),\r\n            })\r\n\r\n            onTransactionHash(txID)\r\n          }\r\n\r\n          return isEnoughMoney\r\n        }\r\n\r\n        await util.helpers.repeatAsyncUntilResult(async (stopRepeat) => {\r\n          const { isStoppedSwap } = flow.state\r\n\r\n          if (!isStoppedSwap) {\r\n            return await checkNEXTScriptBalance()\r\n          } else {\r\n            stopRepeat()\r\n          }\r\n        })\r\n\r\n        const { isStoppedSwap } = flow.state\r\n\r\n        if (!isStoppedSwap) {\r\n          flow.finishStep({\r\n            isNextScriptFunded: true,\r\n          }, { step: 'lock-utxo' })\r\n        }\r\n      },\r\n\r\n      // 5. Wait participant creates ETH Contract\r\n\r\n      async () => {\r\n        await flow.ethSwap.waitAB2UTXOContract({\r\n          flow,\r\n          utxoCoin: `next`,\r\n        })\r\n      },\r\n\r\n      // 6. Withdraw\r\n\r\n      async () => {\r\n        await flow.ethSwap.withdrawFromAB2UTXO({ flow })\r\n      },\r\n\r\n      // 7. Finish\r\n\r\n      () => {\r\n        flow.swap.room.once('swap finished', ({nextSwapWithdrawTransactionHash}) => {\r\n          flow.setState({\r\n            nextSwapWithdrawTransactionHash,\r\n          })\r\n        })\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'request swap finished',\r\n        })\r\n\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, 'finish')\r\n      },\r\n\r\n      // 8. Finished!\r\n\r\n      () => {}\r\n    ]\r\n  }\r\n\r\n  async skipSyncBalance() {\r\n    this.finishStep({}, { step: 'sync-balance' })\r\n  }\r\n\r\n  getRefundTxHex = () => {\r\n    this.nextSwap.getRefundHexTransaction({\r\n      scriptValues: this.state.utxoScriptValues,\r\n      secret: this.state.secret,\r\n    })\r\n      .then((txHex) => {\r\n        this.setState({\r\n          refundTxHex: txHex,\r\n        })\r\n      })\r\n  }\r\n\r\n  tryRefund() {\r\n    const flow = this\r\n    const { utxoScriptValues, secret } = flow.state\r\n\r\n    return flow.nextSwap.refund({\r\n      scriptValues: utxoScriptValues,\r\n      secret: secret,\r\n    })\r\n      .then((hash) => {\r\n        if (!hash) {\r\n          return false\r\n        }\r\n\r\n        this.swap.room.sendMessage({\r\n          event: 'utxo refund completed',\r\n        })\r\n\r\n        flow.setState({\r\n          refundTransactionHash: hash,\r\n          isRefunded: true,\r\n          isSwapExist: false,\r\n        }, true)\r\n\r\n        return true\r\n      })\r\n      .catch((error) => {\r\n        if (/Address is empty/.test(error)) {\r\n          // TODO - fetch TX list to script for refund TX\r\n          flow.setState({\r\n            isRefunded: true,\r\n            isSwapExist: false,\r\n          }, true)\r\n          return true\r\n        } else {\r\n          console.warn('Next refund:', error)\r\n\r\n          return false\r\n        }\r\n      })\r\n  }\r\n\r\n  async isRefundSuccess() {\r\n    const { refundTransactionHash, isRefunded } = this.state\r\n    if (refundTransactionHash && isRefunded) {\r\n      if (await this.nextSwap.checkTX(refundTransactionHash)) {\r\n        return true\r\n      } else {\r\n        console.warn('NEXT2ETH - unknown refund transaction')\r\n        this.setState( {\r\n          refundTransactionHash: null,\r\n          isRefunded: false,\r\n        } )\r\n        return false\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  async tryWithdraw(_secret) {\r\n    const { secret, secretHash, isEthWithdrawn } = this.state\r\n\r\n    if (!_secret)\r\n      throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n    if (secret && secret != _secret)\r\n      console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n    if (isEthWithdrawn)\r\n      console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n    debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n    const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n    if (secretHash != _secretHash)\r\n      console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n    const flow = this\r\n\r\n    const data = {\r\n      ownerAddress: this.app.getParticipantEthAddress(flow.swap),\r\n      secret: _secret,\r\n    }\r\n\r\n    await this.ethSwap.withdraw(data, (hash) => {\r\n      debug('swap.core:flow')(`TX hash=${hash}`)\r\n      this.setState({\r\n        ethSwapWithdrawTransactionHash: hash,\r\n        canCreateEthTransaction: true,\r\n      })\r\n    }).then(() => {\r\n\r\n      this.finishStep({\r\n        isEthWithdrawn: true,\r\n      }, 'withdraw-eth')\r\n    })\r\n  }\r\n}\r\n\r\nexport default NEXT2ETH\r\n"]}]}