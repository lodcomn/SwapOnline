{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\NEXT2ETHTOKEN.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\NEXT2ETHTOKEN.ts","mtime":1614842913760},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/NEXT2ETHTOKEN.ts"],"names":["debug","constants","util","AtomicAB2UTXO","BigNumber","tokenName","NEXT2ETHTOKEN","swap","nextSwap","getRefundHexTransaction","scriptValues","state","nextScriptValues","secret","then","txHex","setState","refundTxHex","utxoCoin","_flowName","getName","stepNumbers","ethTokenSwap","ownerSwap","participantSwap","abBlockchain","utxoBlockchain","isUTXOSide","Error","step","isStoppedSwap","signTransactionHash","isSignFetching","isParticipantSigned","ethSwapCreationTransactionHash","secretHash","isBalanceFetching","isBalanceEnough","balance","isEthContractFunded","nextSwapWithdrawTransactionHash","ethSwapWithdrawTransactionHash","canCreateEthTransaction","isEthWithdrawn","refundTransactionHash","isRefunded","withdrawFee","isFinished","isSwapExist","_persistState","flow","signUTXOSide","syncBalance","onTransactionHash","txID","utxoScriptCreatingTransactionHash","utxoScriptValues","room","once","sendMessage","event","data","sellAmount","fundScript","amount","checkNEXTScriptBalance","createScript","scriptAddress","fetchUnspents","unspents","length","txid","getBalance","isEnoughMoney","isGreaterThanOrEqualTo","times","scriptBalance","div","dp","helpers","repeatAsyncUntilResult","stopRepeat","finishStep","isNextScriptFunded","waitAB2UTXOContract","withdrawFromAB2UTXO","refund","hash","error","test","console","warn","checkTX","_secret","_secretHash","app","env","bitcoin","crypto","ripemd160","Buffer","from","toString","ownerAddress","getParticipantEthAddress","withdraw","getFromName","getToName","COINS","next","toUpperCase"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\n\r\nexport default (tokenName) => {\r\n\r\n  class NEXT2ETHTOKEN extends AtomicAB2UTXO {\r\n\r\n    _flowName: string\r\n    ethTokenSwap: any\r\n    nextSwap: any\r\n    state: any\r\n\r\n    static getName() {\r\n      return `${this.getFromName()}2${this.getToName()}`\r\n    }\r\n    static getFromName() {\r\n      return constants.COINS.next\r\n    }\r\n    static getToName() {\r\n      return tokenName.toUpperCase()\r\n    }\r\n\r\n    constructor(swap) {\r\n      super(swap)\r\n      this.utxoCoin = `next`\r\n\r\n      this._flowName = NEXT2ETHTOKEN.getName()\r\n\r\n      this.stepNumbers = {\r\n        'sign': 1,\r\n        'submit-secret': 2,\r\n        'sync-balance': 3,\r\n        'lock-utxo': 4,\r\n        'wait-lock-eth': 5,\r\n        'withdraw-eth': 6,\r\n        'finish': 7,\r\n        'end': 8\r\n      }\r\n\r\n      this.ethTokenSwap = swap.ownerSwap\r\n      this.nextSwap      = swap.participantSwap\r\n\r\n      this.abBlockchain = this.ethTokenSwap\r\n      this.utxoBlockchain = this.nextSwap\r\n      this.isUTXOSide = true\r\n\r\n      if (!this.ethTokenSwap) {\r\n        throw new Error('NEXT2ETH: \"ethTokenSwap\" of type object required')\r\n      }\r\n      if (!this.nextSwap) {\r\n        throw new Error('NEXT2ETH: \"nextSwap\" of type object required')\r\n      }\r\n\r\n      this.state = {\r\n        step: 0,\r\n\r\n        isStoppedSwap: false,\r\n\r\n        signTransactionHash: null,\r\n        isSignFetching: false,\r\n        isParticipantSigned: false,\r\n\r\n        ethSwapCreationTransactionHash: null,\r\n\r\n        secretHash: null,\r\n\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: true,\r\n        balance: null,\r\n\r\n        isEthContractFunded: false,\r\n\r\n        nextSwapWithdrawTransactionHash: null,\r\n        ethSwapWithdrawTransactionHash: null,\r\n\r\n        secret: null,\r\n\r\n        canCreateEthTransaction: true,\r\n        isEthWithdrawn: false,\r\n\r\n        refundTransactionHash: null,\r\n        isRefunded: false,\r\n\r\n        withdrawFee: null,\r\n        refundTxHex: null,\r\n        isFinished: false,\r\n        isSwapExist: false,\r\n      }\r\n\r\n      this._persistState()\r\n      super._persistSteps()\r\n    }\r\n\r\n    _persistState() {\r\n      super._persistState()\r\n    }\r\n\r\n    _getSteps() {\r\n      const flow = this\r\n\r\n      return [\r\n\r\n        // 1. Signs\r\n\r\n        async () => {\r\n          this.signUTXOSide()\r\n        },\r\n\r\n        // 2. Create secret, secret hash and NEXT script\r\n\r\n        () => {\r\n          // this.submitSecret()\r\n        },\r\n\r\n        // 3. Check system wallet balance\r\n\r\n        () => {\r\n          this.syncBalance()\r\n        },\r\n\r\n        // 4. Create NEXT Script, fund, notify participant\r\n\r\n        async () => {\r\n          const onTransactionHash = (txID) => {\r\n            const { utxoScriptCreatingTransactionHash, utxoScriptValues } = flow.state\r\n\r\n            if (utxoScriptCreatingTransactionHash) {\r\n              return\r\n            }\r\n\r\n            flow.setState({\r\n              utxoScriptCreatingTransactionHash: txID,\r\n            })\r\n\r\n            flow.swap.room.once('request utxo script', () => {\r\n              flow.swap.room.sendMessage({\r\n                event:  'create utxo script',\r\n                data: {\r\n                  scriptValues: utxoScriptValues,\r\n                  utxoScriptCreatingTransactionHash: txID,\r\n                }\r\n              })\r\n            })\r\n\r\n            flow.swap.room.sendMessage({\r\n              event: 'create utxo script',\r\n              data: {\r\n                scriptValues : utxoScriptValues,\r\n                utxoScriptCreatingTransactionHash : txID,\r\n              }\r\n            })\r\n          }\r\n\r\n          const { sellAmount } = flow.swap\r\n          const { isBalanceEnough, utxoScriptValues } = flow.state\r\n\r\n          if (isBalanceEnough) {\r\n            await flow.nextSwap.fundScript({\r\n              scriptValues: utxoScriptValues,\r\n              amount: sellAmount,\r\n            })\r\n          }\r\n\r\n          const checkNEXTScriptBalance = async () => {\r\n            const { scriptAddress } = this.nextSwap.createScript(utxoScriptValues)\r\n            const unspents = await this.nextSwap.fetchUnspents(scriptAddress)\r\n\r\n            if (unspents.length === 0) {\r\n              return false\r\n            }\r\n\r\n            const txID = unspents[0].txid\r\n\r\n            const balance = await this.nextSwap.getBalance(utxoScriptValues)\r\n\r\n            const isEnoughMoney = new BigNumber(balance).isGreaterThanOrEqualTo(sellAmount.times(1e8))\r\n\r\n            if (isEnoughMoney) {\r\n              flow.setState({\r\n                scriptBalance: new BigNumber(balance).div(1e8).dp(8),\r\n              })\r\n\r\n              onTransactionHash(txID)\r\n            }\r\n\r\n            return isEnoughMoney\r\n          }\r\n\r\n          await util.helpers.repeatAsyncUntilResult(async (stopRepeat) => {\r\n            const { isStoppedSwap } = flow.state\r\n\r\n            if (!isStoppedSwap) {\r\n              return await checkNEXTScriptBalance()\r\n            } else {\r\n              stopRepeat()\r\n            }\r\n          })\r\n\r\n          const { isStoppedSwap } = flow.state\r\n\r\n          if (!isStoppedSwap) {\r\n            flow.finishStep({\r\n              isNextScriptFunded: true,\r\n            }, { step: 'lock-utxo' })\r\n          }\r\n        },\r\n\r\n        // 5. Wait participant creates ETH Contract\r\n\r\n        async () => {\r\n          await this.ethTokenSwap.waitAB2UTXOContract({\r\n            flow,\r\n            utxoCoin: `next`,\r\n          })\r\n        },\r\n\r\n        // 6. Withdraw\r\n\r\n        async () => {\r\n          await flow.ethTokenSwap.withdrawFromAB2UTXO({ flow })\r\n        },\r\n\r\n        // 7. Finish\r\n\r\n        () => {\r\n          flow.swap.room.once('swap finished', ({nextSwapWithdrawTransactionHash}) => {\r\n            flow.setState({\r\n              nextSwapWithdrawTransactionHash,\r\n            })\r\n          })\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'request swap finished',\r\n          })\r\n\r\n          flow.finishStep({\r\n            isFinished: true,\r\n          }, 'finish')\r\n        },\r\n\r\n        // 8. Finished!\r\n\r\n        () => {}\r\n      ]\r\n    }\r\n\r\n    async skipSyncBalance() {\r\n      this.finishStep({}, { step: 'sync-balance' })\r\n    }\r\n\r\n    getRefundTxHex = () => {\r\n      this.nextSwap.getRefundHexTransaction({\r\n        scriptValues: this.state.nextScriptValues,\r\n        secret: this.state.secret,\r\n      })\r\n        .then((txHex) => {\r\n          this.setState({\r\n            refundTxHex: txHex,\r\n          })\r\n        })\r\n    }\r\n\r\n    tryRefund() {\r\n      const flow = this\r\n      const { utxoScriptValues, secret } = flow.state\r\n\r\n      return flow.nextSwap.refund({\r\n        scriptValues: utxoScriptValues,\r\n        secret: secret,\r\n      })\r\n        .then((hash) => {\r\n          if (!hash) {\r\n            return false\r\n          }\r\n\r\n          this.swap.room.sendMessage({\r\n            event: 'utxo refund completed',\r\n          })\r\n\r\n          flow.setState({\r\n            refundTransactionHash: hash,\r\n            isRefunded: true,\r\n            isSwapExist: false,\r\n          }, true)\r\n\r\n          return true\r\n        })\r\n        .catch((error) => {\r\n          if (/Address is empty/.test(error)) {\r\n            // TODO - fetch TX list to script for refund TX\r\n            flow.setState({\r\n              isRefunded: true,\r\n              isSwapExist: false,\r\n            }, true)\r\n            return true\r\n          } else {\r\n            console.warn('Next refund:', error)\r\n\r\n            return false\r\n          }\r\n        })\r\n    }\r\n\r\n    async isRefundSuccess() {\r\n      const { refundTransactionHash, isRefunded } = this.state\r\n      if (refundTransactionHash && isRefunded) {\r\n        if (await this.nextSwap.checkTX(refundTransactionHash)) {\r\n          return true\r\n        } else {\r\n          console.warn('NEXT2ETHTOKEN - unknown refund transaction')\r\n          this.setState( {\r\n            refundTransactionHash: null,\r\n            isRefunded: false,\r\n          } )\r\n          return false\r\n        }\r\n      }\r\n      return false\r\n    }\r\n\r\n    async tryWithdraw(_secret) {\r\n      const { secret, secretHash, isEthWithdrawn } = this.state\r\n\r\n      if (!_secret)\r\n        throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n      if (secret && secret != _secret)\r\n        console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n      if (isEthWithdrawn)\r\n        console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n      debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n      const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n      if (secretHash != _secretHash)\r\n        console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n      const flow = this\r\n\r\n      const data = {\r\n        ownerAddress: this.app.getParticipantEthAddress(flow.swap),\r\n        secret: _secret,\r\n      }\r\n\r\n      await this.ethTokenSwap.withdraw(data, (hash) => {\r\n        debug('swap.core:flow')(`TX hash=${hash}`)\r\n        this.setState({\r\n          ethSwapWithdrawTransactionHash: hash,\r\n          canCreateEthTransaction: true,\r\n        })\r\n      }).then(() => {\r\n\r\n        this.finishStep({\r\n          isEthWithdrawn: true,\r\n        }, 'withdraw-eth')\r\n      })\r\n    }\r\n  }\r\n\r\n  return NEXT2ETHTOKEN\r\n}\r\n"]}]}