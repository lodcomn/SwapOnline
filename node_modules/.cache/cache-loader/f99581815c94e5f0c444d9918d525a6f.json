{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\web3connect\\index.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\web3connect\\index.ts","mtime":1614852519248},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/web3connect/index.ts"],"names":["EventEmitter","ConnectorEvent","Web3","SUPPORTED_PROVIDERS","INJECTED_TYPE","getProviderByName","isInjectedEnabled","isMobile","Web3Connect","options","providers","Object","keys","map","key","filter","name","INJECTED","web3RPC","web3ChainId","_web3RPC","_web3ChainId","_checkIsDAppBrowser","cachedProviderName","localStorage","getItem","lsProvider","isConnected","then","Connect","_cachedProviderName","_cachedProvider","_setupEvents","_cacheProviderData","_isConnected","_inited","clearCache","_walletLocked","WALLETCONNECT","getInjectedTitle","getInjectedType","NONE","UNKNOWN","OPERA","METAMASK","TRUST","LIQUALITY","window","ethereum","isLiquality","isTrust","isMetaMask","opr","addons","opera","navigator","userAgent","indexOf","_isDAppBrowser","cb","waitInit","setTimeout","removeItem","_cachedChainId","_cachedAddress","_cachedWeb3","on","Update","data","account","emit","chainId","Deactivate","getAccount","getChainId","getProvider","_web3provider","enable","send","e","t","isMetamask","provider","_connector","setItem","isLocked","Error","Number","parseInt","Disconnect"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport { EventEmitter } from 'events'\r\nimport { ConnectorEvent } from '@web3-react/types'\r\nimport Web3 from 'web3'\r\nimport SUPPORTED_PROVIDERS from './providers/supported'\r\nimport INJECTED_TYPE from './providers/InjectedType'\r\nimport getProviderByName from './providers'\r\nimport { isInjectedEnabled } from './providers'\r\nimport { isMobile } from 'react-device-detect'\r\n\r\n\r\nexport default class Web3Connect extends EventEmitter {\r\n  _cachedProvider = null\r\n  _cachedProviderName = null\r\n  _cachedChainId = null\r\n  _cachedAddress = null\r\n  _cachedWeb3 = null\r\n  _isConnected = false\r\n\r\n  _isDAppBrowser = false\r\n\r\n  _web3RPC = null\r\n  _web3ChainId = null\r\n\r\n  _inited = false\r\n  _walletLocked = false\r\n\r\n  constructor(options) {\r\n    super()\r\n    const {\r\n      web3RPC,\r\n      web3ChainId,\r\n    } = options\r\n\r\n    this._web3RPC = web3RPC\r\n    this._web3ChainId = web3ChainId\r\n\r\n    this._checkIsDAppBrowser()\r\n\r\n    // Предыдущий провайдер (после перезагрузки восстанавливаем его)\r\n    const cachedProviderName = localStorage.getItem(`WEB3CONNECT:PROVIDER`)\r\n    if (cachedProviderName) {\r\n      //@\r\n      const lsProvider = getProviderByName(this, cachedProviderName)\r\n      if (lsProvider) {\r\n        lsProvider.isConnected().then(async (isConnected) => {\r\n          if (isConnected) {\r\n            if (await lsProvider.Connect()) {\r\n              this._cachedProviderName = cachedProviderName\r\n              this._cachedProvider = lsProvider\r\n              this._setupEvents()\r\n              await this._cacheProviderData()\r\n              this._isConnected = true\r\n              this._inited = true\r\n              return\r\n            }\r\n          }\r\n          this.clearCache()\r\n          this._inited = true\r\n        })\r\n      } else {\r\n        this.clearCache()\r\n        this._inited = true\r\n      }\r\n    } else {\r\n      this._inited = true\r\n    }\r\n  }\r\n\r\n  isLocked() {\r\n    return this._walletLocked\r\n  }\r\n\r\n  getProviderTitle() {\r\n    switch (this._cachedProviderName) {\r\n      case SUPPORTED_PROVIDERS.WALLETCONNECT:\r\n        return 'Wallet Connect'\r\n      case SUPPORTED_PROVIDERS.INJECTED:\r\n        return this.getInjectedTitle()\r\n      default:\r\n        return `Web3 provider`\r\n    }\r\n  }\r\n\r\n  getInjectedTitle() {\r\n    switch (this.getInjectedType()) {\r\n      case INJECTED_TYPE.NONE: return 'Not installed'\r\n      case INJECTED_TYPE.UNKNOWN: return 'Injected Web3'\r\n      case INJECTED_TYPE.OPERA: return 'Opera Crypto Wallet'\r\n      case INJECTED_TYPE.METAMASK: return 'MetaMask'\r\n      case INJECTED_TYPE.TRUST: return 'Trust Wallet'\r\n      case INJECTED_TYPE.LIQUALITY: return 'Liquality Wallet'\r\n    }\r\n  }\r\n\r\n  getProviderType() {\r\n     switch (this._cachedProviderName) {\r\n      case SUPPORTED_PROVIDERS.WALLETCONNECT:\r\n        return SUPPORTED_PROVIDERS.WALLETCONNECT\r\n      case SUPPORTED_PROVIDERS.INJECTED:\r\n        return this.getInjectedType()\r\n      default:\r\n        return `NONE`\r\n    }\r\n  }\r\n\r\n  getInjectedType() {\r\n    if (window && window.ethereum) {\r\n      if (window.ethereum.isLiquality) return INJECTED_TYPE.LIQUALITY\r\n      if (window.ethereum.isTrust) return INJECTED_TYPE.TRUST\r\n      if (window.ethereum.isMetaMask) return INJECTED_TYPE.METAMASK\r\n      if ((!!window.opr && !!window.opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0) return INJECTED_TYPE.OPERA\r\n\r\n      return INJECTED_TYPE.UNKNOWN\r\n    } else {\r\n      return INJECTED_TYPE.NONE\r\n    }\r\n  }\r\n\r\n  _checkIsDAppBrowser() {\r\n    if (isMobile) {\r\n\r\n      if (window\r\n        && window.ethereum\r\n      ) {\r\n        this._isDAppBrowser = true\r\n      }\r\n    }\r\n  }\r\n\r\n  isInjectedEnabled() {\r\n    return isInjectedEnabled()\r\n  }\r\n\r\n  onInit(cb) {\r\n    const waitInit = () => {\r\n      if (this._inited) {\r\n        cb()\r\n      } else {\r\n        setTimeout( waitInit, 100 )\r\n      }\r\n    }\r\n    waitInit()\r\n  }\r\n\r\n  hasCachedProvider() {\r\n    const cachedProviderName = localStorage.getItem(`WEB3CONNECT:PROVIDER`)\r\n    if (cachedProviderName) {\r\n      //@\r\n      const lsProvider = getProviderByName(this, cachedProviderName)\r\n      if (lsProvider) return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  clearCache() {\r\n    localStorage.removeItem(`WEB3CONNECT:PROVIDER`)\r\n    this._cachedProviderName = null\r\n    this._cachedProvider = null\r\n    this._cachedChainId = null\r\n    this._cachedAddress = null\r\n    this._cachedWeb3 = null\r\n  }\r\n\r\n  _setupEvents() {\r\n    if (this._cachedProvider) {\r\n      this._cachedProvider.on(ConnectorEvent.Update, (data) => {\r\n        if (data\r\n          && data.account\r\n          && data.account != this._cachedAddress\r\n        ) {\r\n          this._cachedAddress = data.account\r\n          this.emit('accountChange')\r\n          this.emit('updated')\r\n        }\r\n        if (data\r\n          && data.chainId\r\n          && data.chainId !== this._cachedChainId\r\n        ) {\r\n          this._cachedChainId = data.chainId\r\n          this.emit('chainChanged')\r\n          this.emit('updated')\r\n        }\r\n      })\r\n      this._cachedProvider.on(ConnectorEvent.Deactivate, () => {\r\n        this.clearCache()\r\n        this.emit('disconnect')\r\n        this.emit('updated')\r\n      })\r\n    }\r\n  }\r\n\r\n  async _cacheProviderData() {\r\n    this._cachedAddress = await this._cachedProvider.getAccount()\r\n    this._cachedChainId = await this._cachedProvider.getChainId()\r\n    const _web3provider = await this._cachedProvider.getProvider()\r\n    await _web3provider.enable()\r\n\r\n    // @ToDo - Hard fix walletconnect\r\n    // https://github.com/WalletConnect/walletconnect-monorepo/issues/384\r\n    if (window) {\r\n      window.send = (e,t) => {\r\n        return _web3provider.send(e,t)\r\n      }\r\n    }\r\n\r\n    this._cachedWeb3 = new Web3(\r\n      _web3provider\r\n    )\r\n    this._cachedWeb3.isMetamask = true\r\n  }\r\n\r\n  async connectTo(provider) {\r\n    this._walletLocked = false\r\n    if (SUPPORTED_PROVIDERS[provider]) {\r\n      const _connector = getProviderByName(this, provider, true)\r\n      if (_connector) {\r\n        if (await _connector.Connect()) {\r\n          localStorage.setItem(`WEB3CONNECT:PROVIDER`, provider)\r\n          this._cachedProviderName = provider\r\n          this._cachedProvider = _connector\r\n          this._setupEvents()\r\n          await this._cacheProviderData()\r\n          this._isConnected = true\r\n          this.emit('connected')\r\n          this.emit('updated')\r\n          return true\r\n        } else {\r\n          if (_connector.isLocked()) {\r\n            this._walletLocked = true\r\n          }\r\n        }\r\n      }\r\n      return false\r\n    } else {\r\n      throw new Error(`Not supported provider ${provider}`)\r\n    }\r\n  }\r\n\r\n  getProviders = () => {\r\n    const providers = Object.keys(SUPPORTED_PROVIDERS).map((key) => SUPPORTED_PROVIDERS[key])\r\n    return (isInjectedEnabled())\r\n      ? providers\r\n      : providers.filter((name) => name !== SUPPORTED_PROVIDERS.INJECTED)\r\n  }\r\n\r\n  isConnected() {\r\n    return (this._cachedProvider) ? true : false\r\n  }\r\n\r\n  isCorrectNetwork() {\r\n    // @ToDo - test Metamask dAppBrowser\r\n    return (\r\n      `${this._web3ChainId}` === `${this._cachedChainId}`\r\n      || this._web3ChainId === Number.parseInt(this._cachedChainId)\r\n      || `0x0${this._web3ChainId}` === `${this._cachedChainId}`\r\n      || `0x${this._web3ChainId}` === `${this._cachedChainId}` // Opera Mobile\r\n    )\r\n  }\r\n\r\n  getWeb3() {\r\n    if (this._cachedProvider) {\r\n      return this._cachedWeb3\r\n    }\r\n  }\r\n\r\n  getAddress() {\r\n    if (this._cachedProvider) {\r\n      return this._cachedAddress\r\n    }\r\n  }\r\n\r\n  async Disconnect() {\r\n    if (this._cachedProvider) {\r\n      this._isConnected = false\r\n      await this._cachedProvider.Disconnect()\r\n      this.clearCache()\r\n      this.emit('disconnect')\r\n      this.emit('updated')\r\n    }\r\n  }\r\n}\r\n"]}]}