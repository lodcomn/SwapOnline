{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\pages\\Invoices\\CreateInvoice\\index.tsx","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\pages\\Invoices\\CreateInvoice\\index.tsx","mtime":1614842914190},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI7CmltcG9ydCBfaW5oZXJpdHMgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cyI7CmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YiOwoKdmFyIF9kZWMsIF9jbGFzczsKCmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIkBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yIjsKCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKaW1wb3J0IHsgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlZGFjdGlvbic7CmltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJ2hlbHBlcnMnOwppbXBvcnQgeyBsb2NhbGlzZWRVcmwgfSBmcm9tICdoZWxwZXJzL2xvY2FsZSc7CmltcG9ydCB7IGluamVjdEludGwgfSBmcm9tICdyZWFjdC1pbnRsJzsKaW1wb3J0IGFjdGlvbnMgZnJvbSAncmVkdXgvYWN0aW9ucyc7CmltcG9ydCB7IGxpbmtzIH0gZnJvbSAnaGVscGVycyc7CnZhciBDcmVhdGVJbnZvaWNlID0gKF9kZWMgPSBjb25uZWN0KGZ1bmN0aW9uIChfcmVmKSB7CiAgdmFyIF9yZWYkdXNlciA9IF9yZWYudXNlciwKICAgICAgYnRjRGF0YSA9IF9yZWYkdXNlci5idGNEYXRhLAogICAgICBldGhEYXRhID0gX3JlZiR1c2VyLmV0aERhdGEsCiAgICAgIGdob3N0RGF0YSA9IF9yZWYkdXNlci5naG9zdERhdGEsCiAgICAgIG5leHREYXRhID0gX3JlZiR1c2VyLm5leHREYXRhOwogIHJldHVybiB7CiAgICBkYXRhOiB7CiAgICAgIGJ0YzogYnRjRGF0YSwKICAgICAgZXRoOiBldGhEYXRhLAogICAgICBnaG9zdDogZ2hvc3REYXRhLAogICAgICBuZXh0OiBuZXh0RGF0YQogICAgfQogIH07Cn0pLCBfZGVjKF9jbGFzcyA9IGluamVjdEludGwoX2NsYXNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUHVyZUNvbXBvbmVudCkgewogIF9pbmhlcml0cyhDcmVhdGVJbnZvaWNlLCBfUHVyZUNvbXBvbmVudCk7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoQ3JlYXRlSW52b2ljZSk7CgogIGZ1bmN0aW9uIENyZWF0ZUludm9pY2UocHJvcHMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDcmVhdGVJbnZvaWNlKTsKCiAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENyZWF0ZUludm9pY2UsIFt7CiAgICBrZXk6ICJjb21wb25lbnREaWRNb3VudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NvbXBvbmVudERpZE1vdW50ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3RoaXMkcHJvcHMsIF90aGlzJHByb3BzJG1hdGNoJHBhciwgdHlwZSwgd2FsbGV0LCBkYXRhLCBhZGRyZXNzOwoKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLCBfdGhpcyRwcm9wcyRtYXRjaCRwYXIgPSBfdGhpcyRwcm9wcy5tYXRjaC5wYXJhbXMsIHR5cGUgPSBfdGhpcyRwcm9wcyRtYXRjaCRwYXIudHlwZSwgd2FsbGV0ID0gX3RoaXMkcHJvcHMkbWF0Y2gkcGFyLndhbGxldCwgZGF0YSA9IF90aGlzJHByb3BzLmRhdGE7CgogICAgICAgICAgICAgICAgaWYgKCFkYXRhW3R5cGVdKSB7CiAgICAgICAgICAgICAgICAgIGRhdGFbdHlwZV0gPSBhY3Rpb25zLmNvcmUuZ2V0V2FsbGV0KHsKICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeTogdHlwZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoISh0eXBlICYmIHdhbGxldCAmJiBkYXRhW3R5cGVdKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBkYXRhW3R5cGVdLmFkZHJlc3M7CiAgICAgICAgICAgICAgICBhY3Rpb25zLm1vZGFscy5vcGVuKGNvbnN0YW50cy5tb2RhbHMuSW52b2ljZU1vZGFsLCB7CiAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiB0eXBlLnRvVXBwZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgIHRvQWRkcmVzczogd2FsbGV0LAogICAgICAgICAgICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICAgICAgICAgICAgICBkaXNhYmxlQ2xvc2U6IHRydWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2codHlwZSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zLnVzZXIuZ2V0SW5mb0Fib3V0Q3VycmVuY3koW3R5cGUudG9VcHBlckNhc2UoKV0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKGxvY2FsaXNlZFVybChsaW5rcy5ub3RGb3VuZCkpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICAgIHJldHVybiBfY29tcG9uZW50RGlkTW91bnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGNvbXBvbmVudERpZE1vdW50OwogICAgfSgpCiAgfSwgewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENyZWF0ZUludm9pY2U7Cn0oUHVyZUNvbXBvbmVudCkpIHx8IF9jbGFzcykgfHwgX2NsYXNzKTsKZXhwb3J0IHsgQ3JlYXRlSW52b2ljZSBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/pages/Invoices/CreateInvoice/index.tsx"],"names":["PureComponent","connect","constants","localisedUrl","injectIntl","actions","links","CreateInvoice","user","btcData","ethData","ghostData","nextData","data","btc","eth","ghost","next","props","match","params","type","wallet","core","getWallet","currency","address","modals","open","InvoiceModal","toUpperCase","toAddress","disableClose","console","log","getInfoAboutCurrency","history","push","notFound"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,KAAT,QAAyB,SAAzB;IA0BqBC,a,WAlBpBN,OAAO,CAAC,gBAOH;AAAA,uBANJO,IAMI;AAAA,MALFC,OAKE,aALFA,OAKE;AAAA,MAJFC,OAIE,aAJFA,OAIE;AAAA,MAHFC,SAGE,aAHFA,SAGE;AAAA,MAFFC,QAEE,aAFFA,QAEE;AACJ,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,GAAG,EAAEL,OADD;AAEJM,MAAAA,GAAG,EAAEL,OAFD;AAGJM,MAAAA,KAAK,EAAEL,SAHH;AAIJM,MAAAA,IAAI,EAAEL;AAJF;AADD,GAAP;AAQD,CAhBO,C,gBAiBPR,U;;;;;AAEC,yBAAYc,KAAZ,EAAmB;AAAA;;AAAA,6BACXA,KADW;AAElB;;;;;wFAED;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8BASM,KAAKA,KATX,sCAEIC,KAFJ,CAGMC,MAHN,EAIQC,IAJR,yBAIQA,IAJR,EAKQC,MALR,yBAKQA,MALR,EAQIT,IARJ,eAQIA,IARJ;;AAWE,oBAAI,CAACA,IAAI,CAACQ,IAAD,CAAT,EAAiB;AACfR,kBAAAA,IAAI,CAACQ,IAAD,CAAJ,GAAahB,OAAO,CAACkB,IAAR,CAAaC,SAAb,CAAuB;AAClCC,oBAAAA,QAAQ,EAAEJ;AADwB,mBAAvB,CAAb;AAGD;;AAfH,sBAiBMA,IAAI,IAAIC,MAAR,IAAkBT,IAAI,CAACQ,IAAD,CAjB5B;AAAA;AAAA;AAAA;;AAkBUK,gBAAAA,OAlBV,GAkBoBb,IAAI,CAACQ,IAAD,CAAJ,CAAWK,OAlB/B;AAoBIrB,gBAAAA,OAAO,CAACsB,MAAR,CAAeC,IAAf,CAAoB1B,SAAS,CAACyB,MAAV,CAAiBE,YAArC,EAAmD;AACjDJ,kBAAAA,QAAQ,EAAEJ,IAAI,CAACS,WAAL,EADuC;AAEjDC,kBAAAA,SAAS,EAAET,MAFsC;AAGjDI,kBAAAA,OAAO,EAAPA,OAHiD;AAIjDM,kBAAAA,YAAY,EAAE;AAJmC,iBAAnD;AAOAC,gBAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AA3BJ;AAAA,uBA4BUhB,OAAO,CAACG,IAAR,CAAa2B,oBAAb,CAAkC,CAACd,IAAI,CAACS,WAAL,EAAD,CAAlC,CA5BV;;AAAA;AAAA;AAAA;;AAAA;AA+BI,qBAAKZ,KAAL,CAAWkB,OAAX,CAAmBC,IAAnB,CAAwBlC,YAAY,CAACG,KAAK,CAACgC,QAAP,CAApC;;AA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAmCA,kBAAS;AACP,aAAO,IAAP;AACD;;;;EA1CwCtC,a;SAAtBO,a","sourcesContent":["import { PureComponent } from 'react'\r\nimport { connect } from 'redaction'\r\nimport { constants } from 'helpers'\r\nimport { localisedUrl } from 'helpers/locale'\r\nimport { injectIntl } from 'react-intl'\r\nimport actions from 'redux/actions'\r\nimport { links }    from 'helpers'\r\n\r\ntype CreateInvoiceProps = {\r\n  history: IUniversalObj\r\n  match: IUniversalObj\r\n  data: IUniversalObj\r\n}\r\n\r\n@connect(({\r\n  user: {\r\n    btcData,\r\n    ethData,\r\n    ghostData,\r\n    nextData,\r\n  },\r\n}) => {\r\n  return {\r\n    data: {\r\n      btc: btcData,\r\n      eth: ethData,\r\n      ghost: ghostData,\r\n      next: nextData,\r\n    }\r\n  }\r\n})\r\n@injectIntl\r\nexport default class CreateInvoice extends PureComponent<CreateInvoiceProps> {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let {\r\n      match: {\r\n        params: {\r\n          type,\r\n          wallet,\r\n        },\r\n      },\r\n      data,\r\n    } = this.props\r\n\r\n    if (!data[type]) {\r\n      data[type] = actions.core.getWallet({\r\n        currency: type,\r\n      })\r\n    }\r\n\r\n    if (type && wallet && data[type]) {\r\n      const address = data[type].address\r\n\r\n      actions.modals.open(constants.modals.InvoiceModal, {\r\n        currency: type.toUpperCase(),\r\n        toAddress: wallet,\r\n        address,\r\n        disableClose: true,\r\n      })\r\n\r\n      console.log(type)\r\n      await actions.user.getInfoAboutCurrency([type.toUpperCase()]);\r\n\r\n    } else {\r\n      this.props.history.push(localisedUrl(links.notFound))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return null\r\n  }\r\n}\r\n"]}]}