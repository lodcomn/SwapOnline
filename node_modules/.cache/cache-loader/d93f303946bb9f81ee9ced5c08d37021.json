{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\BTC2ETHTOKEN.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\BTC2ETHTOKEN.ts","mtime":1614842913755},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/BTC2ETHTOKEN.ts"],"names":["debug","constants","AtomicAB2UTXO","tokenName","BTC2ETHTOKEN","swap","btcSwap","getRefundHexTransaction","scriptValues","state","utxoScriptValues","secret","then","txHex","setState","refundTxHex","utxoCoin","_flowName","getName","stepNumbers","ethTokenSwap","ownerSwap","participantSwap","abBlockchain","utxoBlockchain","isUTXOSide","Error","step","isStoppedSwap","signTransactionHash","isSignFetching","isParticipantSigned","ethSwapCreationTransactionHash","secretHash","isBalanceFetching","isBalanceEnough","balance","isEthContractFunded","btcSwapWithdrawTransactionHash","ethSwapWithdrawTransactionHash","canCreateEthTransaction","isEthWithdrawn","refundTransactionHash","isRefunded","withdrawFee","isFinished","isSwapExist","utxoFundError","_persistState","flow","signUTXOSide","syncBalance","fundSwapScript","waitAB2UTXOContract","withdrawFromAB2UTXO","room","once","sendMessage","event","finishStep","refund","hash","error","test","console","warn","checkTX","_secret","_secretHash","app","env","bitcoin","crypto","ripemd160","Buffer","from","toString","data","ownerAddress","getParticipantEthAddress","withdraw","getFromName","getToName","COINS","btc","toUpperCase"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport { EthTokenSwap, BtcSwap } from 'swap.swaps'\r\n\r\n\r\nexport default (tokenName) => {\r\n\r\n  class BTC2ETHTOKEN extends AtomicAB2UTXO {\r\n\r\n    _flowName: string\r\n    ethTokenSwap: EthTokenSwap\r\n    btcSwap: BtcSwap\r\n    state: any\r\n\r\n    static getName() {\r\n      return `${this.getFromName()}2${this.getToName()}`\r\n    }\r\n    static getFromName() {\r\n      return constants.COINS.btc\r\n    }\r\n    static getToName() {\r\n      return tokenName.toUpperCase()\r\n    }\r\n    constructor(swap) {\r\n      super(swap)\r\n      this.utxoCoin = `btc`\r\n      this._flowName = BTC2ETHTOKEN.getName()\r\n\r\n      this.stepNumbers = {\r\n        'sign': 1,\r\n        'submit-secret': 2,\r\n        'sync-balance': 3,\r\n        'lock-utxo': 4,\r\n        'wait-lock-eth': 5,\r\n        'withdraw-eth': 6,\r\n        'finish': 7,\r\n        'end': 8\r\n      }\r\n\r\n      this.ethTokenSwap = swap.ownerSwap\r\n      this.btcSwap      = swap.participantSwap\r\n\r\n      this.abBlockchain = this.ethTokenSwap\r\n      this.utxoBlockchain = this.btcSwap\r\n      this.isUTXOSide = true\r\n\r\n      if (!this.ethTokenSwap) {\r\n        throw new Error('BTC2ETH: \"ethTokenSwap\" of type object required')\r\n      }\r\n      if (!this.btcSwap) {\r\n        throw new Error('BTC2ETH: \"btcSwap\" of type object required')\r\n      }\r\n\r\n      this.state = {\r\n        step: 0,\r\n\r\n        isStoppedSwap: false,\r\n\r\n        signTransactionHash: null,\r\n        isSignFetching: false,\r\n        isParticipantSigned: false,\r\n\r\n        ethSwapCreationTransactionHash: null,\r\n\r\n        secretHash: null,\r\n\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: true,\r\n        balance: null,\r\n\r\n        isEthContractFunded: false,\r\n\r\n        btcSwapWithdrawTransactionHash: null,\r\n        ethSwapWithdrawTransactionHash: null,\r\n\r\n        secret: null,\r\n\r\n        canCreateEthTransaction: true,\r\n        isEthWithdrawn: false,\r\n\r\n        refundTransactionHash: null,\r\n        isRefunded: false,\r\n\r\n        withdrawFee: null,\r\n        refundTxHex: null,\r\n        isFinished: false,\r\n        isSwapExist: false,\r\n        utxoFundError: null,\r\n      }\r\n\r\n      this._persistState()\r\n      super._persistSteps()\r\n    }\r\n\r\n    _persistState() {\r\n      super._persistState()\r\n    }\r\n\r\n    _getSteps() {\r\n      const flow = this\r\n\r\n      return [\r\n\r\n        // 1. Signs\r\n\r\n        async () => {\r\n          this.signUTXOSide()\r\n        },\r\n\r\n        // 2. Create secret, secret hash and BTC script\r\n\r\n        () => {\r\n          // this.submitSecret()\r\n        },\r\n\r\n        // 3. Check system wallet balance\r\n\r\n        () => {\r\n          this.syncBalance()\r\n        },\r\n\r\n        // 4. Create BTC Script, fund, notify participant\r\n\r\n        async () => {\r\n          await this.btcSwap.fundSwapScript({\r\n            flow,\r\n          })\r\n        },\r\n\r\n        // 5. Wait participant creates ETH Contract\r\n\r\n        async () => {\r\n          await this.ethTokenSwap.waitAB2UTXOContract({\r\n            flow,\r\n            utxoCoin: `btc`,\r\n          })\r\n        },\r\n\r\n        // 6. Withdraw\r\n\r\n        async () => {\r\n          await flow.ethTokenSwap.withdrawFromAB2UTXO({ flow })\r\n        },\r\n\r\n        // 7. Finish\r\n\r\n        () => {\r\n          flow.swap.room.once('swap finished', ({btcSwapWithdrawTransactionHash}) => {\r\n            flow.setState({\r\n              btcSwapWithdrawTransactionHash,\r\n            })\r\n          })\r\n\r\n          flow.swap.room.sendMessage({\r\n            event: 'request swap finished',\r\n          })\r\n\r\n          flow.finishStep({\r\n            isFinished: true,\r\n          }, 'finish')\r\n        },\r\n\r\n        // 8. Finished!\r\n\r\n        () => {}\r\n      ]\r\n    }\r\n\r\n    async skipSyncBalance() {\r\n      this.finishStep({}, { step: 'sync-balance' })\r\n    }\r\n\r\n    getRefundTxHex = () => {\r\n      this.btcSwap.getRefundHexTransaction({\r\n        scriptValues: this.state.utxoScriptValues,\r\n        secret: this.state.secret,\r\n      })\r\n        .then((txHex) => {\r\n          this.setState({\r\n            refundTxHex: txHex,\r\n          })\r\n        })\r\n    }\r\n\r\n    tryRefund() {\r\n      const flow = this\r\n      const { utxoScriptValues, secret } = flow.state\r\n\r\n      return flow.btcSwap.refund({\r\n        scriptValues: utxoScriptValues,\r\n        secret: secret,\r\n      })\r\n        .then((hash) => {\r\n          if (!hash) {\r\n            return false\r\n          }\r\n\r\n          this.swap.room.sendMessage({\r\n            event: 'utxo refund completed',\r\n          })\r\n\r\n          flow.setState({\r\n            refundTransactionHash: hash,\r\n            isRefunded: true,\r\n            isSwapExist: false,\r\n          }, true)\r\n\r\n          return true\r\n        })\r\n        .catch((error) => {\r\n          if (/Address is empty/.test(error)) {\r\n            // TODO - fetch TX list to script for refund TX\r\n            flow.setState({\r\n              isRefunded: true,\r\n              isSwapExist: false,\r\n            }, true)\r\n            return true\r\n          } else {\r\n            console.warn('Btc refund:', error)\r\n\r\n            return false\r\n          }\r\n        })\r\n    }\r\n\r\n    async isRefundSuccess() {\r\n      const { refundTransactionHash, isRefunded } = this.state\r\n      if (refundTransactionHash && isRefunded) {\r\n        if (await this.btcSwap.checkTX(refundTransactionHash)) {\r\n          return true\r\n        } else {\r\n          console.warn('BTC2ETHTOKEN - unknown refund transaction')\r\n          this.setState( {\r\n            refundTransactionHash: null,\r\n            isRefunded: false,\r\n          } )\r\n          return false\r\n        }\r\n      }\r\n      return false\r\n    }\r\n\r\n    async tryWithdraw(_secret) {\r\n      const { secret, secretHash, isEthWithdrawn } = this.state\r\n\r\n      if (!_secret)\r\n        throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n      if (secret && secret != _secret)\r\n        console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n      if (isEthWithdrawn)\r\n        console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n      debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n      const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n      if (secretHash != _secretHash)\r\n        console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n      const data = {\r\n        ownerAddress: this.app.getParticipantEthAddress(this.swap),\r\n        secret: _secret,\r\n      }\r\n\r\n      await this.ethTokenSwap.withdraw(data, (hash) => {\r\n        debug('swap.core:flow')(`TX hash=${hash}`)\r\n        this.setState({\r\n          ethSwapWithdrawTransactionHash: hash,\r\n          canCreateEthTransaction: true,\r\n        })\r\n      }).then(() => {\r\n\r\n        this.finishStep({\r\n          isEthWithdrawn: true,\r\n        }, 'withdraw-eth')\r\n      })\r\n    }\r\n  }\r\n\r\n  return BTC2ETHTOKEN\r\n}\r\n"]}]}