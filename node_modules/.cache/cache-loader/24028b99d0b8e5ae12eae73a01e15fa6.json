{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\messaging\\pubsubRoom\\connection.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\common\\messaging\\pubsubRoom\\connection.ts","mtime":1614842913716},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/common/messaging/pubsubRoom/connection.ts"],"names":["EventEmitter","pipe","PROTOCOL","encoding","Connection","remoteId","libp2p","room","_remoteId","_libp2p","_room","_connection","_connecting","message","push","once","_connect","end","_isConnectedToRemote","emit","peerInfo","peerStore","get","dialProtocol","id","dial","stream","FiFoMessageQueue","source","then","err","console","log","connections","keys","peerId","_idB58String","Symbol","asyncIterator","_queue","_ended","Error","_resolve","done","value","length","shift","Promise","resolve"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nimport { EventEmitter } from 'events'\r\nimport pipe from 'it-pipe'\r\n\r\n\r\nimport { PROTOCOL } from './protocol'\r\nimport encoding from './encoding'\r\n\r\nimport debug from 'debug'\r\n\r\n\r\nexport default class Connection extends EventEmitter {\r\n\r\n  _remoteId: any\r\n  _libp2p: any\r\n  _room: any\r\n  _connection: any\r\n  _connecting: any\r\n\r\n  constructor (remoteId, libp2p, room) {\r\n    super()\r\n    this._remoteId = remoteId\r\n    this._libp2p = libp2p\r\n    this._room = room\r\n    this._connection = null\r\n    this._connecting = false\r\n  }\r\n\r\n  push(message) {\r\n    if (this._connection) {\r\n      this._connection.push(encoding(message))\r\n\r\n      return\r\n    }\r\n\r\n    this.once('connect', () => {\r\n      this.push(message)\r\n    })\r\n\r\n    if (!this._connecting) {\r\n      this._connect()\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    if (this._connection) {\r\n      this._connection.end()\r\n    }\r\n  }\r\n\r\n  async _connect() {\r\n    this._connecting = true\r\n\r\n    if (!this._isConnectedToRemote()) {\r\n      this.emit('disconnect')\r\n      this._connecting = false\r\n      return // early\r\n    }\r\n\r\n    const peerInfo = this._libp2p.peerStore.get(this._remoteId)\r\n\r\n    const dial = await this._libp2p.dialProtocol(peerInfo.id, PROTOCOL)\r\n\r\n    const { stream } = dial\r\n\r\n    this._connection = new FiFoMessageQueue()\r\n\r\n    pipe(this._connection, stream, async (source) => {\r\n      this._connecting = false\r\n      this.emit('connect', this._connection)\r\n\r\n      for await (const message of source) {\r\n        this.emit('message', message)\r\n      }\r\n    })\r\n      .then(() => {\r\n        this.emit('disconnect')\r\n      }, async (err) => {\r\n        try {\r\n          await this._connect()\r\n        } catch (e) {\r\n          console.log('Fail reconnect')\r\n        }\r\n      })\r\n  }\r\n\r\n  _isConnectedToRemote() {\r\n    for (const peerId of this._libp2p.connections.keys()) {\r\n      if (peerId === this._remoteId._idB58String) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass FiFoMessageQueue {\r\n\r\n  _queue: any[]\r\n  _ended: boolean\r\n  _resolve: any\r\n\r\n  constructor () {\r\n    this._queue = []\r\n  }\r\n\r\n  [Symbol.asyncIterator] () {\r\n    return this\r\n  }\r\n\r\n  push(message) {\r\n    if (this._ended) {\r\n      throw new Error('Message queue ended')\r\n    }\r\n\r\n    if (this._resolve) {\r\n      return this._resolve({\r\n        done: false,\r\n        value: message\r\n      })\r\n    }\r\n\r\n    this._queue.push(message)\r\n  }\r\n\r\n  end() {\r\n    this._ended = true\r\n    if (this._resolve) {\r\n      this._resolve({\r\n        done: true\r\n      })\r\n    }\r\n  }\r\n\r\n  next() {\r\n    if (this._ended) {\r\n      return {\r\n        done: true\r\n      }\r\n    }\r\n\r\n    if (this._queue.length) {\r\n      return {\r\n        done: false,\r\n        value: this._queue.shift()\r\n      }\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      this._resolve = resolve\r\n    })\r\n  }\r\n}\r\n"]}]}