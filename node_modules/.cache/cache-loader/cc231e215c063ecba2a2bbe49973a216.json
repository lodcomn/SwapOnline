{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETHTOKEN2BTC.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\ETHTOKEN2BTC.ts","mtime":1614842913757},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/ETHTOKEN2BTC.ts"],"names":["debug","constants","AtomicAB2UTXO","tokenName","ETHTOKEN2BTC","swap","utxoCoin","_flowName","getName","stepNumbers","ethTokenSwap","participantSwap","btcSwap","ownerSwap","abBlockchain","utxoBlockchain","Error","state","step","isStoppedSwap","signTransactionHash","isSignFetching","isMeSigned","targetWallet","secretHash","isBalanceFetching","isBalanceEnough","balance","ethSwapCreationTransactionHash","canCreateEthTransaction","isEthContractFunded","secret","isEthWithdrawn","isbtcWithdrawn","ethSwapWithdrawTransactionHash","btcSwapWithdrawTransactionHash","refundTransactionHash","isRefunded","isFinished","isSwapExist","withdrawRequestIncoming","withdrawRequestAccepted","isFailedTransaction","isFailedTransactionError","gasAmountNeeded","_persistState","flow","room","once","setState","signABSide","waitUTXOScriptCreated","syncBalance","waitUTXOScriptFunded","scriptFunded","fundERC20Contract","getSecretFromAB2UTXO","withdrawFromSwap","sendMessage","event","data","finishStep","swapData","ownerAddress","app","getMyEthAddress","participantAddress","getParticipantEthAddress","checkSwapExists","refundHandler","hash","wasRefunded","console","warn","refund","then","error","_secret","utxoScriptValues","_secretHash","env","bitcoin","crypto","ripemd160","Buffer","from","toString","createScript","scriptAddress","getBalance","withdraw","scriptValues","getFromName","getToName","toUpperCase","COINS","btc"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport SwapApp, { constants, util } from 'swap.app'\r\nimport { AtomicAB2UTXO } from 'swap.swap'\r\nimport BigNumber from 'bignumber.js'\r\nimport { EthTokenSwap, BtcSwap } from 'swap.swaps'\r\n\r\n\r\nexport default (tokenName) => {\r\n\r\n  class ETHTOKEN2BTC extends AtomicAB2UTXO {\r\n\r\n    _flowName: string\r\n    ethTokenSwap: EthTokenSwap\r\n    btcSwap: BtcSwap\r\n    state: any\r\n\r\n    static getName() {\r\n      return `${this.getFromName()}2${this.getToName()}`\r\n    }\r\n    static getFromName() {\r\n      return tokenName.toUpperCase()\r\n    }\r\n    static getToName() {\r\n      return constants.COINS.btc\r\n    }\r\n    constructor(swap) {\r\n      super(swap)\r\n      this.utxoCoin = `btc`\r\n      this._flowName = ETHTOKEN2BTC.getName()\r\n\r\n      this.stepNumbers = {\r\n        'sign': 1,\r\n        'wait-lock-utxo': 2,\r\n        'verify-script': 3,\r\n        'sync-balance': 4,\r\n        'lock-eth': 5,\r\n        'wait-withdraw-eth': 6, // aka getSecret\r\n        'withdraw-utxo': 7,\r\n        'finish': 8,\r\n        'end': 9\r\n      }\r\n\r\n      this.ethTokenSwap = swap.participantSwap\r\n      this.btcSwap = swap.ownerSwap\r\n\r\n      this.abBlockchain = this.ethTokenSwap\r\n      this.utxoBlockchain = this.btcSwap\r\n\r\n      if (!this.ethTokenSwap) {\r\n        throw new Error('ETHTOKEN2BTC: \"ethTokenSwap\" of type object required')\r\n      }\r\n      if (!this.btcSwap) {\r\n        throw new Error('ETHTOKEN2BTC: \"btcSwap\" of type object required')\r\n      }\r\n\r\n      this.state = {\r\n        step: 0,\r\n\r\n        isStoppedSwap: false,\r\n\r\n        signTransactionHash: null,\r\n        isSignFetching: false,\r\n        isMeSigned: false,\r\n\r\n        targetWallet : null,\r\n        secretHash: null,\r\n\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: true,\r\n        balance: null,\r\n\r\n        ethSwapCreationTransactionHash: null,\r\n        canCreateEthTransaction: true,\r\n        isEthContractFunded: false,\r\n\r\n        secret: null,\r\n\r\n        isEthWithdrawn: false,\r\n        isbtcWithdrawn: false,\r\n\r\n        ethSwapWithdrawTransactionHash: null,\r\n        btcSwapWithdrawTransactionHash: null,\r\n\r\n        refundTransactionHash: null,\r\n        isRefunded: false,\r\n\r\n        isFinished: false,\r\n        isSwapExist: false,\r\n\r\n        withdrawRequestIncoming: false,\r\n        withdrawRequestAccepted: false,\r\n\r\n        isFailedTransaction: false,\r\n        isFailedTransactionError: null,\r\n        gasAmountNeeded: 0,\r\n      }\r\n\r\n      this._persistState()\r\n\r\n      const flow = this\r\n\r\n      flow.swap.room.once('request withdraw', () => {\r\n        flow.setState({\r\n          withdrawRequestIncoming: true,\r\n        })\r\n      })\r\n\r\n      super._persistSteps()\r\n    }\r\n\r\n    _persistState() {\r\n      super._persistState()\r\n    }\r\n\r\n    _getSteps() {\r\n      const flow = this\r\n\r\n      return [\r\n\r\n        // 1. Sign swap to start\r\n\r\n        () => {\r\n          this.signABSide()\r\n        },\r\n\r\n        // 2. Wait participant create, fund BTC Script\r\n\r\n        () => {\r\n          flow.waitUTXOScriptCreated()\r\n        },\r\n\r\n        // 3. Verify BTC Script\r\n\r\n        () => {\r\n          debug('swap.core:flow')(`waiting verify btc script`)\r\n        },\r\n\r\n        // 4. Check balance\r\n\r\n        () => {\r\n          this.syncBalance()\r\n        },\r\n\r\n        // 5. Create ETH Contract\r\n\r\n        async () => {\r\n          const scriptFunded = await this.waitUTXOScriptFunded()\r\n          if (scriptFunded) {\r\n            await flow.ethTokenSwap.fundERC20Contract({\r\n              flow,\r\n            })\r\n          }\r\n        },\r\n\r\n        // 6. Wait participant withdraw\r\n\r\n        async () => {\r\n          await flow.ethTokenSwap.getSecretFromAB2UTXO({ flow })\r\n        },\r\n\r\n        // 7. Withdraw\r\n\r\n        async () => {\r\n          await this.btcSwap.withdrawFromSwap({\r\n            flow,\r\n          })\r\n        },\r\n\r\n        // 8. Finish\r\n\r\n        () => {\r\n          flow.swap.room.once('request swap finished', () => {\r\n            const { btcSwapWithdrawTransactionHash } = flow.state\r\n\r\n            flow.swap.room.sendMessage({\r\n              event: 'swap finished',\r\n              data: {\r\n                btcSwapWithdrawTransactionHash,\r\n              },\r\n            })\r\n          })\r\n\r\n          flow.finishStep({\r\n            isFinished: true,\r\n          }, { step: 'finish' })\r\n        },\r\n\r\n        // 9. Finished!\r\n\r\n        () => {},\r\n      ]\r\n    }\r\n\r\n    _checkSwapAlreadyExists() {\r\n      const swapData = {\r\n        ownerAddress: this.app.getMyEthAddress(),\r\n        participantAddress: this.app.getParticipantEthAddress(this.swap)\r\n      }\r\n\r\n      return this.ethTokenSwap.checkSwapExists(swapData)\r\n    }\r\n\r\n    async tryRefund() {\r\n      const { secretHash } = this.state\r\n\r\n      const refundHandler = (hash = null) => {\r\n        this.swap.room.sendMessage({\r\n          event: 'eth refund completed',\r\n        })\r\n\r\n        this.setState({\r\n          refundTransactionHash: hash,\r\n          isRefunded: true,\r\n          isSwapExist: false,\r\n        }, true)\r\n      }\r\n\r\n      try {\r\n        const wasRefunded = await this.ethTokenSwap.wasRefunded({ secretHash })\r\n\r\n        if (wasRefunded) {\r\n          debug('swap.core:flow')('This swap was refunded')\r\n\r\n          refundHandler()\r\n\r\n          return true\r\n        }\r\n      } catch (error) {\r\n        console.warn('wasRefunded error:', error)\r\n\r\n        return false\r\n      }\r\n\r\n      return this.ethTokenSwap.refund({\r\n        participantAddress: this.app.getParticipantEthAddress(this.swap),\r\n      })\r\n        .then((hash) => {\r\n          if (!hash) {\r\n            return false\r\n          }\r\n\r\n          refundHandler(hash)\r\n\r\n          return true\r\n        })\r\n        .catch((error) => false)\r\n    }\r\n\r\n\r\n\r\n    async isRefundSuccess() {\r\n      return true\r\n    }\r\n\r\n    async tryWithdraw(_secret) {\r\n      const { secret, secretHash, isEthWithdrawn, isbtcWithdrawn, utxoScriptValues } = this.state\r\n\r\n      if (!_secret)\r\n        throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n      if (!utxoScriptValues)\r\n        throw new Error(`Cannot withdraw without script values`)\r\n\r\n      if (secret && secret != _secret)\r\n        console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n      if (isbtcWithdrawn)\r\n        console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n      debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n      const _secretHash = this.app.env.bitcoin.crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n\r\n      if (secretHash != _secretHash)\r\n        console.warn(`Hash does not match! state: ${secretHash}, given: ${_secretHash}`)\r\n\r\n      const {scriptAddress} = this.btcSwap.createScript(utxoScriptValues)\r\n      const balance = await this.btcSwap.getBalance(scriptAddress)\r\n\r\n      debug('swap.core:flow')(`address=${scriptAddress}, balance=${balance}`)\r\n\r\n      if (balance === 0) {\r\n        this.finishStep({\r\n          isbtcWithdrawn: true,\r\n        }, {step: 'withdraw-utxo'})\r\n        throw new Error(`Already withdrawn: address=${scriptAddress},balance=${balance}`)\r\n      }\r\n\r\n      this.btcSwap.withdraw({\r\n        scriptValues: utxoScriptValues,\r\n        secret: _secret,\r\n      }).then((hash) => {\r\n        debug('swap.core:flow')(`TX hash=${hash}`)\r\n        this.setState({\r\n          btcSwapWithdrawTransactionHash: hash,\r\n        })\r\n\r\n        debug('swap.core:flow')(`TX withdraw sent: ${this.state.btcSwapWithdrawTransactionHash}`)\r\n\r\n        this.finishStep({\r\n          isbtcWithdrawn: true,\r\n        }, { step: 'withdraw-utxo' })\r\n      })\r\n    }\r\n  }\r\n\r\n  return ETHTOKEN2BTC\r\n}\r\n"]}]}