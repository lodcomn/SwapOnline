{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\helpers\\metamask.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\helpers\\metamask.ts","mtime":1614852761277},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/helpers/metamask.ts"],"names":["reducers","getState","actions","cacheStorageGet","cacheStorageSet","constants","config","setMetamask","setProvider","setDefaultProvider","getWeb3","getDefaultWeb3","SwapApp","Web3Connect","web3connect","web3ChainId","binance","process","env","MAINNET","web3RPC","binance_provider","web3","provider","_onWeb3Changed","newWeb3","shared","setWeb3Provider","_initReduxState","user","sign_to_tokens","getBalances","on","localStorage","setItem","isWalletCreate","core","markCoinAsVisible","isEnabled","isConnected","getAddress","_init","onInit","hasCachedProvider","_web3","err","clearCache","addWallet","getBalance","console","log","metamaskData","address","balanceInCache","setBalance","name","amount","eth","then","result","utils","fromWei","e","setBalanceError","disconnect","Promise","resolved","reject","Disconnect","connect","options","modals","open","ConnectWalletModal","onResolve","onReject","isCorrectNetwork","ethData","data","balance","balanceError","isMetamask","currency","fullName","getProviderTitle","infoAboutCurrency","isBalanceFetched","isMnemonic","unconfirmedBalance","metamaskApi","window"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport reducers from 'redux/core/reducers'\r\nimport { getState } from 'redux/core'\r\nimport actions from 'redux/actions'\r\nimport { cacheStorageGet, cacheStorageSet, constants } from 'helpers'\r\nimport web3 from 'helpers/web3'\r\nimport config from 'app-config'\r\nimport { setMetamask, setProvider, setDefaultProvider, getWeb3 as getDefaultWeb3 } from 'helpers/web3'\r\nimport SwapApp from 'swap.app'\r\nimport Web3Connect from '../../../common/web3connect'\r\n\r\nconst web3connect = new Web3Connect({\r\n  web3ChainId: (config.binance)\r\n    ? (process.env.MAINNET) ? 56 : 97  // 56 = Mainnet, 97 = Testnet\r\n    : (process.env.MAINNET) ? 1 : 3, // 1 = Mainnet, 3 = Ropsten\r\n  web3RPC: (config.binance)\r\n    ? config.binance_provider\r\n    : config.web3.provider,\r\n})\r\n\r\nconst _onWeb3Changed = (newWeb3) => {\r\n  setProvider(newWeb3)\r\n  SwapApp.shared().setWeb3Provider(newWeb3)\r\n  _initReduxState()\r\n  actions.user.sign_to_tokens()\r\n  actions.user.getBalances()\r\n}\r\n\r\nweb3connect.on('connected', async () => {\r\n  //@\r\n  localStorage.setItem(constants.localStorage.isWalletCreate, true)\r\n  actions.core.markCoinAsVisible(`ETH`)\r\n  _onWeb3Changed(web3connect.getWeb3())\r\n})\r\n\r\nweb3connect.on('disconnect', async () => {\r\n  setDefaultProvider()\r\n  _onWeb3Changed(getDefaultWeb3())\r\n})\r\n\r\nweb3connect.on('accountChange', async () => {\r\n  _onWeb3Changed(web3connect.getWeb3())\r\n})\r\n\r\nweb3connect.on('chainChanged', async () => {\r\n  _onWeb3Changed(web3connect.getWeb3())\r\n})\r\n\r\nconst isEnabled = () => true\r\n\r\nconst isConnected = () => web3connect.isConnected()\r\n\r\nconst getAddress = () => (isConnected()) ? web3connect.getAddress() : ``\r\n\r\nconst getWeb3 = () => (isConnected()) ? web3connect.getWeb3() : false\r\n\r\nconst _init = async () => {\r\n  web3connect.onInit(() => {\r\n    if (web3connect.hasCachedProvider()) {\r\n      let _web3 = false\r\n      try {\r\n        _web3 = web3connect.getWeb3()\r\n      } catch (err) {\r\n        web3connect.clearCache()\r\n        _initReduxState()\r\n        return\r\n      }\r\n      setMetamask(_web3)\r\n      _initReduxState()\r\n    } else {\r\n      _initReduxState()\r\n    }\r\n  })\r\n}\r\n\r\nconst addWallet = () => {\r\n  _initReduxState()\r\n  if (isConnected()) {\r\n    getBalance()\r\n  }\r\n}\r\n\r\nconst getBalance = () => {\r\n  console.log('metamask getBalance')\r\n  const { user: { metamaskData } } = getState()\r\n  if (metamaskData) {\r\n    const { address } = metamaskData\r\n\r\n    const balanceInCache = cacheStorageGet('currencyBalances', `eth_${address}`)\r\n    if (balanceInCache !== false) {\r\n      reducers.user.setBalance({\r\n        name: 'metamaskData',\r\n        amount: balanceInCache,\r\n      })\r\n      return balanceInCache\r\n    }\r\n\r\n    return web3connect.getWeb3().eth.getBalance(address)\r\n      .then(result => {\r\n        const amount = web3connect.getWeb3().utils.fromWei(result)\r\n\r\n        cacheStorageSet('currencyBalances', `eth_${address}`, amount, 30)\r\n        reducers.user.setBalance({ name: 'metamaskData', amount })\r\n        return amount\r\n      })\r\n      .catch((e) => {\r\n        console.log('fail get balance')\r\n        console.log('error', e)\r\n        reducers.user.setBalanceError({ name: 'metamaskData' })\r\n      })\r\n  }\r\n}\r\n\r\nconst disconnect = () => new Promise(async (resolved, reject) => {\r\n  if (isConnected()) {\r\n    await web3connect.Disconnect()\r\n    resolved(true)\r\n    // window.location.reload()\r\n  } else {\r\n    resolved(true)\r\n  }\r\n})\r\n\r\nconst connect = (options) => new Promise(async (resolved, reject) => {\r\n  actions.modals.open(constants.modals.ConnectWalletModal, {\r\n    ...options,\r\n    onResolve: resolved,\r\n    onReject: reject,\r\n  })\r\n})\r\n\r\n/* metamask wallet layer */\r\nconst isCorrectNetwork = () => web3connect.isCorrectNetwork()\r\n\r\n\r\nconst _initReduxState = () => {\r\n  const {\r\n    user: {\r\n      ethData,\r\n    },\r\n  } = getState()\r\n\r\n  if (isConnected()) {\r\n    reducers.user.addWallet({\r\n      name: 'metamaskData',\r\n      data: {\r\n        address: getAddress(),\r\n        balance: 0,\r\n        balanceError: false,\r\n        isConnected: true,\r\n        isMetamask: true,\r\n        currency: \"ETH\",\r\n        fullName: `Ethereum (${web3connect.getProviderTitle()})`,\r\n        infoAboutCurrency: ethData.infoAboutCurrency,\r\n        isBalanceFetched: true,\r\n        isMnemonic: true,\r\n        unconfirmedBalance: 0,\r\n      },\r\n    })\r\n  } else {\r\n    reducers.user.addWallet({\r\n      name: 'metamaskData',\r\n      data: {\r\n        address: 'Not connected',\r\n        balance: 0,\r\n        balanceError: false,\r\n        isConnected: false,\r\n        isMetamask: true,\r\n        currency: \"ETH\",\r\n        fullName: `Ethereum (external wallet)`,\r\n        infoAboutCurrency: ethData.infoAboutCurrency,\r\n        isBalanceFetched: true,\r\n        isMnemonic: true,\r\n        unconfirmedBalance: 0,\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nif (web3connect.hasCachedProvider()) {\r\n  _init()\r\n} else {\r\n  _initReduxState()\r\n}\r\n\r\nconst metamaskApi = {\r\n  connect,\r\n  isEnabled,\r\n  isConnected,\r\n  getAddress,\r\n  web3connect,\r\n  addWallet,\r\n  getBalance,\r\n  getWeb3,\r\n  disconnect,\r\n  isCorrectNetwork,\r\n}\r\n\r\nwindow.metamaskApi = metamaskApi\r\n\r\nexport default metamaskApi\r\n"]}]}