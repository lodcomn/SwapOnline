{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\GHOST2BTC.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\core\\swap.flows\\GHOST2BTC.ts","mtime":1614842913758},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/core/swap.flows/GHOST2BTC.ts"],"names":["debug","crypto","constants","Flow","GHOST2BTC","swap","ghostSwap","getRefundHexTransaction","scriptValues","state","ghostScriptValues","secret","then","txHex","setState","refundTxHex","_flowName","getName","stepNumbers","participantSwap","btcSwap","ownerSwap","Error","step","signTransactionHash","isSignFetching","isMeSigned","secretHash","btcScriptValues","btcScriptVerified","isBalanceFetching","isBalanceEnough","balance","btcScriptCreatingTransactionHash","ghostSwapCreationTransactionHash","isGhostScriptFunded","isGhostWithdrawn","isbtcWithdrawn","refundTransactionHash","isRefunded","isFinished","isSwapExist","_persistState","flow","room","once","finishStep","silentError","sendMessage","event","syncBalance","participant","buyAmount","sellAmount","utcNow","Math","floor","Date","now","getLockTime","checkScript","value","recipientPublicKey","app","services","auth","accounts","btc","getPublicKey","lockTime","scriptCheckResult","console","error","events","dispatch","ownerPublicKey","ghost","publicKey","fundScript","amount","hash","test","message","on","data","ghostSwapWithdrawTransactionHash","getSecretFromTxhash","withdraw","btcSwapWithdrawTransactionHash","swapData","ownerAddress","address","participantAddress","_checkSwapAlreadyExists","swapExists","fetchBalance","getAddress","isEnoughMoney","isLessThanOrEqualTo","refund","_secret","warn","_secretHash","ripemd160","Buffer","from","toString","createScript","scriptAddress","getBalance","getFromName","getToName","COINS"],"mappings":"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","sourcesContent":["import debug from 'debug'\r\nimport crypto from 'bitcoinjs-lib/src/crypto' // move to BtcSwap\r\nimport SwapApp, { constants } from 'swap.app'\r\nimport { Flow } from 'swap.swap'\r\n\r\n\r\nclass GHOST2BTC extends Flow {\r\n\r\n  _flowName: string\r\n  ghostSwap: any\r\n  btcSwap: any\r\n  state: any\r\n\r\n  static getName() {\r\n    return `${this.getFromName()}2${this.getToName()}`\r\n  }\r\n  static getFromName() {\r\n    return constants.COINS.ghost\r\n  }\r\n  static getToName() {\r\n    return constants.COINS.btc\r\n  }\r\n  constructor(swap) {\r\n    super(swap)\r\n\r\n    this._flowName = GHOST2BTC.getName()\r\n\r\n    this.stepNumbers = {\r\n      'sign': 1,\r\n      'wait-lock-btc': 2,\r\n      'verify-script': 3,\r\n      'sync-balance': 4,\r\n      'lock-ghost': 5,\r\n      'wait-withdraw-ghost': 6, // aka getSecret\r\n      'withdraw-btc': 7,\r\n      'finish': 8,\r\n      'end': 9\r\n    }\r\n\r\n    this.ghostSwap = swap.participantSwap\r\n    this.btcSwap = swap.ownerSwap\r\n\r\n    if (!this.ghostSwap) {\r\n      throw new Error('BTC2GHOST: \"ghostSwap\" of type object required')\r\n    }\r\n    if (!this.btcSwap) {\r\n      throw new Error('BTC2GHOST: \"btcSwap\" of type object required')\r\n    }\r\n\r\n    this.state = {\r\n      step: 0,\r\n\r\n      signTransactionHash: null,\r\n      isSignFetching: false,\r\n      isMeSigned: false,\r\n\r\n      secretHash: null,\r\n      btcScriptValues: null,\r\n      ghostScriptValues: null,\r\n\r\n      btcScriptVerified: false,\r\n\r\n      isBalanceFetching: false,\r\n      isBalanceEnough: false,\r\n      balance: null,\r\n\r\n      btcScriptCreatingTransactionHash: null,\r\n      ghostSwapCreationTransactionHash: null,\r\n\r\n      isGhostScriptFunded: false,\r\n\r\n      secret: null,\r\n\r\n      isGhostWithdrawn: false,\r\n      isbtcWithdrawn: false,\r\n\r\n      refundTransactionHash: null,\r\n      isRefunded: false,\r\n\r\n      isFinished: false,\r\n      isSwapExist: false,\r\n    }\r\n\r\n    this._persistState()\r\n    super._persistSteps()\r\n  }\r\n\r\n  _persistState() {\r\n    super._persistState()\r\n  }\r\n\r\n  _getSteps() {\r\n    const flow = this\r\n\r\n    return [\r\n\r\n      // 1. Sign swap to start\r\n\r\n      () => {\r\n        // this.sign()\r\n      },\r\n\r\n      // 2. Wait participant create, fund BTC Script\r\n\r\n      () => {\r\n        flow.swap.room.once('create btc script', ({ scriptValues, btcScriptCreatingTransactionHash }) => {\r\n          flow.finishStep({\r\n            secretHash: scriptValues.secretHash,\r\n            btcScriptValues: scriptValues,\r\n            btcScriptCreatingTransactionHash,\r\n          }, { step: 'wait-lock-btc', silentError: true })\r\n        })\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'request btc script',\r\n        })\r\n      },\r\n\r\n      // 3. Verify BTC Script\r\n\r\n      () => {\r\n        debug('swap.core:flow')(`waiting verify btc script`)\r\n        // this.verifyBtcScript()\r\n      },\r\n\r\n      // 4. Check balance\r\n\r\n      () => {\r\n        this.syncBalance()\r\n        debug('swap.core:flow')(this)\r\n      },\r\n\r\n      // 5. Create Ghost Script\r\n\r\n      async () => {\r\n        const { participant, buyAmount, sellAmount } = flow.swap\r\n        let ghostSwapCreationTransactionHash\r\n\r\n        // TODO move this somewhere!\r\n        const utcNow = () => Math.floor(Date.now() / 1000)\r\n        const getLockTime = () => utcNow() + 3600 * 1 // 1 hour from now\r\n\r\n        const scriptCheckResult = await flow.btcSwap.checkScript(flow.state.btcScriptValues, {\r\n          value: buyAmount,\r\n          recipientPublicKey: this.app.services.auth.accounts.btc.getPublicKey(),\r\n          lockTime: getLockTime(),\r\n        })\r\n\r\n        if (scriptCheckResult) {\r\n          console.error(`Btc script check error:`, scriptCheckResult)\r\n          flow.swap.events.dispatch('btc script check error', scriptCheckResult)\r\n          return\r\n        }\r\n\r\n        const scriptValues = {\r\n          secretHash:         flow.state.secretHash,\r\n          ownerPublicKey:     this.app.services.auth.accounts.ghost.getPublicKey(),\r\n          recipientPublicKey: participant.ghost.publicKey,\r\n          lockTime:           getLockTime(),\r\n        }\r\n\r\n        try {\r\n          await flow.ghostSwap.fundScript({\r\n            scriptValues,\r\n            amount: sellAmount,\r\n          }, (hash) => {\r\n            ghostSwapCreationTransactionHash = hash\r\n            flow.setState({\r\n              ghostSwapCreationTransactionHash: hash,\r\n            })\r\n          })\r\n        } catch (err) {\r\n          // TODO user can stuck here after page reload...\r\n          if ( /known transaction/.test(err.message) )\r\n            return console.error(`known tx: ${err.message}`)\r\n          else if ( /out of gas/.test(err.message) )\r\n            return console.error(`tx failed (wrong secret?): ${err.message}`)\r\n          else\r\n            return console.error(err)\r\n        }\r\n\r\n        flow.swap.room.on('request ghost script', () => {\r\n          flow.swap.room.sendMessage({\r\n            event: 'create ghost script',\r\n            data: {\r\n              scriptValues,\r\n              ghostSwapCreationTransactionHash,\r\n            }\r\n          })\r\n        })\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'create ghost script',\r\n          data: {\r\n            scriptValues,\r\n            ghostSwapCreationTransactionHash,\r\n          }\r\n        })\r\n\r\n        flow.finishStep({\r\n          isGhostScriptFunded: true,\r\n          ghostScriptValues: scriptValues,\r\n        }, { step: 'lock-ghost' })\r\n      },\r\n\r\n      // 6. Wait participant withdraw\r\n\r\n      () => {\r\n\r\n        flow.swap.room.once('ghostWithdrawTxHash', async ({ ghostSwapWithdrawTransactionHash }) => {\r\n          flow.setState({\r\n            ghostSwapWithdrawTransactionHash,\r\n          })\r\n\r\n          const secret = await flow.ghostSwap.getSecretFromTxhash(ghostSwapWithdrawTransactionHash)\r\n\r\n          if (!flow.state.isGhostWithdrawn && secret) {\r\n            flow.finishStep({\r\n              isGhostWithdrawn: true,\r\n              secret,\r\n            }, { step: 'wait-withdraw-ghost' })\r\n          }\r\n        })\r\n\r\n        flow.swap.room.sendMessage({\r\n          event: 'request ghostWithdrawTxHash',\r\n        })\r\n      },\r\n\r\n      // 7. Withdraw\r\n\r\n      async () => {\r\n        let { secret, btcScriptValues } = flow.state\r\n\r\n        if (!btcScriptValues) {\r\n          console.error('There is no \"btcScriptValues\" in state. No way to continue swap...')\r\n          return\r\n        }\r\n\r\n        await flow.btcSwap.withdraw({\r\n          scriptValues: flow.state.btcScriptValues,\r\n          secret,\r\n        }, (hash) => {\r\n          flow.setState({\r\n            btcSwapWithdrawTransactionHash: hash,\r\n          })\r\n        })\r\n\r\n        flow.finishStep({\r\n          isbtcWithdrawn: true,\r\n        }, { step: 'withdraw-btc' })\r\n      },\r\n\r\n      // 8. Finish\r\n\r\n      () => {\r\n        flow.swap.room.sendMessage({\r\n          event: 'swap finished',\r\n        })\r\n\r\n        flow.finishStep({\r\n          isFinished: true,\r\n        }, { step: 'finish' })\r\n      },\r\n\r\n      // 9. Finished!\r\n      () => {\r\n\r\n      }\r\n    ]\r\n  }\r\n\r\n  _checkSwapAlreadyExists() {\r\n    const { participant } = this.swap\r\n\r\n    const swapData = {\r\n      ownerAddress:       this.app.services.auth.accounts.ghost.address,\r\n      participantAddress: participant.ghost.address\r\n    }\r\n\r\n    return false//this.ghostSwap.checkSwapExists(swapData)\r\n  }\r\n\r\n  async sign() {\r\n    const swapExists = await this._checkSwapAlreadyExists()\r\n\r\n    if (swapExists) {\r\n      this.swap.room.sendMessage({\r\n        event: 'swap exists',\r\n      })\r\n\r\n      this.setState({\r\n        isSwapExist: true,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        isSignFetching: true,\r\n      })\r\n\r\n      this.swap.room.on('request sign', () => {\r\n        this.swap.room.sendMessage({\r\n          event: 'swap sign',\r\n        })\r\n      })\r\n\r\n      this.swap.room.sendMessage({\r\n        event: 'swap sign',\r\n      })\r\n\r\n      this.finishStep({\r\n        isMeSigned: true,\r\n      }, { step: 'sign', silentError: true })\r\n\r\n      return true\r\n    }\r\n  }\r\n\r\n\r\n  verifyBtcScript() {\r\n    if (this.state.btcScriptVerified) {\r\n      return true\r\n    }\r\n    if (!this.state.btcScriptValues) {\r\n      throw new Error(`No script, cannot verify`)\r\n    }\r\n\r\n    this.finishStep({\r\n      btcScriptVerified: true,\r\n    }, { step: 'verify-script' })\r\n\r\n    return true\r\n  }\r\n\r\n  async syncBalance() {\r\n    const { sellAmount } = this.swap\r\n\r\n    this.setState({\r\n      isBalanceFetching: true,\r\n    })\r\n\r\n    const balance = await this.ghostSwap.fetchBalance(this.app.services.auth.accounts.ghost.getAddress())\r\n\r\n    const isEnoughMoney = sellAmount.isLessThanOrEqualTo(balance)\r\n\r\n    if (isEnoughMoney) {\r\n      this.finishStep({\r\n        balance,\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: true,\r\n      }, { step: 'sync-balance' })\r\n    }\r\n    else {\r\n      this.setState({\r\n        balance,\r\n        isBalanceFetching: false,\r\n        isBalanceEnough: false,\r\n      })\r\n    }\r\n  }\r\n\r\n  getRefundTxHex = () => {\r\n    this.ghostSwap.getRefundHexTransaction({\r\n      scriptValues: this.state.ghostScriptValues,\r\n      secret: this.state.secret,\r\n    })\r\n      .then((txHex) => {\r\n        this.setState({\r\n          refundTxHex: txHex,\r\n        })\r\n      })\r\n  }\r\n\r\n  tryRefund() {\r\n    return this.ghostSwap.refund({\r\n      scriptValues: this.state.ghostScriptValues,\r\n      secret: this.state.secret,\r\n    }, (hash) => {\r\n      this.setState({\r\n        refundTransactionHash: hash,\r\n        isRefunded: true,\r\n      })\r\n    })\r\n      .then(() => {\r\n        this.swap.room.sendMessage({\r\n          event: 'refund completed',\r\n        })\r\n\r\n        this.setState({\r\n          isSwapExist: false,\r\n        })\r\n      })\r\n  }\r\n\r\n  async isRefundSuccess() {\r\n    return true\r\n  }\r\n\r\n  async tryWithdraw(_secret) {\r\n    const { secret, secretHash, isGhostWithdrawn, isbtcWithdrawn, btcScriptValues } = this.state\r\n    if (!_secret)\r\n      throw new Error(`Withdrawal is automatic. For manual withdrawal, provide a secret`)\r\n\r\n    if (!btcScriptValues)\r\n      throw new Error(`Cannot withdraw without script values`)\r\n\r\n    if (secret && secret != _secret)\r\n      console.warn(`Secret already known and is different. Are you sure?`)\r\n\r\n    if (isbtcWithdrawn)\r\n      console.warn(`Looks like money were already withdrawn, are you sure?`)\r\n\r\n    debug('swap.core:flow')(`WITHDRAW using secret = ${_secret}`)\r\n\r\n    const _secretHash = crypto.ripemd160(Buffer.from(_secret, 'hex')).toString('hex')\r\n    if (secretHash != _secretHash)\r\n      console.warn(`Hash does not match!`)\r\n\r\n    const { scriptAddress } = this.btcSwap.createScript(btcScriptValues)\r\n    const balance = await this.btcSwap.getBalance(scriptAddress)\r\n\r\n    debug('swap.core:flow')(`address=${scriptAddress}, balance=${balance}`)\r\n\r\n    if (balance === 0) {\r\n      this.finishStep({\r\n        isbtcWithdrawn: true,\r\n      }, { step: 'withdraw-btc' })\r\n      throw new Error(`Already withdrawn: address=${scriptAddress},balance=${balance}`)\r\n    }\r\n\r\n    await this.btcSwap.withdraw({\r\n      scriptValues: btcScriptValues,\r\n      secret: _secret,\r\n    }, (hash) => {\r\n      debug('swap.core:flow')(`TX hash=${hash}`)\r\n      this.setState({\r\n        btcSwapWithdrawTransactionHash: hash,\r\n      })\r\n    })\r\n    debug('swap.core:flow')(`TX withdraw sent: ${this.state.btcSwapWithdrawTransactionHash}`)\r\n\r\n    this.finishStep({\r\n      isbtcWithdrawn: true,\r\n    }, { step: 'withdraw-btc' })\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default GHOST2BTC\r\n"]}]}