{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\btcmultisig.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\btcmultisig.ts","mtime":1614852071282},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/btcmultisig.ts"],"names":["BigInteger","BigNumber","bitcoin","bitcoinMessage","getState","reducers","apiLooper","constants","btc","actions","config","SwapApp","default","bitcoinUtils","BITPAY_API","name","servers","api","bitpay","BLOCYPER_API","blockcypher","hasAdminFee","opts","fee","address","min","addressToWallet","msData","user","btcMultisigUserData","wallets","length","founded","filter","wallet","getSmsKeyFromMnemonic","mnemonic","mnemonicWallet","getWalletByWords","publicKey","_loadBtcMultisigKeys","savedKeys","localStorage","getItem","privateKeyNames","btcMultisigOtherOwnerKey","JSON","parse","e","Array","signToUserMultisig","infoAboutCurrency","walletAddreses","getBtcMultisigKeys","dontFetchBalance","walletsData","map","data","currency","fullName","isUserProtected","active","balance","unconfirmedBalance","isBalanceFetched","balanceError","publicKeys","isBTC","setAuthData","fetchMultisigBalances","index","Promise","resolve","getAddrBalance","then","setBtcMultisigBalance","amount","params","reject","privateKey","keysInfo","i","walletData","login_USER","fetchBalance","push","addBtcMultisigKey","isPrimary","includes","setItem","stringify","switchBtcMultisigKey","keyOrIndex","Number","isInteger","indexOf","newKey","splice","unshift","btcData","getBalanceUser","removeBtcMultisigNey","checkSMSActivated","isRegistered","btcMultisigSMSData","checkPINActivated","btcMultisigPinData","checkG2FAActivated","checkUserActivated","isBTCSMSAddress","toLowerCase","isBTCMSUserAddress","isBTCAddress","console","warn","getDataByAddress","createWallet","otherOwnerPublicKey","keyPair","hash","crypto","sha256","d","fromBuffer","ECPair","fromWIF","network","error","account","payments","p2wpkh","pubkey","addressOfMyOwnWallet","publicKeysRaw","toString","sort","reverse","hex","Buffer","from","p2ms","m","n","pubkeys","p2sh","redeem","window","getBtcMultisigData","getBtcMultisigAddress","info","login_SMS","login_","didProtectedBtcCreated","isSmsProtected","getBtcSmsData","login_PIN","didPinBtcCreated","isPinProtected","getBtcPinData","login_G2FA","didProtectedBtcG2FACreated","isG2FAProtected","onlyCheck","pubsubRoom","onReady","onRequestEventName","shared","services","room","subscribe","_data","txData","txRaw","sendMessagePeer","fromPeer","event","notifications","show","modals","open","BtcMultisignConfirmTx","sortKeys","log","publicKey_1","forEach","key","enableWalletSMS","enableWalletG2FA","btcMultisigG2FAData","enableWalletUSER","onUserMultisigJoin","checkKey","onUserMultisigSend","broadcastTX2Room","cbSuccess","cbFail","onSuccessEventName","failTimer","onSuccessEvent","clearTimeout","unsubscribe","cancelFunc","onFailTimer","setTimeout","sendMessageRoom","_getSign","message","sign","compressed","beginRegisterSMS","phone","ownPublicKey","mnemonicAccount","post","body","checkSign","mainnet","process","env","MAINNET","source","location","hostname","result","confirmRegisterSMS","smsCode","mnemonicKey","newKeys","answer","addSMSWallet","register_PIN","password","mainKey","btcPinServerKey","swapContract","btcPinKey","addPinWallet","mnemonicOrKey","validateMnemonicWords","btcPinMnemonicKey","btcPinPublicKeys","btcmultisig","getBalance","btcSmsMnemonicKey","btcSMSServerKey","protectedBtcKey","btcSmsPublicKeys","withUnconfirmed","apiBitpay","unconfirmed","ownAddress","ownDataKey","checkAddress","dataKey","setBalance","setBalanceError","getBalancePin","getBalanceG2FA","fetchTx","cacheResponse","fetchTxInfo","getTransactionUser","msWallets","promiseList","all","txLists","retValue","txs","getTransaction","getTransactionSMS","smsAddress","getTransactionPIN","pinAddress","getTransactionG2FA","getInvoicesSMS","invoices","getInvoices","getInvoicesUser","ownType","getTransactionBlocyper","myWallets","apiBlocyper","sendSMSProtected","to","feeValue","speed","feeFromAmount","adminFee","adminFeeMinValue","adminFeeMin","dividedBy","multipliedBy","isGreaterThan","integerValue","toNumber","estimateFeeValue","inSatoshis","method","moreInfo","feeData","satoshis","unspents","originalUnspents","fundValue","String","totalUnspent","reduce","summ","skipValue","psbt","Psbt","addOutput","value","txid","vout","fetchTxRaw","rawTx","addInput","redeemScript","output","nonWitnessUtxo","signAllInputs","rawTX","toHex","authKeys","slice","timeout","response","deadline","sendPinProtected","totalAmount","plus","isLessThan","rawTxo","signPinMnemonic","mnemonicTx","broadcastTx","broadcastResult","txId","version","confirmSMSProtected","code","send","senderWallet","fetchUnspents","getMSWalletByScript","script","myBtcWallets","toASM","keys","buf","join","walletScript","parseRawTX","txHash","myBtcAddreses","fromHex","parsedTX","input","out","isOur","inputParsed","inputs","inputWallet","globalMap","unsignedTx","tx","outs","fromOutputScript","outWallet","valueSatoshi","Object","signMofNByMnemonic","option_M","walletNumber","ownPath","txb","TransactionBuilder","fromTransaction","Transaction","__INPUTS","WIF","build","txHex","signMultiSign","finalizeAllInputs","extractTransaction","signSmsMnemonic","signSmsMnemonicAndBuild","checkPinCanRestory","checkPinMnemonic","matchedKeys","checkSmsMnemonic","signMessage","encodedPrivateKey","networks","testnet","toBuffer","signature","getReputation"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport BigInteger from 'bigi'\r\n\r\nimport { BigNumber } from 'bignumber.js'\r\nimport * as bitcoin from 'bitcoinjs-lib'\r\nimport bitcoinMessage from 'bitcoinjs-message'\r\nimport { getState } from 'redux/core'\r\nimport reducers from 'redux/core/reducers'\r\nimport { apiLooper, constants, api } from 'helpers'\r\nimport btc from 'helpers/btc'\r\nimport actions from 'redux/actions'\r\nimport config from 'helpers/externalConfig'\r\nimport SwapApp from 'swap.app'\r\n\r\nimport { MnemonicKey } from './types'\r\n\r\nimport { default as bitcoinUtils } from '../../../../common/utils/coin/btc'\r\n\r\nconst BITPAY_API = {\r\n  name: 'bitpay',\r\n  servers: config.api.bitpay,\r\n}\r\n\r\nconst BLOCYPER_API = {\r\n  name: 'blockcypher',\r\n  servers: config.api.blockcypher,\r\n}\r\n\r\nconst hasAdminFee = (\r\n  config\r\n  && config.opts\r\n  && config.opts.fee\r\n  && config.opts.fee.btc\r\n  && config.opts.fee.btc.fee\r\n  && config.opts.fee.btc.address\r\n  && config.opts.fee.btc.min\r\n) ? config.opts.fee.btc : false\r\n\r\nconst addressToWallet = (address) => {\r\n  const {\r\n    user: {\r\n      btcMultisigUserData: msData,\r\n    },\r\n  } = getState()\r\n\r\n  if (msData.address === address) return msData\r\n\r\n  if (msData.wallets\r\n    && msData.wallets.length\r\n  ) {\r\n    const founded = msData.wallets.filter((wallet) => wallet.address === address)\r\n    if (founded.length) return founded[0]\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nconst getSmsKeyFromMnemonic = (mnemonic) => {\r\n  if (mnemonic) {\r\n    const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, 1)\r\n    if (mnemonicWallet) {\r\n      return mnemonicWallet.publicKey\r\n    }\r\n  }\r\n}\r\n\r\nconst _loadBtcMultisigKeys = () => {\r\n  let savedKeys = localStorage.getItem(constants.privateKeyNames.btcMultisigOtherOwnerKey)\r\n  try { savedKeys = JSON.parse(savedKeys) } catch (e) { }\r\n  //@\r\n  if (!(savedKeys instanceof Array)) {\r\n    //@\r\n    savedKeys = [savedKeys]\r\n  }\r\n\r\n  return savedKeys\r\n}\r\n\r\nconst signToUserMultisig = async () => {\r\n  const {\r\n    user: {\r\n      btcMultisigUserData,\r\n      btcMultisigUserData: {\r\n        infoAboutCurrency,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const walletAddreses = []\r\n\r\n  const walletsData = await getBtcMultisigKeys({\r\n    opts: {\r\n      dontFetchBalance: true,\r\n    },\r\n  })\r\n  //@\r\n  const wallets = walletsData.map((data) => ({\r\n    address: data.address,\r\n    currency: `BTC (Multisig)`,\r\n    fullName: `Bitcoin (Multisig)`,\r\n    infoAboutCurrency,\r\n    isUserProtected: true,\r\n    active: true,\r\n    balance: 0,\r\n    unconfirmedBalance: 0,\r\n    isBalanceFetched: false,\r\n    balanceError: false,\r\n    publicKeys: data.publicKeys,\r\n    publicKey: data.publicKey,\r\n    isBTC: true,\r\n  })).filter((wallet) => wallet.address !== btcMultisigUserData.address)\r\n\r\n  btcMultisigUserData.wallets = wallets\r\n\r\n  reducers.user.setAuthData({ name: 'btcMultisigUserData', data: btcMultisigUserData })\r\n\r\n  fetchMultisigBalances()\r\n}\r\n\r\nconst fetchMultisigBalances = () => {\r\n  const {\r\n    user: {\r\n      btcMultisigUserData: {\r\n        wallets,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  if (wallets && wallets.length) {\r\n    wallets.map(({ address }, index) => new Promise(async (resolve) => {\r\n      getAddrBalance(address).then(({ balance, unconfirmedBalance }) => {\r\n        reducers.user.setBtcMultisigBalance({\r\n          address,\r\n          amount: balance,\r\n          isBalanceFetched: true,\r\n          unconfirmedBalance,\r\n        })\r\n        resolve({ address, balance, unconfirmedBalance })\r\n      }).catch((e) => {\r\n        //\r\n      })\r\n    }))\r\n  }\r\n}\r\n\r\nconst getBtcMultisigKeys = (params) => {\r\n  let opts = {}\r\n  if (params && params.opts) opts = params.opts\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    const { user: { btcMultisigUserData } } = getState()\r\n    const { privateKey } = btcMultisigUserData\r\n\r\n    const savedKeys = _loadBtcMultisigKeys()\r\n    const keysInfo = []\r\n    if (savedKeys.length > 0) {\r\n      for (let i = 0; i < savedKeys.length; i++) {\r\n        if (savedKeys[i]) {\r\n          const walletData = login_USER(privateKey, savedKeys[i], true)\r\n\r\n          walletData.index = i\r\n          //@\r\n          walletData.balance = (opts.dontFetchBalance) ? 0 : await fetchBalance(walletData.address)\r\n          keysInfo.push(walletData)\r\n        }\r\n      }\r\n    }\r\n\r\n    resolve(keysInfo)\r\n  })\r\n}\r\n\r\nconst addBtcMultisigKey = (publicKey, isPrimary) => {\r\n  const savedKeys = _loadBtcMultisigKeys()\r\n\r\n  if (!savedKeys.includes(publicKey)) {\r\n    //@\r\n    savedKeys.push(publicKey)\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.btcMultisigOtherOwnerKey, JSON.stringify(savedKeys))\r\n\r\n  if (isPrimary) switchBtcMultisigKey(publicKey)\r\n}\r\n\r\nconst switchBtcMultisigKey = (keyOrIndex) => {\r\n  const savedKeys = _loadBtcMultisigKeys()\r\n\r\n  let index = keyOrIndex\r\n  if (!Number.isInteger(index)) index = savedKeys.indexOf(keyOrIndex)\r\n\r\n  if ((index > -1) && (index < savedKeys.length)) {\r\n    if (index !== 0) {\r\n      //@\r\n      const newKey = savedKeys.splice(index, 1)\r\n      //@\r\n      savedKeys.unshift(newKey[0])\r\n      localStorage.setItem(constants.privateKeyNames.btcMultisigOtherOwnerKey, JSON.stringify(savedKeys))\r\n\r\n      const {\r\n        user: {\r\n          btcData: {\r\n            privateKey,\r\n          },\r\n        },\r\n      } = getState()\r\n      //@\r\n      login_USER(privateKey, newKey[0])\r\n      //@\r\n      getBalanceUser()\r\n    }\r\n  }\r\n}\r\n\r\nconst removeBtcMultisigNey = (keyOrIndex) => {\r\n  const savedKeys = _loadBtcMultisigKeys()\r\n\r\n  let index = keyOrIndex\r\n  if (!Number.isInteger(index)) index = savedKeys.indexOf(keyOrIndex)\r\n\r\n  if (index > -1) {\r\n    //@\r\n    const newKey = savedKeys.splice(index, 1)\r\n\r\n    localStorage.setItem(constants.privateKeyNames.btcMultisigOtherOwnerKey, JSON.stringify(savedKeys))\r\n\r\n    if (index === 0) {\r\n      switchBtcMultisigKey(0)\r\n      return true\r\n    }\r\n  }\r\n}\r\n\r\nconst checkSMSActivated = () => {\r\n  const { user: { btcMultisigSMSData: { isRegistered } } } = getState()\r\n  return isRegistered\r\n}\r\n\r\nconst checkPINActivated = () => {\r\n  const { user: { btcMultisigPinData: { isRegistered } } } = getState()\r\n  return isRegistered\r\n}\r\n\r\nconst checkG2FAActivated = () => false\r\n\r\nconst checkUserActivated = () => {\r\n  const { user: { btcMultisigUserData: { active } } } = getState()\r\n  return active\r\n}\r\n\r\nconst isBTCSMSAddress = (address) => {\r\n  const {\r\n    user: {\r\n      btcData,\r\n      btcMultisigSMSData,\r\n    },\r\n  } = getState()\r\n\r\n  if (btcMultisigSMSData && btcMultisigSMSData.address && btcMultisigSMSData.address.toLowerCase() === address.toLowerCase()) return btcMultisigSMSData\r\n\r\n  return false\r\n}\r\n\r\nconst isBTCMSUserAddress = (address) => {\r\n  const {\r\n    user: {\r\n      btcMultisigUserData: msData,\r\n    },\r\n  } = getState()\r\n\r\n  if (msData.address === address) return true\r\n\r\n  if (msData.wallets\r\n    && msData.wallets.length\r\n  ) {\r\n    const founded = msData.wallets.filter((wallet) => wallet.address === address)\r\n    if (founded.length) return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n// @ToDo - Remove.\r\nconst isBTCAddress = (address) => {\r\n  console.warn(`Deprecated call isBTCAddress`)\r\n  return actions.btc.getDataByAddress(address)\r\n\r\n  /*const {\r\n    user: {\r\n      btcData,\r\n      btcMnemonicData,\r\n      btcMultisigSMSData,\r\n      btcMultisigUserData,\r\n      btcMultisigG2FAData,\r\n    },\r\n  } = getState()\r\n\r\n  if (btcData && btcData.address && btcData.address.toLowerCase() === address.toLowerCase()) return btcData\r\n  if (btcMnemonicData && btcMnemonicData.address && btcMnemonicData.address.toLowerCase() === address.toLowerCase()) return btcMnemonicData // Sweep\r\n  if (btcMultisigSMSData && btcMultisigSMSData.address && btcMultisigSMSData.address.toLowerCase() === address.toLowerCase()) return btcMultisigSMSData\r\n  if (btcMultisigUserData && btcMultisigUserData.address && btcMultisigUserData.address.toLowerCase() === address.toLowerCase()) return btcMultisigUserData\r\n  if (btcMultisigG2FAData && btcMultisigG2FAData.address && btcMultisigG2FAData.address.toLowerCase() === address.toLowerCase()) return btcMultisigG2FAData\r\n\r\n  return false*/\r\n}\r\n\r\nconst createWallet = (privateKey, otherOwnerPublicKey) => {\r\n  // privateKey - key of our privary one-sign btc wallet\r\n  let keyPair\r\n\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    keyPair = bitcoin.ECPair.fromWIF(privateKey, btc.network)\r\n  }\r\n  else {\r\n    console.error('Requery privateKey')\r\n    return false\r\n  }\r\n\r\n\r\n  const account = bitcoin.ECPair.fromWIF(privateKey, btc.network) // eslint-disable-line\r\n  //@\r\n  const { addressOfMyOwnWallet } = bitcoin.payments.p2wpkh({ pubkey: account.publicKey, network: btc.network })\r\n  const { publicKey } = account\r\n\r\n  const publicKeysRaw = [otherOwnerPublicKey, account.publicKey.toString('hex')].sort().reverse()\r\n\r\n  const publicKeys = publicKeysRaw.map(hex => Buffer.from(hex, 'hex'))\r\n\r\n  const p2ms = bitcoin.payments.p2ms({\r\n    m: 2,\r\n    n: 2,\r\n    pubkeys: publicKeys,\r\n    network: btc.network,\r\n  })\r\n  const p2sh = bitcoin.payments.p2sh({ redeem: p2ms, network: btc.network })\r\n\r\n  const { address } = p2sh\r\n\r\n\r\n  const data = {\r\n    account,\r\n    keyPair,\r\n    address,\r\n    addressOfMyOwnWallet,\r\n    currency: 'BTC (Multisig)',\r\n    fullName: 'Bitcoin (Multisig)',\r\n    privateKey,\r\n    publicKeys,\r\n    publicKey,\r\n    isBTC: true,\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.btcMultisigOtherOwnerKey, otherOwnerPublicKey)\r\n\r\n  window.getBtcMultisigData = () => data\r\n  window.getBtcMultisigAddress = () => data.address\r\n\r\n  console.info('Logged in with BitcoinMultisig', data)\r\n  reducers.user.setAuthData({ name: 'btcMultisigData', data })\r\n}\r\n\r\nconst login_SMS = (privateKey, otherOwnerPublicKey) => {\r\n  const data = login_(privateKey, otherOwnerPublicKey, false)\r\n\r\n  if (!data) return false\r\n\r\n  const isRegistered = (localStorage.getItem(`${constants.localStorage.didProtectedBtcCreated}:${data.address}`) === '1')\r\n\r\n  data.currency = 'BTC (SMS-Protected)'\r\n  data.fullName = 'Bitcoin (SMS-Protected)'\r\n  data.isRegistered = (otherOwnerPublicKey instanceof Array && otherOwnerPublicKey.length > 1) ? true : isRegistered\r\n  data.isSmsProtected = true\r\n\r\n  window.getBtcSmsData = () => data\r\n  reducers.user.setAuthData({ name: 'btcMultisigSMSData', data })\r\n}\r\n\r\nconst login_PIN = (privateKey, otherOwnerPublicKey) => {\r\n  const data = login_(privateKey, otherOwnerPublicKey, false)\r\n\r\n  if (!data) return false\r\n\r\n  const isRegistered = (localStorage.getItem(`${constants.localStorage.didPinBtcCreated}:${data.address}`) === '1')\r\n\r\n\r\n  data.currency = 'BTC (PIN-Protected)'\r\n  data.fullName = 'Bitcoin (PIN-Protected)'\r\n  data.isRegistered = (otherOwnerPublicKey instanceof Array && otherOwnerPublicKey.length > 1) ? true : isRegistered\r\n  data.isPinProtected = true\r\n\r\n  window.getBtcPinData = () => data\r\n  reducers.user.setAuthData({ name: 'btcMultisigPinData', data })\r\n}\r\n\r\nconst login_G2FA = (privateKey, otherOwnerPublicKey) => {\r\n  const data = login_(privateKey, otherOwnerPublicKey, false)\r\n\r\n  if (!data) return false\r\n\r\n  const isRegistered = (localStorage.getItem(`${constants.localStorage.didProtectedBtcG2FACreated}:${data.address}`) === '1')\r\n\r\n  data.currency = 'BTC (Google 2FA)'\r\n  data.fullName = 'Bitcoin (Google 2FA)'\r\n  data.isRegistered = isRegistered\r\n  data.isG2FAProtected = true\r\n\r\n  reducers.user.setAuthData({ name: 'btcMultisigG2FAData', data })\r\n}\r\n\r\nconst login_USER = (privateKey, otherOwnerPublicKey, onlyCheck) => {\r\n  if (otherOwnerPublicKey instanceof Array && otherOwnerPublicKey.length === 0) return\r\n\r\n  const data = login_(privateKey, (otherOwnerPublicKey instanceof Array) ? otherOwnerPublicKey[0] : otherOwnerPublicKey, true)\r\n\r\n  if (!data) return false\r\n\r\n  data.isUserProtected = true\r\n  if (onlyCheck) return data\r\n\r\n  reducers.user.setAuthData({ name: 'btcMultisigUserData', data })\r\n\r\n  // Setup pubsubRoom sign request\r\n  actions.pubsubRoom.onReady(() => {\r\n    const { user: { btcMultisigUserData: { address } } } = getState()\r\n    const onRequestEventName = `btc multisig request sign ${address}`\r\n    SwapApp.shared().services.room.subscribe(onRequestEventName, (_data) => {\r\n      const { txData } = _data\r\n      if (txData && txData.address && txData.amount && txData.currency && txData.txRaw) {\r\n        SwapApp.shared().services.room.sendMessagePeer(\r\n          _data.fromPeer,\r\n          {\r\n            event: `btc multisig accept tx ${address}`,\r\n            data: {},\r\n          }\r\n        )\r\n        actions.notifications.show('BTCMultisignRequest', txData)\r\n        actions.modals.open(constants.modals.BtcMultisignConfirmTx, {\r\n          txData: txData.txRaw,\r\n        })\r\n      }\r\n    })\r\n  })\r\n}\r\n\r\nconst login_ = (privateKey, otherOwnerPublicKey, sortKeys) => {\r\n  let keyPair\r\n\r\n  if (privateKey) {\r\n    const hash = bitcoin.crypto.sha256(privateKey)\r\n    const d = BigInteger.fromBuffer(hash)\r\n\r\n    keyPair = bitcoin.ECPair.fromWIF(privateKey, btc.network)\r\n  }\r\n  else {\r\n    console.log('Requery privateKey')\r\n    return false\r\n  }\r\n\r\n\r\n  const account = bitcoin.ECPair.fromWIF(privateKey, btc.network) // eslint-disable-line\r\n  const { publicKey } = account\r\n  const publicKey_1 = account.publicKey.toString('hex')\r\n\r\n  // TODO - simple sort public keys by ABC - no primary and secondary\r\n  let _data\r\n\r\n  if (otherOwnerPublicKey) {\r\n    let publicKeysRaw = []\r\n    if (otherOwnerPublicKey instanceof Array) {\r\n      otherOwnerPublicKey.forEach((key) => { publicKeysRaw.push(key) })\r\n    } else {\r\n      publicKeysRaw.push(otherOwnerPublicKey)\r\n    }\r\n    publicKeysRaw.push(publicKey_1)\r\n\r\n    if (sortKeys) publicKeysRaw = publicKeysRaw.sort()\r\n\r\n    const publicKeys = publicKeysRaw.map(hex => Buffer.from(hex, 'hex'))\r\n    const p2ms = bitcoin.payments.p2ms({\r\n      m: 2,\r\n      n: publicKeysRaw.length,\r\n      pubkeys: publicKeys,\r\n      network: btc.network,\r\n    })\r\n\r\n    const p2sh = bitcoin.payments.p2sh({ redeem: p2ms, network: btc.network })\r\n    const { address } = p2sh\r\n    //@\r\n    const { addressOfMyOwnWallet } = bitcoin.payments.p2wpkh({ pubkey: account.publicKey, network: btc.network })\r\n\r\n    _data = {\r\n      account,\r\n      keyPair,\r\n      p2sh,\r\n      address,\r\n      addressOfMyOwnWallet,\r\n      currency: 'BTC (Multisig)',\r\n      fullName: 'Bitcoin (Multisig)',\r\n      privateKey,\r\n      publicKeys,\r\n      publicKey,\r\n      isBTC: true,\r\n      active: true,\r\n    }\r\n  } else {\r\n    _data = {\r\n      account,\r\n      keyPair,\r\n      address: 'Not jointed',\r\n      addressOfMyOwnWallet: 'Not jointed',\r\n      currency: 'BTC (Multisig)',\r\n      fullName: 'Bitcoin (Multisig)',\r\n      privateKey,\r\n      publicKeys: [],\r\n      publicKey,\r\n      isBTC: true,\r\n      active: false,\r\n    }\r\n  }\r\n\r\n  return _data\r\n}\r\n\r\nconst enableWalletSMS = () => {\r\n  const { user: { btcMultisigSMSData } } = getState()\r\n  btcMultisigSMSData.isRegistered = true\r\n  reducers.user.setAuthData({ name: 'btcMultisigSMSData', btcMultisigSMSData })\r\n}\r\n\r\nconst enableWalletG2FA = () => {\r\n  const { user: { btcMultisigG2FAData } } = getState()\r\n  btcMultisigG2FAData.isRegistered = true\r\n  reducers.user.setAuthData({ name: 'btcMultisigG2FAData', btcMultisigG2FAData })\r\n}\r\n\r\nconst enableWalletUSER = () => {\r\n}\r\n\r\nconst onUserMultisigJoin = (data) => {\r\n  console.log('on user multisig join', data)\r\n  const {\r\n    user: {\r\n      btcMultisigUserData,\r\n      btcData,\r\n    },\r\n  } = getState()\r\n  const { fromPeer, checkKey, publicKey } = data\r\n\r\n  if (checkKey === btcData.publicKey.toString('hex') && publicKey && (publicKey.length === 66)) {\r\n    console.log('checks ok - connect')\r\n    addBtcMultisigKey(publicKey, true)\r\n    SwapApp.shared().services.room.sendMessagePeer(fromPeer, {\r\n      event: 'btc multisig join ready',\r\n      data: {},\r\n    })\r\n  }\r\n}\r\n\r\n// Получили транзакцию из комнаты -  проверяем, наш это кошелек и если да. Записываем в историю транзакций с поменткой - нужно подтвердить\r\nconst onUserMultisigSend = (data) => {\r\n  console.log('on user multisig send', data)\r\n}\r\n\r\n// Рассылает транзакцию в комнате, если второй владелец в сети. То он сразу увидит, что ему нужно подтвердить транзакцию без передачи ссылки\r\nconst broadcastTX2Room = (txData, cbSuccess, cbFail) => {\r\n  const { user: { btcMultisigUserData: { publicKey, address } } } = getState()\r\n\r\n  const onSuccessEventName = `btc multisig accept tx ${address}`\r\n  let failTimer = false\r\n\r\n  const onSuccessEvent = (data) => {\r\n    console.log('broadcast sucess', data)\r\n    //@\r\n    clearTimeout(failTimer)\r\n    SwapApp.shared().services.room.unsubscribe(onSuccessEventName, onSuccessEvent)\r\n    if (cbSuccess) cbSuccess()\r\n  }\r\n\r\n  const cancelFunc = () => {\r\n    console.log('broadcast multisig canceled')\r\n    //@\r\n    clearTimeout(failTimer)\r\n    SwapApp.shared().services.room.unsubscribe(onSuccessEventName, onSuccessEvent)\r\n  }\r\n\r\n  const onFailTimer = () => {\r\n    console.log('broadcast multisig fail timer')\r\n    //@\r\n    clearTimeout(failTimer)\r\n    SwapApp.shared().services.room.unsubscribe(onSuccessEventName, onSuccessEvent)\r\n    if (cbFail) cbFail()\r\n  }\r\n  //@\r\n  failTimer = setTimeout(onFailTimer, 30000)\r\n\r\n  SwapApp.shared().services.room.subscribe(onSuccessEventName, onSuccessEvent)\r\n\r\n  // Broadcast TX\r\n  SwapApp.shared().services.room.sendMessageRoom({\r\n    event: `btc multisig request sign ${address}`,\r\n    data: {\r\n      txData,\r\n      publicKey: publicKey.toString('hex'),\r\n    },\r\n  })\r\n  return cancelFunc\r\n}\r\n\r\nwindow.broadcastTX2Room = broadcastTX2Room\r\n\r\nconst _getSign = () => {\r\n  const { user: { btcMultisigSMSData: { account, address, keyPair, publicKey } } } = getState()\r\n  const message = `${address}:${publicKey.toString('hex')}`\r\n\r\n  console.log(message)\r\n  const sign = bitcoinMessage.sign(message, account.privateKey, keyPair.compressed)\r\n  return sign.toString('base64')\r\n}\r\n\r\nconst beginRegisterSMS = async (phone, mnemonic, ownPublicKey) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        account,\r\n        keyPair,\r\n        publicKey,\r\n      },\r\n      btcData: {\r\n        address,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const publicKeys = []\r\n  if (mnemonic && !ownPublicKey) {\r\n    // 2of3 - extract public key from mnemonic\r\n    const mnemonicAccount = actions.btc.getWalletByWords(mnemonic, 1)\r\n    publicKeys.push(mnemonicAccount.publicKey)\r\n  }\r\n\r\n  // Возможность использовать произвольный публик-кей для разблокирования\r\n  if (ownPublicKey) {\r\n    publicKeys.push(ownPublicKey)\r\n  }\r\n\r\n  publicKeys.push(publicKey.toString('Hex'))\r\n\r\n  const sign = _getSign()\r\n  try {\r\n    const result: any = await apiLooper.post('btc2FAProtected', `/register/begin/`, {\r\n      body: {\r\n        phone,\r\n        address,\r\n        publicKey: JSON.stringify(publicKeys),\r\n        checkSign: sign,\r\n        mainnet: !!process.env.MAINNET,\r\n        source: window.location.hostname,\r\n      },\r\n    })\r\n    console.log(result)\r\n    return result\r\n  } catch (error) {\r\n    console.error(error)\r\n    return false\r\n  }\r\n}\r\n\r\nconst confirmRegisterSMS = async (phone, smsCode, mnemonic, ownPublicKey) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        account,\r\n        keyPair,\r\n        publicKey,\r\n      },\r\n      btcData: {\r\n        address,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const publicKeys = []\r\n  let mnemonicKey = false\r\n\r\n  if (mnemonic && !ownPublicKey) {\r\n    // 2of3 - extract public key from mnemonic\r\n    const mnemonicAccount = actions.btc.getWalletByWords(mnemonic, 1)\r\n    //@\r\n    mnemonicKey = mnemonicAccount.publicKey\r\n    publicKeys.push(mnemonicKey)\r\n  }\r\n\r\n  // Возможность использовать произвольный публик-кей для разблокирования\r\n  if (ownPublicKey) {\r\n    publicKeys.push(ownPublicKey)\r\n    mnemonicKey = ownPublicKey\r\n  }\r\n\r\n  publicKeys.push(publicKey.toString('Hex'))\r\n\r\n  const sign = _getSign()\r\n\r\n  const newKeys = JSON.stringify(publicKeys)\r\n\r\n  try {\r\n    const result: any = await apiLooper.post('btc2FAProtected', `/register/confirm/`, {\r\n      body: {\r\n        phone,\r\n        address,\r\n        smsCode,\r\n        publicKey: newKeys,\r\n        checkSign: sign,\r\n        mainnet: !!process.env.MAINNET,\r\n        source: window.location.hostname,\r\n      },\r\n    })\r\n\r\n    if ((result && result.answer && result.answer === 'ok') || (result.error === 'Already registered')) {\r\n      localStorage.setItem(`${constants.localStorage.didProtectedBtcCreated}:${address}`, '1')\r\n      if (mnemonic) {\r\n        addSMSWallet(mnemonicKey)\r\n      }\r\n    }\r\n\r\n    return result\r\n  } catch (error) {\r\n    console.error(error)\r\n    return false\r\n  }\r\n}\r\n\r\nconst register_PIN = async (password, mnemonic, ownPublicKey) => {\r\n  const {\r\n    user: {\r\n      btcMultisigPinData: {\r\n        account,\r\n        keyPair,\r\n        publicKey,\r\n      },\r\n      btcData: {\r\n        address,\r\n        publicKey: mainKey,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const btcPinServerKey = config.swapContract.btcPinKey\r\n  const publicKeys = [btcPinServerKey]\r\n  let mnemonicKey = false\r\n\r\n  if (mnemonic && !ownPublicKey) {\r\n    // 2of3 - extract public key from mnemonic\r\n    const mnemonicAccount = actions.btc.getWalletByWords(mnemonic, 1)\r\n    //@\r\n    mnemonicKey = mnemonicAccount.publicKey\r\n    publicKeys.push(mnemonicKey)\r\n  }\r\n\r\n  // Возможность использовать произвольный публик-кей для разблокирования\r\n  if (ownPublicKey) {\r\n    publicKeys.push(ownPublicKey)\r\n    mnemonicKey = ownPublicKey\r\n  }\r\n\r\n  publicKeys.push(mainKey.toString('Hex'))\r\n\r\n  const sign = _getSign()\r\n\r\n  const newKeys = JSON.stringify(publicKeys)\r\n\r\n  try {\r\n    const result: any = await apiLooper.post('btcPin', `/register/`, {\r\n      body: {\r\n        address,\r\n        password,\r\n        publicKey: newKeys,\r\n        checkSign: sign,\r\n        mainnet: !!process.env.MAINNET,\r\n        source: window.location.hostname,\r\n      },\r\n    })\r\n\r\n    if ((result && result.answer && result.answer === 'ok') || (result.error === 'Already registered')) {\r\n      localStorage.setItem(`${constants.localStorage.didPinBtcCreated}:${address}`, '1')\r\n      addPinWallet(mnemonicKey)\r\n    }\r\n\r\n    return result\r\n  } catch (error) {\r\n    console.error(error)\r\n    return false\r\n  }\r\n}\r\n\r\nconst addPinWallet = async (mnemonicOrKey) => {\r\n  const {\r\n    user: {\r\n      btcData: {\r\n        privateKey,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  let mnemonicKey = mnemonicOrKey\r\n  if (actions.btc.validateMnemonicWords(mnemonicOrKey)) {\r\n    const mnemonicAccount = actions.btc.getWalletByWords(mnemonicOrKey, 1)\r\n    mnemonicKey = mnemonicAccount.publicKey\r\n  }\r\n\r\n  let btcPinMnemonicKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcPinMnemonicKey)\r\n  \r\n  try { \r\n    btcPinMnemonicKey = JSON.parse(btcPinMnemonicKey) \r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n\r\n  if (!(btcPinMnemonicKey instanceof Array)) {\r\n    btcPinMnemonicKey = []\r\n  }\r\n\r\n  const index = btcPinMnemonicKey.indexOf(mnemonicKey)\r\n\r\n  if (index === -1) btcPinMnemonicKey.unshift(mnemonicKey)\r\n  if ((index > -1) && (index < btcPinMnemonicKey.length)) {\r\n    if (index !== 0) {\r\n      btcPinMnemonicKey = btcPinMnemonicKey.splice(index, 1)\r\n      btcPinMnemonicKey.unshift(mnemonicKey)\r\n    }\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.btcPinMnemonicKey, JSON.stringify(btcPinMnemonicKey))\r\n\r\n  const btcPinServerKey = config.swapContract.btcPinKey\r\n  let btcPinPublicKeys = [btcPinServerKey, mnemonicKey]\r\n\r\n  await actions.btcmultisig.login_PIN(privateKey, btcPinPublicKeys)\r\n  const { user: { btcMultisigPinData: { address } } } = getState()\r\n\r\n  await getBalance(address, 'btcMultisigPinData')\r\n}\r\n\r\nconst addSMSWallet = async (mnemonicOrKey) => {\r\n  const {\r\n    user: {\r\n      btcData: {\r\n        privateKey,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  let mnemonicKey = mnemonicOrKey\r\n  if (actions.btc.validateMnemonicWords(mnemonicOrKey)) {\r\n    const mnemonicAccount = actions.btc.getWalletByWords(mnemonicOrKey, 1)\r\n    mnemonicKey = mnemonicAccount.publicKey\r\n  }\r\n\r\n  let btcSmsMnemonicKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcSmsMnemonicKey)\r\n  \r\n  try { \r\n    btcSmsMnemonicKey = JSON.parse(btcSmsMnemonicKey) \r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n\r\n  if (!(btcSmsMnemonicKey instanceof Array)) {\r\n    btcSmsMnemonicKey = []\r\n  }\r\n\r\n  const index = btcSmsMnemonicKey.indexOf(mnemonicKey)\r\n\r\n  if (index === -1) btcSmsMnemonicKey.unshift(mnemonicKey)\r\n  if ((index > -1) && (index < btcSmsMnemonicKey.length)) {\r\n    if (index !== 0) {\r\n      btcSmsMnemonicKey = btcSmsMnemonicKey.splice(index, 1)\r\n      btcSmsMnemonicKey.unshift(mnemonicKey)\r\n    }\r\n  }\r\n\r\n  localStorage.setItem(constants.privateKeyNames.btcSmsMnemonicKey, JSON.stringify(btcSmsMnemonicKey))\r\n\r\n  const btcSMSServerKey = config.swapContract.protectedBtcKey\r\n  let btcSmsPublicKeys = [btcSMSServerKey, mnemonicKey]\r\n\r\n  await actions.btcmultisig.login_SMS(privateKey, btcSmsPublicKeys)\r\n  await getBalance()\r\n}\r\n\r\nconst getAddrBalance = (address) => {\r\n  return new Promise((resolve) => {\r\n    bitcoinUtils.fetchBalance({\r\n      address,\r\n      withUnconfirmed: true,\r\n      apiBitpay: BITPAY_API\r\n    }).then((answer) => {\r\n      //@\r\n      const { balance, unconfirmed } = answer\r\n      resolve({\r\n        address,\r\n        balance: balance,\r\n        unconfirmedBalance: unconfirmed,\r\n      })\r\n    }).catch((e) => {\r\n      resolve(false)\r\n    })\r\n  })\r\n}\r\n\r\nconst getBalance = (ownAddress = null, ownDataKey = null) => {\r\n  const { user: { btcMultisigSMSData: { address } } } = getState()\r\n  const checkAddress = (ownAddress) || address\r\n  const dataKey = (ownDataKey) || 'btcMultisigSMSData'\r\n\r\n  if (checkAddress === 'Not jointed') {\r\n    return new Promise((resolve) => {\r\n      reducers.user.setBalance({\r\n        name: dataKey,\r\n        amount: 0,\r\n        unconfirmedBalance: 0,\r\n      })\r\n      resolve(0)\r\n    })\r\n  }\r\n\r\n  return getAddrBalance(checkAddress).then(({ balance, unconfirmedBalance }) => {\r\n    reducers.user.setBalance({ name: dataKey, amount: balance, unconfirmedBalance })\r\n    return balance\r\n  })\r\n    .catch((e) => {\r\n      reducers.user.setBalanceError({ name: dataKey })\r\n    })\r\n}\r\n\r\nconst getBalancePin = () => {\r\n  const { user: { btcMultisigPinData: { address } } } = getState()\r\n\r\n  return getBalance(address, 'btcMultisigPinData')\r\n}\r\n\r\nconst getBalanceUser = (checkAddress) => {\r\n  const { user: { btcMultisigUserData: { address } } } = getState()\r\n  if (!checkAddress) {\r\n    return getBalance(address, 'btcMultisigUserData')\r\n  }\r\n  return getAddrBalance(checkAddress).then(({ balance, unconfirmedBalance }) => {\r\n    reducers.user.setBtcMultisigBalance({\r\n      address: checkAddress,\r\n      amount: balance,\r\n      isBalanceFetched: true,\r\n      unconfirmedBalance,\r\n    })\r\n\r\n    return balance\r\n  })\r\n\r\n}\r\n\r\nconst getBalanceG2FA = () => {\r\n}\r\n\r\nconst fetchBalance = (address) => bitcoinUtils.fetchBalance({\r\n  address,\r\n  withUnconfirmed: false,\r\n  apiBitpay: BITPAY_API,\r\n})\r\n\r\nconst fetchTx = (hash, cacheResponse) => bitcoinUtils.fetchTx({\r\n  hash,\r\n  apiBitpay: BITPAY_API,\r\n  cacheResponse,\r\n})\r\n\r\nconst fetchTxInfo = (hash, cacheResponse) => bitcoinUtils.fetchTxInfo({\r\n  hash,\r\n  apiBitpay: BITPAY_API,\r\n  cacheResponse,\r\n  hasAdminFee,\r\n})\r\n\r\nconst getTransactionUser = (address: string = ``) => {\r\n  if (!address) {\r\n    // Fetch all\r\n    return new Promise(async (resolve) => {\r\n      const msWallets = await getBtcMultisigKeys({\r\n        opts: {\r\n          dontFetchBalance: true,\r\n        },\r\n      })\r\n      //@\r\n      if (msWallets.length) {\r\n        //@\r\n        const promiseList = msWallets.map((walletData) => getTransactionUser(walletData.address))\r\n\r\n        const txLists = await Promise.all(promiseList)\r\n\r\n        let retValue = []\r\n        txLists.forEach((txs) => {\r\n          //@\r\n          retValue = [...retValue, ...txs]\r\n        })\r\n\r\n        resolve(retValue)\r\n      } else {\r\n        resolve([])\r\n      }\r\n    })\r\n  }\r\n  return getTransaction(address, 'btc (multisig)')\r\n\r\n}\r\n//@\r\nconst getTransactionSMS = (address: string = ``) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        address: smsAddress,\r\n        isRegistered,\r\n      },\r\n    },\r\n  } = getState()\r\n  if (!isRegistered) {\r\n    return new Promise((resolve) => { resolve([]) })\r\n  }\r\n  return getTransaction((address || smsAddress), `btc (sms-protected)`)\r\n}\r\n\r\nconst getTransactionPIN = (address: string = ``) => {\r\n  const {\r\n    user: {\r\n      btcMultisigPinData: {\r\n        address: pinAddress,\r\n        isRegistered,\r\n      },\r\n    },\r\n  } = getState()\r\n  if (!isRegistered) {\r\n    return new Promise((resolve) => { resolve([]) })\r\n  }\r\n  return getTransaction((address || pinAddress), `btc (pin-protected)`)\r\n}\r\n\r\nconst getTransactionG2FA = () => { }\r\n\r\nconst getInvoicesSMS = () => {\r\n  const { user: { btcMultisigSMSData: { address } } } = getState()\r\n\r\n  return actions.invoices.getInvoices({\r\n    currency: 'BTC',\r\n    address,\r\n  })\r\n}\r\n\r\nconst getInvoicesUser = () => {\r\n  const { user: { btcMultisigUserData: { address } } } = getState()\r\n\r\n  return actions.invoices.getInvoices({\r\n    currency: 'BTC',\r\n    address,\r\n  })\r\n}\r\n\r\nconst getTransaction = (ownAddress, ownType) => {\r\n  return bitcoinUtils.getTransactionBlocyper({\r\n    ownAddress,\r\n    ownType,\r\n    myWallets: [ownAddress],\r\n    network: btc.network,\r\n    apiBlocyper: BLOCYPER_API,\r\n  })\r\n}\r\n//@\r\nconst sendSMSProtected = async ({ from, to, amount, feeValue, speed } = {}) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        privateKey,\r\n        address: smsAddress,\r\n        publicKeys,\r\n        publicKey,\r\n      },\r\n      btcData: {\r\n        address,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  let feeFromAmount: number | BigNumber = new BigNumber(0)\r\n\r\n  if (hasAdminFee) {\r\n    const {\r\n      fee: adminFee,\r\n      min: adminFeeMinValue,\r\n    } = hasAdminFee\r\n\r\n    const adminFeeMin = new BigNumber(adminFeeMinValue)\r\n\r\n    feeFromAmount = new BigNumber(adminFee).dividedBy(100).multipliedBy(amount)\r\n    if (adminFeeMin.isGreaterThan(feeFromAmount)) feeFromAmount = adminFeeMin\r\n\r\n    feeFromAmount = feeFromAmount.multipliedBy(1e8).integerValue() // Admin fee in satoshi\r\n  }\r\n  feeFromAmount = feeFromAmount.toNumber()\r\n\r\n  const feeData =  await btc.estimateFeeValue({\r\n    inSatoshis: true,\r\n    speed,\r\n    method: 'send_2fa',\r\n    address: smsAddress,\r\n    amount,\r\n    moreInfo: true,\r\n  })\r\n\r\n  const {\r\n    satoshis,\r\n    unspents,\r\n    unspents: originalUnspents,\r\n  } = feeData\r\n  feeValue = satoshis\r\n\r\n  const fundValue = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n  const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n  const skipValue = totalUnspent - fundValue - feeValue - feeFromAmount\r\n\r\n  const p2ms = bitcoin.payments.p2ms({\r\n    m: 2,\r\n    n: publicKeys.length,\r\n    pubkeys: publicKeys,\r\n    network: btc.network,\r\n  })\r\n\r\n  const psbt = new bitcoin.Psbt({network: btc.network})\r\n\r\n  psbt.addOutput({\r\n    address: to,\r\n    value: fundValue,\r\n  })\r\n\r\n  if (skipValue > 546) {\r\n    psbt.addOutput({\r\n      address: from,\r\n      value: skipValue\r\n    })\r\n  }\r\n\r\n  if (hasAdminFee) {\r\n    // admin fee output\r\n    psbt.addOutput({\r\n      address: hasAdminFee.address,\r\n      value: feeFromAmount,\r\n    })\r\n  }\r\n\r\n  for (let i = 0; i < unspents.length; i++) {\r\n    const { txid, vout } = unspents[i]\r\n    const rawTx = await actions.btc.fetchTxRaw(txid, { cacheResponse: 5000 })\r\n    psbt.addInput({\r\n      hash: txid,\r\n      index: vout,\r\n      redeemScript: p2ms.output,\r\n      nonWitnessUtxo: Buffer.from(rawTx, 'hex'),\r\n    })\r\n  }\r\n\r\n  psbt.signAllInputs(bitcoin.ECPair.fromWIF(privateKey, btc.network))\r\n\r\n  const rawTX = psbt.toHex()\r\n\r\n  let authKeys = publicKeys.slice(1)\r\n  authKeys = JSON.stringify(authKeys.map((key) => key.toString('Hex')))\r\n\r\n  try {\r\n    const result: any = await apiLooper.post('btc2FAProtected', `/push/`, {\r\n      body: {\r\n        address,\r\n        publicKey: authKeys,\r\n        checkSign: _getSign,\r\n        rawTX,\r\n        mainnet: process.env.MAINNET ? true : false,\r\n        source: window.location.hostname,\r\n      },\r\n      timeout: {\r\n        response: 0,\r\n        deadline: 5000,\r\n      },\r\n    })\r\n    return {\r\n      ...result,\r\n      rawTx: rawTX,\r\n    }\r\n  } catch (apiError) {\r\n    return {\r\n      error: apiError.message,\r\n      rawTx: rawTX,\r\n    }\r\n  }\r\n}\r\n\r\n//@\r\nconst sendPinProtected = async ({ from, to, amount, feeValue, speed, password, mnemonic } = {}) => {\r\n  const {\r\n    user: {\r\n      btcMultisigPinData: {\r\n        privateKey,\r\n        publicKeys,\r\n        publicKey,\r\n        address: pinAddress,\r\n      },\r\n      btcData: {\r\n        address,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  let feeFromAmount: any = new BigNumber(0)\r\n  let totalAmount = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n\r\n  if (hasAdminFee) {\r\n    const {\r\n      fee: adminFee,\r\n      min: adminFeeMinValue,\r\n    } = hasAdminFee\r\n\r\n    const adminFeeMin = new BigNumber(adminFeeMinValue)\r\n\r\n    feeFromAmount = new BigNumber(adminFee).dividedBy(100).multipliedBy(amount)\r\n    if (adminFeeMin.isGreaterThan(feeFromAmount)) feeFromAmount = adminFeeMin\r\n\r\n\r\n    feeFromAmount = feeFromAmount.multipliedBy(1e8).integerValue() // Admin fee in satoshi\r\n    totalAmount = new BigNumber(totalAmount).plus(feeFromAmount).integerValue().toNumber()\r\n\r\n  }\r\n  feeFromAmount = feeFromAmount.toNumber()\r\n  const feeData = await btc.estimateFeeValue({\r\n    inSatoshis: true,\r\n    speed,\r\n    method: 'send_2fa',\r\n    address: pinAddress,\r\n    moreInfo: true,\r\n    amount: new BigNumber(totalAmount).dividedBy(1e8).toNumber(),\r\n  })\r\n\r\n  const {\r\n    satoshis,\r\n    unspents,\r\n    unspents: originalUnspents,\r\n  } = feeData\r\n  feeValue = satoshis\r\n\r\n  let fundValue = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n  const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n  let skipValue = totalUnspent - fundValue - feeValue - feeFromAmount\r\n\r\n  if (new BigNumber(skipValue).isLessThan(0)) {\r\n    console.log('>>>>> skip is less than zero', skipValue, fundValue, totalUnspent)\r\n    fundValue = new BigNumber(fundValue).plus(skipValue).integerValue().toNumber()\r\n    skipValue = 0\r\n  }\r\n\r\n  const p2ms = bitcoin.payments.p2ms({\r\n    m: 2,\r\n    n: publicKeys.length,\r\n    pubkeys: publicKeys,\r\n    network: btc.network,\r\n  })\r\n\r\n  const psbt = new bitcoin.Psbt({network: btc.network})\r\n\r\n  psbt.addOutput({\r\n    address: to,\r\n    value: fundValue,\r\n  })\r\n\r\n  if (skipValue > 546) {\r\n    psbt.addOutput({\r\n      address: from,\r\n      value: skipValue\r\n    })\r\n  }\r\n\r\n  if (hasAdminFee) {\r\n    // admin fee output\r\n    psbt.addOutput({\r\n      address: hasAdminFee.address,\r\n      value: feeFromAmount,\r\n    })\r\n  }\r\n\r\n  for (let i = 0; i < unspents.length; i++) {\r\n    const { txid, vout } = unspents[i]\r\n    const rawTxo = await actions.btc.fetchTxRaw(txid, { cacheResponse: 5000 })\r\n    psbt.addInput({\r\n      hash: txid,\r\n      index: vout,\r\n      redeemScript: p2ms.output,\r\n      nonWitnessUtxo: Buffer.from(rawTxo, 'hex'),\r\n    })\r\n  }\r\n\r\n  psbt.signAllInputs(bitcoin.ECPair.fromWIF(privateKey, btc.network))\r\n\r\n  const rawTX = psbt.toHex()\r\n\r\n  if (mnemonic) {\r\n    const mnemonicTx = await signPinMnemonic(rawTX, mnemonic)\r\n    const broadcastResult = await actions.btc.broadcastTx(mnemonicTx)\r\n    if (broadcastResult\r\n      && broadcastResult.txid\r\n    ) {\r\n      return {\r\n        answer: 'ok',\r\n        txId: broadcastResult.txid,\r\n      }\r\n    } else {\r\n      return {\r\n        error: `Fail sign transaction by mnemonic`,\r\n      }\r\n    }\r\n  }\r\n\r\n  let authKeys = publicKeys//.slice(1)\r\n  authKeys = JSON.stringify(authKeys.map((key) => key.toString('Hex')))\r\n\r\n  try {\r\n    const result: any = await apiLooper.post('btcPin', `/sign/`, {\r\n      body: {\r\n        address,\r\n        publicKey: authKeys,\r\n        checkSign: _getSign,\r\n        rawTX: rawTX,\r\n        mainnet: process.env.MAINNET ? true : false,\r\n        source: window.location.hostname,\r\n        password,\r\n        version: `v5`,\r\n      },\r\n      timeout: {\r\n        response: 0,\r\n        deadline: 5000,\r\n      },\r\n    })\r\n\r\n    if (result\r\n      && result.answer\r\n      && result.answer === 'ok'\r\n      && result.rawTX\r\n    ) {\r\n      const broadcastResult = await actions.btc.broadcastTx(result.rawTX)\r\n      if (broadcastResult\r\n        && broadcastResult.txid\r\n      ) {\r\n        return {\r\n          answer: 'ok',\r\n          txId: broadcastResult.txid,\r\n        }\r\n      } else {\r\n        return {\r\n          error: 'Fail broadcast transaction'\r\n        }\r\n      }\r\n    } else {\r\n      return {\r\n        ...result,\r\n      }\r\n    }\r\n  } catch (apiError) {\r\n    return {\r\n      error: apiError.message,\r\n      rawTX,\r\n    }\r\n  }\r\n}\r\n\r\nconst confirmSMSProtected = async (smsCode) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        privateKey,\r\n        publicKeys,\r\n        publicKey,\r\n      },\r\n      btcData: {\r\n        address,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  let authKeys = publicKeys.slice(1)\r\n  authKeys = JSON.stringify(authKeys.map((key) => key.toString('Hex')))\r\n\r\n  const result: any = await apiLooper.post('btc2FAProtected', `/sign/`, {\r\n    body: {\r\n      address,\r\n      version: 'v5',\r\n      publicKey: authKeys,\r\n      checkSign: _getSign,\r\n      code: smsCode,\r\n      mainnet: !!process.env.MAINNET,\r\n      source: window.location.hostname,\r\n    },\r\n  })\r\n  return result\r\n}\r\n//@\r\nconst send = async ({ from, to, amount, feeValue, speed } = {}) => {\r\n  const {\r\n    user: {\r\n      btcMultisigUserData: {\r\n        privateKey,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const senderWallet = addressToWallet(from)\r\n  console.log('senderWallet', from)\r\n\r\n  const { address, publicKeys } = senderWallet\r\n\r\n  feeValue = feeValue || await btc.estimateFeeValue({\r\n    inSatoshis: true,\r\n    speed,\r\n    method: 'send_multisig',\r\n    address,\r\n  })\r\n\r\n  let feeFromAmount: number | BigNumber = new BigNumber(0)\r\n\r\n  if (hasAdminFee) {\r\n    const {\r\n      fee: adminFee,\r\n      min: adminFeeMinValue,\r\n    } = hasAdminFee\r\n\r\n    const adminFeeMin = new BigNumber(adminFeeMinValue)\r\n\r\n    feeFromAmount = new BigNumber(adminFee).dividedBy(100).multipliedBy(amount)\r\n    if (adminFeeMin.isGreaterThan(feeFromAmount)) feeFromAmount = adminFeeMin\r\n\r\n\r\n    feeFromAmount = feeFromAmount.multipliedBy(1e8).integerValue()\r\n  }\r\n  feeFromAmount = feeFromAmount.toNumber()\r\n  const unspents = await fetchUnspents(from)\r\n\r\n  const fundValue = new BigNumber(String(amount)).multipliedBy(1e8).integerValue().toNumber()\r\n  const totalUnspent = unspents.reduce((summ, { satoshis }) => summ + satoshis, 0)\r\n  const skipValue = totalUnspent - fundValue - feeValue - feeFromAmount\r\n\r\n  const p2ms = bitcoin.payments.p2ms({\r\n    m: 2,\r\n    n: publicKeys.length,\r\n    pubkeys: publicKeys,\r\n    network: btc.network,\r\n  })\r\n\r\n  const p2sh = bitcoin.payments.p2sh({ redeem: p2ms, network: btc.network })\r\n\r\n  const psbt = new bitcoin.Psbt({network: btc.network})\r\n\r\n  psbt.addOutput({\r\n    address: to,\r\n    value: fundValue,\r\n  })\r\n\r\n  if (skipValue > 546) {\r\n    psbt.addOutput({\r\n      address: from,\r\n      value: skipValue\r\n    })\r\n  }\r\n\r\n  if (hasAdminFee) {\r\n    // admin fee output\r\n    psbt.addOutput({\r\n      address: hasAdminFee.address,\r\n      value: feeFromAmount,\r\n    })\r\n  }\r\n\r\n  for (let i = 0; i < unspents.length; i++) {\r\n    const { txid, vout } = unspents[i]\r\n    //@\r\n    const rawTx = await actions.btc.fetchTxRaw(txid)\r\n    psbt.addInput({\r\n      hash: txid,\r\n      index: vout,\r\n      redeemScript: p2ms.output,\r\n      nonWitnessUtxo: Buffer.from(rawTx, 'hex'),\r\n    })\r\n  }\r\n\r\n  psbt.signAllInputs(bitcoin.ECPair.fromWIF(privateKey, btc.network))\r\n\r\n  const rawTx = psbt.toHex();\r\n\r\n  return rawTx\r\n}\r\n\r\nconst getMSWalletByScript = async (script, myBtcWallets) => {\r\n  //@\r\n  if (!myBtcWallets) myBtcWallets = await getBtcMultisigKeys()\r\n  if (typeof script !== 'string') script = bitcoin.script.toASM( script )\r\n\r\n  const wallets = myBtcWallets.filter((wallet) => {\r\n    const keys = wallet.publicKeys.map(buf => buf.toString('hex')).join(` `)\r\n    const walletScript = `OP_2 ${keys} OP_2 OP_CHECKMULTISIG`\r\n\r\n    if (walletScript === script) {\r\n      return true\r\n    }\r\n  }).map((wallet) => {\r\n    const {\r\n      publicKeys,\r\n      publicKey,\r\n      address,\r\n      balance,\r\n    } = wallet\r\n\r\n    return {\r\n      publicKeys,\r\n      publicKey,\r\n      address,\r\n      balance,\r\n    }\r\n  })\r\n\r\n  return (wallets.length) ? wallets[0] : false\r\n}\r\n\r\nconst parseRawTX = async (txHash) => {\r\n  //@\r\n  const myBtcWallets = await getBtcMultisigKeys()\r\n  //@\r\n  const myBtcAddreses = myBtcWallets.map((wallet) => wallet.address)\r\n\r\n  const psbt = bitcoin.Psbt.fromHex(txHash)\r\n\r\n  const parsedTX = {\r\n    psbt,\r\n    input: [],\r\n    output: [],\r\n    from: false,\r\n    to: false,\r\n    out: {},\r\n    isOur: false,\r\n    amount: new BigNumber(0),\r\n  }\r\n\r\n  await new Promise((inputParsed) => {\r\n    psbt.data.inputs.forEach( async (input) => {\r\n      const { redeemScript } = input\r\n\r\n      const inputWallet = await getMSWalletByScript( redeemScript, myBtcWallets )\r\n      if (inputWallet) {\r\n        if (inputWallet.address) parsedTX.from = inputWallet.address\r\n        //@\r\n        parsedTX.wallet = inputWallet\r\n        parsedTX.isOur = true\r\n      }\r\n    })\r\n    inputParsed(true)\r\n  }).then(() => {\r\n    //@\r\n    psbt.data.globalMap.unsignedTx.tx.outs.forEach(async (out) => {\r\n      const address = bitcoin.address.fromOutputScript(out.script, btc.network)\r\n      if (!parsedTX.isOur) {\r\n        //@\r\n        const outWallet = myBtcWallets.filter((wallet) => wallet.address === address)\r\n\r\n        if (outWallet.length) {\r\n          if (outWallet[0].address) parsedTX.from = outWallet[0].address\r\n          //@\r\n          parsedTX.wallet = outWallet[0]\r\n          parsedTX.isOur = true\r\n        }\r\n      }\r\n      //@\r\n      if (parsedTX.from !== address) {\r\n        if (!parsedTX.out[address]) {\r\n          parsedTX.out[address] = {\r\n            to: address,\r\n            amount: new BigNumber(out.value).dividedBy(1e8).toNumber(),\r\n          }\r\n        } else {\r\n          parsedTX.out[address].amount = parsedTX.out[address].amount.plus(new BigNumber(out.value).dividedBy(1e8).toNumber())\r\n        }\r\n        parsedTX.amount = parsedTX.amount.plus(new BigNumber(out.value).dividedBy(1e8).toNumber())\r\n      }\r\n\r\n      parsedTX.output.push({\r\n        address,\r\n        valueSatoshi: out.value,\r\n        value: new BigNumber(out.value).dividedBy(1e8).toNumber(),\r\n      })\r\n    })\r\n\r\n    if (Object.keys(parsedTX.out).length) {\r\n      parsedTX.to = parsedTX.out[Object.keys(parsedTX.out)[0]].to\r\n    }\r\n  })\r\n\r\n  console.log('parsedTX', parsedTX)\r\n  return parsedTX\r\n}\r\n\r\nconst signMofNByMnemonic = async (txHash, option_M, publicKeys, mnemonic, walletNumber, ownPath) => {\r\n  const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, walletNumber, ownPath)\r\n  if (mnemonicWallet) {\r\n    console.log(mnemonicWallet)\r\n    console.log(txHash)\r\n    let txb = bitcoin.TransactionBuilder.fromTransaction(\r\n      bitcoin.Transaction.fromHex(txHash),\r\n      btc.network\r\n    )\r\n\r\n    console.log('p2ms', option_M, publicKeys.length, publicKeys)\r\n    const p2ms = bitcoin.payments.p2ms({\r\n      m: option_M,\r\n      n: publicKeys.length,\r\n      pubkeys: publicKeys,\r\n      network: btc.network,\r\n    })\r\n\r\n    const p2sh = bitcoin.payments.p2sh({ redeem: p2ms, network: btc.network })\r\n\r\n    console.log(txb)\r\n    //@\r\n    txb.__INPUTS.forEach((input, index) => {\r\n      txb.sign(index, bitcoin.ECPair.fromWIF(mnemonicWallet.WIF, btc.network), p2sh.redeem.output)\r\n    })\r\n\r\n    let tx = await txb.build()\r\n    const txHex = tx.toHex()\r\n    return txHex\r\n  }\r\n}\r\n\r\nconst signMultiSign = async (txHash, wallet) => {\r\n  let {\r\n    user: {\r\n      btcMultisigUserData: {\r\n        privateKey,\r\n        publicKeys,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  const psbt = bitcoin.Psbt.fromHex(txHash)\r\n\r\n  psbt.signAllInputs(bitcoin.ECPair.fromWIF(privateKey, btc.network))\r\n\r\n  psbt.finalizeAllInputs();\r\n\r\n  const rawTx = psbt.extractTransaction().toHex()\r\n\r\n  return rawTx\r\n}\r\n\r\nconst signSmsMnemonic = (txHash, mnemonic) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        publicKeys,\r\n      },\r\n    },\r\n  } = getState()\r\n  //@\r\n  return signMofNByMnemonic(txHash, 2, publicKeys, mnemonic, 1)\r\n}\r\n\r\nconst signPinMnemonic = (txHash, mnemonic) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, 1)\r\n    const psbt = bitcoin.Psbt.fromHex(txHash)\r\n\r\n    psbt.signAllInputs(bitcoin.ECPair.fromWIF(mnemonicWallet.WIF, btc.network))\r\n\r\n    psbt.finalizeAllInputs();\r\n\r\n    const rawTx = psbt.extractTransaction().toHex()\r\n\r\n    if (!rawTx) {\r\n      reject('rawTx empty')\r\n    } else {\r\n      resolve(rawTx)\r\n    }\r\n  })\r\n}\r\n\r\nconst signSmsMnemonicAndBuild = (txHash, mnemonic) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, 1)\r\n    const psbt = bitcoin.Psbt.fromHex(txHash)\r\n\r\n    psbt.signAllInputs(bitcoin.ECPair.fromWIF(mnemonicWallet.WIF, btc.network))\r\n\r\n    psbt.finalizeAllInputs();\r\n\r\n    const rawTx = psbt.extractTransaction().toHex()\r\n\r\n    if (!rawTx) {\r\n      reject('rawTx empty')\r\n    } else {\r\n      resolve(rawTx)\r\n    }\r\n  })\r\n}\r\n\r\nconst checkPinCanRestory = (mnemonic) => {\r\n  const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, 1)\r\n  let btcSmsMnemonicKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcSmsMnemonicKey)\r\n  \r\n  try {\r\n    btcSmsMnemonicKey = JSON.parse(btcSmsMnemonicKey)\r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n\r\n  if (btcSmsMnemonicKey instanceof Array && btcSmsMnemonicKey.length > 0) {\r\n    return btcSmsMnemonicKey.includes(mnemonicWallet.publicKey)\r\n  }\r\n  return false\r\n}\r\n\r\nconst checkPinMnemonic = (mnemonic) => {\r\n  const {\r\n    user: {\r\n      btcMultisigPinData: {\r\n        publicKeys,\r\n      },\r\n    },\r\n  } = getState()\r\n  const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, 1)\r\n\r\n  if (mnemonicWallet) {\r\n    const matchedKeys = publicKeys.filter((key) => key.toString('Hex') === mnemonicWallet.publicKey)\r\n    return (matchedKeys.length > 0)\r\n  }\r\n  return false\r\n}\r\n\r\nconst checkSmsMnemonic = (mnemonic) => {\r\n  const {\r\n    user: {\r\n      btcMultisigSMSData: {\r\n        publicKeys,\r\n      },\r\n    },\r\n  } = getState()\r\n  const mnemonicWallet = actions.btc.getWalletByWords(mnemonic, 1)\r\n\r\n  if (mnemonicWallet) {\r\n    const matchedKeys = publicKeys.filter((key) => key.toString('Hex') === mnemonicWallet.publicKey)\r\n    return (matchedKeys.length > 0)\r\n  }\r\n  return false\r\n}\r\n\r\nconst fetchUnspents = (address) => {\r\n  const result: any = actions.btc.fetchUnspents(address)\r\n  return result\r\n}\r\n\r\nconst broadcastTx = (txRaw) => {\r\n  const result: any = actions.btc.broadcastTx(txRaw)\r\n  return result\r\n}\r\n\r\nconst signMessage = (message, encodedPrivateKey) => {\r\n  const keyPair = bitcoin.ECPair.fromWIF(encodedPrivateKey, [bitcoin.networks.bitcoin, bitcoin.networks.testnet])\r\n  //@\r\n  const privateKey = keyPair.d.toBuffer(32)\r\n\r\n  const signature = bitcoinMessage.sign(message, privateKey, keyPair.compressed)\r\n\r\n  return signature.toString('base64')\r\n}\r\n\r\nconst getReputation = () => Promise.resolve(0)\r\n\r\n\r\nexport default {\r\n  // SMS Protected\r\n  beginRegisterSMS,\r\n  confirmRegisterSMS,\r\n  checkSMSActivated,\r\n  getBalance,\r\n  login_SMS,\r\n  checkG2FAActivated,\r\n  checkUserActivated,\r\n  getTransactionSMS,\r\n  sendSMSProtected,\r\n  confirmSMSProtected,\r\n  enableWalletSMS,\r\n  signSmsMnemonic,\r\n  signSmsMnemonicAndBuild,\r\n  checkSmsMnemonic,\r\n  getInvoicesSMS,\r\n  addSMSWallet,\r\n  isBTCSMSAddress,\r\n  getSmsKeyFromMnemonic,\r\n\r\n  // Pin protected\r\n  login_PIN,\r\n  register_PIN,\r\n  checkPINActivated,\r\n  addPinWallet,\r\n  getBalancePin,\r\n  sendPinProtected,\r\n  checkPinMnemonic,\r\n  signPinMnemonic,\r\n  checkPinCanRestory,\r\n  getTransactionPIN,\r\n\r\n  // User multisig\r\n  login_USER,\r\n  getBalanceUser,\r\n  getTransaction,\r\n  getTransactionUser,\r\n\r\n  send,\r\n\r\n  fetchUnspents,\r\n  broadcastTx,\r\n  broadcastTX2Room,\r\n  fetchTx,\r\n  fetchTxInfo,\r\n  fetchBalance,\r\n  signMessage,\r\n  getReputation,\r\n  enableWalletUSER,\r\n\r\n  parseRawTX,\r\n  signMultiSign,\r\n\r\n  onUserMultisigJoin,\r\n  onUserMultisigSend,\r\n  getInvoicesUser,\r\n\r\n  getBtcMultisigKeys,\r\n  addBtcMultisigKey,\r\n  removeBtcMultisigNey,\r\n  switchBtcMultisigKey,\r\n\r\n  fetchMultisigBalances,\r\n\r\n  isBTCMSUserAddress,\r\n  signToUserMultisig,\r\n\r\n  // common\r\n  isBTCAddress,\r\n  getAddrBalance,\r\n  addressToWallet,\r\n\r\n  // Google 2fa (draft not implements)\r\n  login_G2FA,\r\n  getBalanceG2FA,\r\n  getTransactionG2FA,\r\n  enableWalletG2FA,\r\n}\r\n"]}]}