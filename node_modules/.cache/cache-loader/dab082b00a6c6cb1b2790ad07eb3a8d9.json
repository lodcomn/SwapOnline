{"remainingRequest":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js??ref--9-1!C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\user.ts","dependencies":[{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\src\\front\\shared\\redux\\actions\\user.ts","mtime":1614852211711},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Alexei\\MultiCurrencyWallet\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/Alexei/MultiCurrencyWallet/src/front/shared/redux/actions/user.ts"],"names":["config","moment","constants","ethToken","request","actions","getState","reducers","bip39","getActivatedCurrencies","getCurrencyKey","metamask","initReducerState","user","activeCurrency","activeFiat","setActiveCurrency","setActiveFiat","window","DEFAULT_FIAT","sign_btc_multisig","btcPrivateKey","btcMultisigOwnerKey","localStorage","getItem","privateKeyNames","btcMultisigOtherOwnerKey","JSON","parse","e","_btcMultisigPrivateKey","btcmultisig","login_USER","signToUserMultisig","sign_btc_2fa","btcSMSServerKey","swapContract","protectedBtcKey","btcSmsPublicKeys","btcSmsMnemonicKey","console","error","Array","length","push","_btcMultisigSMSPrivateKey","login_SMS","sign_btc_pin","btcPinServerKey","btcPinKey","btcPinPublicKeys","btcPinMnemonicKey","log","_btcMultisigPinPrivateKey","login_PIN","sign","web3connect","onInit","mnemonic","twentywords","generateMnemonic","setItem","mnemonicKeys","btc","btcMnemonic","btcSms","btcSmsMnemonicKeyGenerated","eth","ethMnemonic","ghost","ghostMnemonic","next","nextMnemonic","sweepToMnemonic","getSmsKeyFromMnemonic","btcNewSmsMnemonicKey","btcSmsMnemonicKeyMnemonic","stringify","btcNewMultisigOwnerKey","btcMultisigOtherOwnerKeyMnemonic","btcMultisigPrivateKey","btcMultisig","ethPrivateKey","ghostPrivateKey","nextPrivateKey","_ethPrivateKey","login","_btcPrivateKey","_ghostPrivateKey","_nextPrivateKey","Object","keys","erc20","forEach","name","token","address","decimals","fullName","setTokenSigned","getReputation","sign_to_tokens","btcReputationPromise","ethReputationPromise","ghostReputationPromise","nextReputationPromise","Promise","all","then","btcReputation","ethReputation","ghostReputation","nextReputation","totalReputation","Number","isInteger","pubsubRoom","set","reputation","getBalances","isTokenSigned","setIsBalanceFetching","isBalanceFetching","resolve","balances","isEnabled","isConnected","func","getBalance","getBalanceUser","getBalancePin","fetchMultisigBalances","obj","setTimeout","customRate","cur","wTokens","widgetERC20Tokens","dataobj","find","el","toLowerCase","customEcxchangeRate","getExchangeRate","sellCurrency","buyCurrency","sellDataRate","buyDataRate","reject","dataKey","infoAboutCurrency","price_fiat","tokensData","currencyData","getDemoMoney","process","env","MAINNET","get","r","clear","demoMoneyReceived","location","reload","getInfoAboutCurrency","currencyNames","hasCustomRate","url","setIsFetching","isFetching","fiat","opts","cacheResponse","query","tokens","join","answer","infoAboutBTC","data","filter","currencyInfo","symbol","btcPrice","quote","price","map","currencyInfoItem","includes","priceInBtc","ownPrice","price_btc","setInfoAboutCurrency","isEthToken","setInfoAboutToken","clearTransactions","history","setTransactions","mergeTransactions","mergeTxs","transactions","concat","sort","a","b","date","item","pullTransactions","pullActiveCurrency","currency","delay","ms","fetchMultisigStatus","btcMultisigUserData","mainAddress","wallets","multisigTx","fetch","index","objCurrency","isBtcSweeped","isSweeped","isEthSweeped","isGhostSweeped","isNextSweeped","hiddenCoinsList","core","enabledCurrencies","fetchTxsPromises","getTransaction","getSweepAddress","getTransactionSMS","getTransactionPIN","getTransactionUser","getAddress","key","toUpperCase","txPromise","txList","ercTxs","getText","ethData","btcData","ghostData","nextData","text","hostname","privateKey","getWithdrawWallet","addr","needType","filtered","getWallets","wallet","walletType","isOwner","getAllMyAddresses","indexOf","downloadPrivateKeys","element","document","createElement","message","setAttribute","encodeURIComponent","format","style","display","body","appendChild","click","removeChild","notifications","show","Message","privateKeysSaved","getAuthData"],"mappings":"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","sourcesContent":["// @ts-nocheck\r\nimport config from 'app-config'\r\nimport moment from 'moment/moment'\r\nimport { constants, ethToken } from 'helpers'\r\nimport request from 'common/utils/request'\r\n\r\nimport actions from 'redux/actions'\r\nimport { getState } from 'redux/core'\r\n\r\nimport reducers from 'redux/core/reducers'\r\nimport * as bip39 from 'bip39'\r\n\r\nimport { getActivatedCurrencies } from 'helpers/user'\r\nimport getCurrencyKey from 'helpers/getCurrencyKey'\r\nimport metamask from 'helpers/metamask'\r\n\r\nimport { MnemonicKey } from './types'\r\n\r\n\r\n/*\r\n  Когда добавляем reducers, для старых пользователей они не инициализированы\r\n  Нужно проверять значение, и если undefined - инициализировать\r\n*/\r\nconst initReducerState = () => {\r\n  const {\r\n    user: {\r\n      activeCurrency,\r\n      activeFiat,\r\n    },\r\n  } = getState()\r\n\r\n  if (!activeCurrency) reducers.user.setActiveCurrency({ activeCurrency: 'BTC' })\r\n  if (!activeFiat) reducers.user.setActiveFiat({ activeFiat: window.DEFAULT_FIAT || 'USD' })\r\n}\r\n\r\nconst sign_btc_multisig = async (btcPrivateKey) => {\r\n  let btcMultisigOwnerKey = localStorage.getItem(constants.privateKeyNames.btcMultisigOtherOwnerKey)\r\n  try { btcMultisigOwnerKey = JSON.parse(btcMultisigOwnerKey) } catch (e) { }\r\n  //@\r\n  const _btcMultisigPrivateKey = actions.btcmultisig.login_USER(btcPrivateKey, btcMultisigOwnerKey)\r\n  await actions.btcmultisig.signToUserMultisig()\r\n}\r\n\r\n\r\nconst sign_btc_2fa = async (btcPrivateKey) => {\r\n  const btcSMSServerKey = config.swapContract.protectedBtcKey\r\n  let btcSmsPublicKeys = [btcSMSServerKey]\r\n  let btcSmsMnemonicKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcSmsMnemonicKey)\r\n  \r\n  try { \r\n    btcSmsMnemonicKey = JSON.parse(btcSmsMnemonicKey) \r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n\r\n  if (btcSmsMnemonicKey instanceof Array && btcSmsMnemonicKey.length > 0) {\r\n    btcSmsPublicKeys.push(btcSmsMnemonicKey[0])\r\n  }\r\n  const _btcMultisigSMSPrivateKey = actions.btcmultisig.login_SMS(btcPrivateKey, btcSmsPublicKeys)\r\n}\r\n\r\nconst sign_btc_pin = async (btcPrivateKey) => {\r\n  const btcPinServerKey = config.swapContract.btcPinKey\r\n  let btcPinPublicKeys = [btcPinServerKey]\r\n  let btcPinMnemonicKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcPinMnemonicKey)\r\n  \r\n  try { \r\n    btcPinMnemonicKey = JSON.parse(btcPinMnemonicKey) \r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n\r\n  if (btcPinMnemonicKey instanceof Array && btcPinMnemonicKey.length > 0) {\r\n    btcPinPublicKeys.push(btcPinMnemonicKey[0])\r\n  }\r\n\r\n  console.log('sign to btc pin', btcPinPublicKeys)\r\n  const _btcMultisigPinPrivateKey = actions.btcmultisig.login_PIN(btcPrivateKey, btcPinPublicKeys)\r\n}\r\n\r\nconst sign = async () => {\r\n  metamask.web3connect.onInit( async () => {\r\n    initReducerState()\r\n\r\n    let mnemonic = localStorage.getItem(constants.privateKeyNames.twentywords)\r\n\r\n    if (!mnemonic) {\r\n      mnemonic = bip39.generateMnemonic()\r\n      localStorage.setItem(constants.privateKeyNames.twentywords, mnemonic)\r\n    }\r\n\r\n    const mnemonicKeys = {\r\n      btc: localStorage.getItem(constants.privateKeyNames.btcMnemonic),\r\n      btcSms: localStorage.getItem(constants.privateKeyNames.btcSmsMnemonicKeyGenerated),\r\n      eth: localStorage.getItem(constants.privateKeyNames.ethMnemonic),\r\n      ghost: localStorage.getItem(constants.privateKeyNames.ghostMnemonic),\r\n      next: localStorage.getItem(constants.privateKeyNames.nextMnemonic),\r\n    }\r\n    console.log('actions user - sign', mnemonicKeys, mnemonic)\r\n    if (mnemonic !== `-`) {\r\n      //@\r\n      if (!mnemonicKeys.btc) mnemonicKeys.btc = actions.btc.sweepToMnemonic(mnemonic)\r\n      //@\r\n      if (!mnemonicKeys.eth) mnemonicKeys.eth = actions.eth.sweepToMnemonic(mnemonic)\r\n      //@\r\n      if (!mnemonicKeys.ghost) mnemonicKeys.ghost = actions.ghost.sweepToMnemonic(mnemonic)\r\n        //@\r\n      if (!mnemonicKeys.next) mnemonicKeys.next = actions.next.sweepToMnemonic(mnemonic)\r\n      if (!mnemonicKeys.btcSms) {\r\n        mnemonicKeys.btcSms = actions.btcmultisig.getSmsKeyFromMnemonic(mnemonic)\r\n        localStorage.setItem(constants.privateKeyNames.btcSmsMnemonicKeyGenerated, mnemonicKeys.btcSms)\r\n      }\r\n    }\r\n    // Sweep-Switch\r\n    let btcNewSmsMnemonicKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcSmsMnemonicKeyMnemonic)\r\n    \r\n    try { \r\n      btcNewSmsMnemonicKey = JSON.parse(btcNewSmsMnemonicKey) \r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n\r\n    if (!(btcNewSmsMnemonicKey instanceof Array)) {\r\n      localStorage.setItem(constants.privateKeyNames.btcSmsMnemonicKeyMnemonic, JSON.stringify([]))\r\n    }\r\n\r\n    let btcNewMultisigOwnerKey: MnemonicKey = localStorage.getItem(constants.privateKeyNames.btcMultisigOtherOwnerKeyMnemonic)\r\n    \r\n    try { \r\n      btcNewMultisigOwnerKey = JSON.parse(btcNewMultisigOwnerKey) \r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n\r\n    if (!(btcNewMultisigOwnerKey instanceof Array)) {\r\n      localStorage.setItem(constants.privateKeyNames.btcMultisigOtherOwnerKeyMnemonic, JSON.stringify([]))\r\n    }\r\n\r\n    const btcPrivateKey = localStorage.getItem(constants.privateKeyNames.btc)\r\n    const btcMultisigPrivateKey = localStorage.getItem(constants.privateKeyNames.btcMultisig)\r\n    const ethPrivateKey = localStorage.getItem(constants.privateKeyNames.eth)\r\n    const ghostPrivateKey = localStorage.getItem(constants.privateKeyNames.ghost)\r\n    const nextPrivateKey = localStorage.getItem(constants.privateKeyNames.next)\r\n\r\n\r\n    const _ethPrivateKey = actions.eth.login(ethPrivateKey, mnemonic, mnemonicKeys)\r\n    const _btcPrivateKey = actions.btc.login(btcPrivateKey, mnemonic, mnemonicKeys)\r\n    const _ghostPrivateKey = actions.ghost.login(ghostPrivateKey, mnemonic, mnemonicKeys)\r\n    const _nextPrivateKey = actions.next.login(nextPrivateKey, mnemonic, mnemonicKeys)\r\n\r\n    // btc multisig with 2fa (2of3)\r\n    await sign_btc_2fa(_btcPrivateKey)\r\n\r\n    // btc multisig 2of2 user manual sign\r\n    await sign_btc_multisig(_btcPrivateKey)\r\n\r\n    // btc multisig with pin protect (2of3)\r\n    await sign_btc_pin(_btcPrivateKey)\r\n\r\n    // if inside actions.token.login to call web3.eth.accounts.privateKeyToAccount passing public key instead of private key\r\n    // there will not be an error, but the address returned will be wrong\r\n    // if (!isEthKeychainActivated) {\r\n    Object.keys(config.erc20)\r\n      .forEach(name => {\r\n        actions.token.login(_ethPrivateKey, config.erc20[name].address, name, config.erc20[name].decimals, config.erc20[name].fullName)\r\n      })\r\n    // }\r\n    reducers.user.setTokenSigned(true)\r\n\r\n    // const getReputation = actions.user.getReputation()\r\n\r\n    await getReputation()\r\n  })\r\n}\r\n\r\nconst sign_to_tokens = () => {\r\n  const ethPrivateKey = localStorage.getItem(constants.privateKeyNames.eth)\r\n  Object.keys(config.erc20)\r\n    .forEach(name => {\r\n      actions.token.login(ethPrivateKey, config.erc20[name].address, name, config.erc20[name].decimals, config.erc20[name].fullName)\r\n    })\r\n}\r\n\r\nconst getReputation = async () => {\r\n\r\n  const btcReputationPromise = actions.btc.getReputation()\r\n  const ethReputationPromise = actions.eth.getReputation()\r\n  const ghostReputationPromise = actions.ghost.getReputation()\r\n  const nextReputationPromise = actions.next.getReputation()\r\n\r\n  Promise.all([\r\n    btcReputationPromise,\r\n    ethReputationPromise,\r\n    ghostReputationPromise,\r\n    nextReputationPromise,\r\n  ])\r\n    .then(([btcReputation, ethReputation, ghostReputation, nextReputation]) => {\r\n      const totalReputation = Number(btcReputation) + Number(ethReputation) + Number(ghostReputation) + Number(nextReputation)\r\n\r\n      if (Number.isInteger(totalReputation)) {\r\n        reducers.pubsubRoom.set({ reputation: totalReputation })\r\n      } else {\r\n        reducers.pubsubRoom.set({ reputation: null })\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(`unknown reputation`, error)\r\n    })\r\n}\r\n\r\n\r\nconst getBalances = () => {\r\n  const {\r\n    user: {\r\n      isTokenSigned,\r\n    },\r\n  } = getState()\r\n\r\n  reducers.user.setIsBalanceFetching({ isBalanceFetching: true })\r\n\r\n  return new Promise(async (resolve) => {\r\n    const balances = [\r\n      ...(metamask.isEnabled() && metamask.isConnected())\r\n        ? [ { func: metamask.getBalance, name: 'metamask' } ]\r\n        : [],\r\n      { func: actions.eth.getBalance, name: 'eth' },\r\n      { func: actions.btc.getBalance, name: 'btc' },\r\n      { func: actions.ghost.getBalance, name: 'ghost' },\r\n      { func: actions.next.getBalance, name: 'next' },\r\n      { func: actions.btcmultisig.getBalance, name: 'btc-sms' },\r\n      { func: actions.btcmultisig.getBalanceUser, name: 'btc-ms-main' },\r\n      { func: actions.btcmultisig.getBalancePin, name: 'btc-pin' },\r\n      { func: actions.btcmultisig.fetchMultisigBalances, name: 'btc-ms' }\r\n    ]\r\n\r\n    balances.forEach(async (obj) => {\r\n      try {\r\n        await obj.func()\r\n      } catch (e) {\r\n        console.error('Fail fetch balance for', obj.name)\r\n      }\r\n    })\r\n\r\n    if (isTokenSigned) {\r\n      // wait until all token data is loaded and will be in the store\r\n      setTimeout(() => {\r\n        // local storage data\r\n        Object.keys(config.erc20)\r\n          .forEach(async (name) => {\r\n            try {\r\n              await actions.token.getBalance(name)\r\n              \r\n            } catch (e) {\r\n              console.error('Fail fetch balance for token', name, e)\r\n            }\r\n          })\r\n      })\r\n    }\r\n\r\n    reducers.user.setIsBalanceFetching({ isBalanceFetching: false })\r\n    resolve(true)\r\n  })\r\n}\r\n\r\nconst customRate = (cur) => {\r\n  const wTokens = window.widgetERC20Tokens\r\n\r\n  const dataobj = wTokens && Object.keys(wTokens).find(el => el === cur.toLowerCase())\r\n  return dataobj ? (wTokens[dataobj] || { customEcxchangeRate: null }).customEcxchangeRate : null\r\n}\r\n\r\nconst getExchangeRate = (sellCurrency, buyCurrency): Promise<number> => {\r\n  const sellDataRate = customRate(sellCurrency)\r\n  const buyDataRate = customRate(buyCurrency)\r\n\r\n  const {\r\n    user,\r\n  } = getState()\r\n\r\n  return new Promise((resolve, reject) => {\r\n\r\n    if (sellDataRate) {\r\n      resolve(sellDataRate)\r\n      return\r\n    }\r\n\r\n    if (buyDataRate) {\r\n      resolve(1 / buyDataRate)\r\n      return\r\n    }\r\n\r\n    let dataKey = sellCurrency.toLowerCase()\r\n    switch (sellCurrency.toLowerCase()) {\r\n      case 'btc (sms-protected)':\r\n      case 'btc (multisig)':\r\n      case 'btc (pin-protected)':\r\n        dataKey = 'btc'\r\n        break\r\n      default:\r\n    }\r\n\r\n    if ((user[`${dataKey}Data`]\r\n      && user[`${dataKey}Data`].infoAboutCurrency\r\n      && user[`${dataKey}Data`].infoAboutCurrency.price_fiat\r\n    ) || (\r\n        user.tokensData[dataKey]\r\n        && user.tokensData[dataKey].infoAboutCurrency\r\n        && user.tokensData[dataKey].infoAboutCurrency.price_fiat\r\n      )\r\n    ) {\r\n      const currencyData = (user.tokensData[dataKey] && user.tokensData[dataKey].infoAboutCurrency)\r\n        ? user.tokensData[dataKey]\r\n        : user[`${dataKey}Data`]\r\n\r\n      resolve(currencyData.infoAboutCurrency.price_fiat)\r\n    } else {\r\n      resolve(1)\r\n    }\r\n  })\r\n}\r\n\r\nconst getDemoMoney = process.env.MAINNET ? () => { } : () => {\r\n  // googe bitcoin (or ropsten) faucet\r\n  request.get('https://swap.wpmix.net/demokeys.php', {})\r\n    .then((r) => {\r\n      window.localStorage.clear()\r\n      localStorage.setItem(constants.privateKeyNames.btc, r[0])\r\n      localStorage.setItem(constants.privateKeyNames.eth, r[1])\r\n      localStorage.setItem(constants.privateKeyNames.ghost, r[2])\r\n      localStorage.setItem(constants.privateKeyNames.next, r[3])\r\n      //@\r\n      localStorage.setItem(constants.localStorage.demoMoneyReceived, true)\r\n      window.location.reload()\r\n    })\r\n}\r\n\r\n\r\nconst getInfoAboutCurrency = (currencyNames) =>\r\n\r\n  new Promise((resolve, reject) => {\r\n\r\n    const hasCustomRate = (cur) => {\r\n      const dataobj = Object.keys(config.erc20).find(el => el.toLowerCase() === cur.toLowerCase())\r\n      return dataobj ? (config.erc20[dataobj] || { customEcxchangeRate: false }).customEcxchangeRate : false\r\n    }\r\n\r\n    const url = 'https://noxon.wpmix.net/cursAll.php'\r\n    reducers.user.setIsFetching({ isFetching: true })\r\n\r\n    const fiat = (config && config.opts && config.opts.activeFiat) ? config.opts.activeFiat : `USD`\r\n\r\n    request.get(url, {\r\n      cacheResponse: 60 * 60 * 1000, // кеш 1 час\r\n      query: {\r\n        fiat,\r\n        tokens: currencyNames.join(`,`),\r\n      }\r\n    }).then((answer: any) => {\r\n      let infoAboutBTC = answer.data.filter(currencyInfo => {\r\n        if (currencyInfo.symbol.toLowerCase() === 'btc') return true\r\n      })\r\n\r\n      const btcPrice = (\r\n        infoAboutBTC\r\n        && infoAboutBTC.length\r\n        && infoAboutBTC[0].quote\r\n        && infoAboutBTC[0].quote[fiat]\r\n        && infoAboutBTC[0].quote[fiat].price\r\n      ) ? infoAboutBTC[0].quote[fiat].price : 7000\r\n\r\n      answer.data.map(currencyInfoItem => {\r\n        if (currencyNames.includes(currencyInfoItem.symbol)) {\r\n          if (currencyInfoItem.quote && currencyInfoItem.quote[fiat]) {\r\n            const priceInBtc = currencyInfoItem.quote[fiat].price / btcPrice\r\n            const ownPrice = hasCustomRate(currencyInfoItem.symbol)\r\n\r\n            const currencyInfo = {\r\n              ...currencyInfoItem.quote[fiat],\r\n              price_fiat: (ownPrice) ? ownPrice : currencyInfoItem.quote[fiat].price,\r\n              price_btc: priceInBtc,\r\n            }\r\n\r\n            switch (currencyInfoItem.symbol) {\r\n              case 'BTC': {\r\n                reducers.user.setInfoAboutCurrency({ name: 'btcData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'btcMnemonicData', infoAboutCurrency: currencyInfo }) // Sweep (for future)\r\n                reducers.user.setInfoAboutCurrency({ name: 'btcMultisigSMSData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'btcMultisigUserData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'btcMultisigG2FAData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'btcMultisigPinData', infoAboutCurrency: currencyInfo })\r\n                break\r\n              }\r\n              case 'ETH': {\r\n                reducers.user.setInfoAboutCurrency({ name: 'ethData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'ethMnemonicData', infoAboutCurrency: currencyInfo }) // Sweep (for future)\r\n                break\r\n              }\r\n              case 'GHOST': {\r\n                reducers.user.setInfoAboutCurrency({ name: 'ghostData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'ghostMnemonicData', infoAboutCurrency: currencyInfo }) // Sweep (for future)\r\n                break\r\n              }\r\n              case 'NEXT': {\r\n                reducers.user.setInfoAboutCurrency({ name: 'nextData', infoAboutCurrency: currencyInfo })\r\n                reducers.user.setInfoAboutCurrency({ name: 'nextMnemonicData', infoAboutCurrency: currencyInfo }) // Sweep (for future)\r\n                break\r\n              }\r\n              default: {\r\n                if (ethToken.isEthToken({ name: currencyInfoItem.symbol })) {\r\n                  reducers.user.setInfoAboutToken({ name: currencyInfoItem.symbol.toLowerCase(), infoAboutCurrency: currencyInfo })\r\n                } else {\r\n                  reducers.user.setInfoAboutCurrency({ name: `${currencyInfoItem.symbol.toLowerCase()}Data`, infoAboutCurrency: currencyInfo })\r\n                }\r\n                break\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n      resolve(true)\r\n    }).catch((error) => {\r\n      reject(error)\r\n    }).finally(() => reducers.user.setIsFetching({ isFetching: false }))\r\n  })\r\n\r\n\r\nconst clearTransactions = () => {\r\n  reducers.history.setTransactions([])\r\n}\r\n\r\nconst mergeTransactions = (mergeTxs: any[]) => {\r\n  const {\r\n    history: {\r\n      transactions,\r\n    },\r\n  } = getState()\r\n  let data = [].concat(transactions, ...mergeTxs).sort((a, b) => b.date - a.date).filter((item) => item)\r\n  reducers.history.setTransactions(data)\r\n}\r\n\r\nconst pullTransactions = transactions => {\r\n  let data = [].concat([], ...transactions).sort((a, b) => b.date - a.date).filter((item) => item)\r\n  reducers.history.setTransactions(data)\r\n}\r\n\r\nconst pullActiveCurrency = (currency) => {\r\n  reducers.user.setActiveCurrency({ activeCurrency: currency })\r\n}\r\n\r\nconst delay = (ms) => new Promise(resolve => setTimeout(() => resolve(true), ms))\r\n\r\nconst fetchMultisigStatus = async () => {\r\n  const {\r\n    user: {\r\n      btcMultisigUserData: {\r\n        address: mainAddress,\r\n        wallets,\r\n      },\r\n    },\r\n  } = getState()\r\n\r\n  actions.multisigTx.fetch(mainAddress)\r\n  if (wallets && wallets.length) {\r\n    wallets.map(({ address }, index) => new Promise(async (resolve) => {\r\n      actions.multisigTx.fetch(address)\r\n      resolve(true)\r\n    }))\r\n  }\r\n}\r\n\r\nconst setTransactions = async (objCurrency = null) => {\r\n  /* \r\n    objCurrency = {\r\n      currency: {\r\n        isBalanceFetched: bool\r\n      }\r\n    }\r\n    \r\n    \"GHOST\",\r\n    \"NEXT\"\r\n    \"ETH\"\r\n    \"BTC\"\r\n    \"BTC (SMS-Protected)\"\r\n    \"BTC (PIN-Protected)\"\r\n    \"BTC (Google 2FA)\"\r\n    \"BTC (Multisig)\"\r\n    \"USDT\",\r\n    \"ETH\"\r\n  */\r\n\r\n  const isBtcSweeped = actions.btc.isSweeped()\r\n  const isEthSweeped = actions.eth.isSweeped()\r\n  const isGhostSweeped = actions.ghost.isSweeped()\r\n  const isNextSweeped = actions.next.isSweeped()\r\n\r\n  const {\r\n    core: { hiddenCoinsList },\r\n  } = getState()\r\n  const enabledCurrencies = getActivatedCurrencies()\r\n\r\n  /*\r\n    fetching penging btc-ms txs\r\n  */\r\n\r\n  try {\r\n    clearTransactions()\r\n\r\n    const fetchTxsPromises = [\r\n      actions.btc.getTransaction(),\r\n      ...(isBtcSweeped) ? [] : [actions.btc.getTransaction(actions.btc.getSweepAddress())],\r\n      actions.btcmultisig.getTransactionSMS(),\r\n      actions.btcmultisig.getTransactionPIN(),\r\n      actions.btcmultisig.getTransactionUser(),\r\n      actions.eth.getTransaction(),\r\n      ...(metamask.isEnabled() && metamask.isConnected()) ? [actions.eth.getTransaction(metamask.getAddress())] : [],\r\n      ...(isEthSweeped) ? [] : [actions.eth.getTransaction(actions.eth.getSweepAddress())],\r\n      ...objCurrency && objCurrency['GHOST'] ? [actions.ghost.getTransaction()] : [],\r\n      ...objCurrency && objCurrency['NEXT'] ? [actions.next.getTransaction()] : [],\r\n    ]\r\n    \r\n    const erc20 = Object.keys(config.erc20)\r\n      .filter((key) => !hiddenCoinsList.includes(key.toUpperCase()) && enabledCurrencies.includes(key.toUpperCase()))\r\n\r\n    fetchTxsPromises.forEach((txPromise: Promise<any[]>) => {\r\n      txPromise.then((txList: any[]) => {\r\n        mergeTransactions(txList)\r\n      })\r\n    })\r\n    erc20.map((name, index) => {\r\n      delay(650 * index).then(() => {\r\n        actions.token.getTransaction(null, name).then((ercTxs: any[]) => {\r\n          mergeTransactions(ercTxs)\r\n        })\r\n      })\r\n    })\r\n  } catch (error) {\r\n    console.error('getTransError: ', error)\r\n  }\r\n}\r\n\r\nconst getText = () => {\r\n  const { user: { ethData, btcData, ghostData, nextData } } = getState()\r\n\r\n\r\n  let text = `\r\n  You will need this instruction only in case of emergency (if you lost your keys) \\r\\n\r\n  please do NOT waste your time and go back to swap.online\\r\\n\r\n  \\r\\n\r\n  \\r\\n\r\n  \\r\\n\r\n  \\r\\n\r\n${window.location.hostname} emergency only instruction\r\n\\r\\n\r\n#ETHEREUM\r\n\\r\\n\r\nEthereum address: ${ethData.address}  \\r\\n\r\nPrivate key: ${ethData.privateKey}\\r\\n\r\n\\r\\n\r\nHow to access tokens and ethers: \\r\\n\r\n1. Go here https://www.myetherwallet.com/#send-transaction \\r\\n\r\n2. Select 'Private key'\\r\\n\r\n3. paste private key to input and click \"unlock\"\\r\\n\r\n\\r\\n\r\n# BITCOIN\\r\\n\r\n\\r\\n\r\nBitcoin address: ${btcData.address}\\r\\n\r\nPrivate key: ${btcData.privateKey}\\r\\n\r\n\\r\\n\r\n1. Go to blockchain.info\\r\\n\r\n2. login\\r\\n\r\n3. Go to settings > addresses > import\\r\\n\r\n4. paste private key and click \"Ok\"\\r\\n\r\n\\r\\n\r\n# GHOST\\r\\n\r\n\\r\\n\r\nGhost address: ${ghostData.address}\\r\\n\r\nPrivate key: ${ghostData.privateKey}\\r\\n\r\n\\r\\n\r\n# NEXT\\r\\n\r\n\\r\\n\r\nNext address: ${nextData.address}\\r\\n\r\nPrivate key: ${nextData.privateKey}\\r\\n\r\n\\r\\n\r\n* We don\\'t store your private keys and will not be able to restore them!\r\n\\r\\n\r\n`\r\n\r\n  return text\r\n}\r\n\r\nexport const getWithdrawWallet = (currency, addr) => {\r\n  const needType = getCurrencyKey(currency, true).toUpperCase()\r\n\r\n  const filtered = actions.core.getWallets({}).filter((wallet) => {\r\n    const walletType = getCurrencyKey(wallet.currency, true).toUpperCase()\r\n\r\n    return (walletType === needType && addr === wallet.address) || (!addr && (walletType === needType))\r\n  })\r\n\r\n  return (filtered.length) ? filtered[0] : false\r\n}\r\n\r\nexport const isOwner = (addr, currency) => {\r\n  if (ethToken.isEthToken({ name: currency })) {\r\n    if (actions.eth.getAllMyAddresses().indexOf(addr.toLowerCase()) !== -1) return true\r\n    const {\r\n      user: {\r\n        ethData: {\r\n          address,\r\n        },\r\n      },\r\n    } = getState()\r\n\r\n    return addr === address\r\n  }\r\n\r\n  if (actions.btc.getAllMyAddresses().indexOf(addr.toLowerCase()) !== -1) return true\r\n  if (actions.ghost.getAllMyAddresses().indexOf(addr.toLowerCase()) !== -1) return true\r\n  if (actions.next.getAllMyAddresses().indexOf(addr.toLowerCase()) !== -1) return true\r\n  if (actions.eth.getAllMyAddresses().indexOf(addr.toLowerCase()) !== -1) return true\r\n\r\n  if (metamask\r\n    && metamask.isEnabled()\r\n    && metamask.isConnected()\r\n    && metamask.getAddress().toLowerCase() == addr.toLowerCase()\r\n  ) return true\r\n\r\n  const name = `${currency.toLowerCase()}Data`\r\n  const { user } = getState()\r\n\r\n  if (!user[name]) {\r\n    return false\r\n  }\r\n\r\n  const { address } = user[name]\r\n\r\n  if (!address) {\r\n    return false\r\n  }\r\n\r\n  return addr === address\r\n}\r\n\r\n\r\nconst downloadPrivateKeys = () => {\r\n  const element = document.createElement('a')\r\n  const text = getText()\r\n  const message = 'Check your browser downloads'\r\n\r\n  element.setAttribute('href', `data:text/plaincharset=utf-8,${encodeURIComponent(text)}`)\r\n  element.setAttribute('download', `${window.location.hostname}_keys_${moment().format('DD.MM.YYYY')}.txt`)\r\n\r\n  element.style.display = 'none'\r\n  document.body.appendChild(element)\r\n  element.click()\r\n  document.body.removeChild(element)\r\n\r\n  actions.notifications.show(constants.notifications.Message, {\r\n    message,\r\n  })\r\n  //@\r\n  localStorage.setItem(constants.localStorage.privateKeysSaved, true)\r\n}\r\n\r\nwindow.downloadPrivateKeys = downloadPrivateKeys\r\n\r\nconst getAuthData = (name) => {\r\n  const { user } = getState()\r\n  return user[`${name}Data`]\r\n}\r\n\r\n// const addMessagingToken = (token) => {\r\n//   console.log(\"Added firebase token to redux store: \", token)\r\n//   reducers.user.addMessagingToken({ token })\r\n// }\r\n\r\nexport default {\r\n  sign,\r\n  sign_btc_2fa,\r\n  sign_btc_pin,\r\n  sign_btc_multisig,\r\n  sign_to_tokens,\r\n  getBalances,\r\n  getDemoMoney,\r\n  setTransactions,\r\n  downloadPrivateKeys,\r\n  getText,\r\n  isOwner,\r\n  getExchangeRate,\r\n  getReputation,\r\n  getInfoAboutCurrency,\r\n  getAuthData,\r\n  getWithdrawWallet,\r\n  fetchMultisigStatus,\r\n  pullActiveCurrency,\r\n  // addMessagingToken,\r\n}\r\n"]}]}