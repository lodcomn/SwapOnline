"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _resolveStoreProps = _interopRequireDefault(require("./resolveStoreProps"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// supports array of strings, strings with dot, or function
var lookup = function lookup(state, ownProps, keyValue) {
  if (typeof keyValue === 'function') return keyValue(state, ownProps);
  if (typeof keyValue === 'string') return (0, _resolveStoreProps["default"])(state, keyValue);
  throw new Error("Unknown lookup value: " + keyValue);
};
/*
 Takes an object where key is anything you want and value (aka storeProp) is either
 - a dot delimited string
 - array of strings
 - function that returns an array of strings
 Returns the same object, but where the values are the resolved data
 */


var resolve = function resolve(storeProps, state, ownProps) {
  var resolved = {};

  for (var key in storeProps) {
    if (storeProps.hasOwnProperty(key)) {
      resolved[key] = lookup(state, ownProps, storeProps[key]);
    }
  }

  return resolved;
};

var mapStateToProps = function mapStateToProps(storeProps) {
  return function (state, ownProps) {
    if (typeof storeProps === 'function') {
      return storeProps(state, ownProps);
    }

    return resolve(storeProps, state, ownProps);
  };
};

var defaults = {
  pure: true,
  withRef: false
};
var reduxConnect;

var connect = function connect(storeProps, options) {
  if (!reduxConnect) {
    try {
      reduxConnect = require('react-redux').connect;
    } catch (err) {
      throw new Error(err);
    }
  }

  var isCorrectType = !Array.isArray(storeProps) && ['string', 'object', 'function'].indexOf(typeof storeProps) >= 0;

  if (!storeProps || !isCorrectType) {
    throw new Error('First argument must be type of String, Object or Function');
  }

  var connector = reduxConnect(mapStateToProps(storeProps), function () {
    return {};
  }, null, _objectSpread({}, defaults, options));
  return function (Component) {
    Component.storeProps = storeProps;
    return connector(Component);
  };
};

var _default = connect;
exports["default"] = _default;