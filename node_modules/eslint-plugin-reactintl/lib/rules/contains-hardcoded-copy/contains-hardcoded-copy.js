'use strict';

var errorMessage = 'Element contains hardcoded copy';

function reportError(node, context) {
    context.report({
        node: node,
        message: errorMessage
    });
}

function isLiteral(child) {
    var childIsLiteral = child && child.type === 'Literal' && child.value;

    if (childIsLiteral) {
        return true;
    }

    return false;
}

// After removing all whitespace check if there's any
// part of the literal left to evaluate
function literalLength(child) {
    var childValue = child && child.value && child.value.replace && child.value.replace(/[ \t\r\n]+/g, '').length;
    return Boolean(childValue);
}

module.exports = {
    create: function create(context) {
        return {
            JSXOpeningElement: function JSXOpeningElement(node) {
                var firstChildOfNode = node.parent.children[0];

                if (isLiteral(firstChildOfNode) && literalLength(firstChildOfNode)) {
                    reportError(firstChildOfNode, context);
                }
            },
            JSXExpressionContainer: function JSXExpressionContainer(node) {
                var expressionInNode = node.expression;

                if (isLiteral(expressionInNode) && literalLength(expressionInNode)) {
                    reportError(expressionInNode, context);
                }
            }
        };
    }
};